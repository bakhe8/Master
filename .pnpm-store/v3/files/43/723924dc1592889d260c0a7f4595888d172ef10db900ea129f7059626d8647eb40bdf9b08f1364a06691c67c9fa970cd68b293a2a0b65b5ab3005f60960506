/*!
 * Crafted with ‚ù§ by Salla
 */
import { r as registerInstance, h } from './index-CUu-nBEz.js';
import { a as arrowLeft } from './arrow-left-BedNk7k1.js';
import { H as Helper } from './Helper-B51hb0bi.js';
import './anime.es-CgtvEd63.js';

var IconQuoteOpen = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>quote-open</title>
<path d="M8 12v-5.333c0-0.737-0.596-1.333-1.333-1.333-3.676 0-6.667 2.991-6.667 6.667v8c0 3.676 2.991 6.667 6.667 6.667h1.333c3.676 0 6.667-2.991 6.667-6.667v-1.333c0-3.676-2.991-6.667-6.667-6.667zM12 20c0 2.205-1.795 4-4 4h-1.333c-2.205 0-4-1.795-4-4v-8c0-1.739 1.115-3.221 2.667-3.772v5.105c0 0.737 0.596 1.333 1.333 1.333h1.333c2.205 0 4 1.795 4 4zM25.333 12v-5.333c0-0.737-0.596-1.333-1.333-1.333-3.676 0-6.667 2.991-6.667 6.667v8c0 3.676 2.991 6.667 6.667 6.667h1.333c3.676 0 6.667-2.991 6.667-6.667v-1.333c0-3.676-2.991-6.667-6.667-6.667zM29.333 20c0 2.205-1.795 4-4 4h-1.333c-2.205 0-4-1.795-4-4v-8c0-1.739 1.115-3.221 2.667-3.772v5.105c0 0.737 0.596 1.333 1.333 1.333h1.333c2.205 0 4 1.795 4 4z"></path>
</svg>
`;

const sallaReviewsCss = "";

const SallaReviews = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the maximum number of reviews to retrieve from the API.
         *
         * @type {number}
         * @default 5
         */
        this.limit = 5;
        /**
         * Specifies the type of reviews to fetch.
         * Available options:
         * - "all": Fetches reviews from all sources.
         * - "store": Fetches reviews specific to the store.
         * - "products": Fetches reviews specific to products.
         *
         * @type {ReviewType}
         * @default store
         */
        this.type = "store";
        /**
         * Specifies the sorting criteria for the fetched reviews.
         * Available options:
         * - "top_rating": Sorts reviews based on top ratings.
         * - "random": Sorts reviews randomly.
         * - "latest": Sorts reviews based on the latest ones (default).
         *
         * @type {SortingOption}
         * @default latest
         */
        this.sort = "latest";
        /**
         * Specifies whether to hide customer information in the component.
         * When set to true, customer information will be hidden.
         * Defaults to false, meaning customer information will be displayed.
         */
        this.hideCustomerInfo = false;
        this.reviews = [];
        this.showReviews = false;
        this.testimonialText = salla.lang.get('blocks.home.testimonials');
        this.displayAllLinkText = salla.lang.get('blocks.home.display_all');
        this.displayAllURL = null;
        this.source = this.source;
        salla.onReady(() => {
            this.displayAllURL = salla.url.get('testimonials');
            this.isRTL = salla.config.get('theme.is_rtl', true);
        });
        salla.lang.onLoaded(() => {
            this.testimonialText = salla.lang.get('blocks.home.testimonials');
            this.displayAllLinkText = salla.lang.get('blocks.home.display_all');
        });
    }
    fetchReviews() {
        if (this.source === 'json') {
            return Promise.resolve(JSON.parse(this.sourceValue));
        }
        const isJsonEncoded = ['products', 'categories'].includes(this.source);
        const params = {
            limit: this.limit,
            source: this.source,
            items: isJsonEncoded ? JSON.parse(this.sourceValue) : this.sourceValue,
            sort: this.sort,
            type: this.type,
            hide_customer_info: this.hideCustomerInfo ? 1 : 0
        };
        return salla.api.request('reviews', { params }, 'get');
    }
    componentWillLoad() {
        return (new Promise(resolve => salla.onReady(resolve)))
            .then(() => this.fetchReviews())
            .then((resp) => resp.data || [])
            .then(reviews => {
            if (reviews.length) {
                this.reviews = reviews;
                this.showReviews = true;
                Helper.generateReviewSchema(this.reviews);
            }
        });
    }
    render() {
        return (h("div", { key: '636e5db1fe5a6441a3a779c26e383fec4cba4908', class: "s-reviews-container" }, h("div", { key: '5b2a8c72c8544cf152f811c67c23ed8e07a9af58', class: "s-reviews-header-wrapper" }, h("h1", { key: '786e8cfb33ae5b602de1f889d40307abe3dce582', class: "s-reviews-header" }, this.testimonialText), !!this.displayAllLink ? (h("a", { href: this.displayAllURL, class: "s-reviews-display-all" }, this.displayAllLinkText, h("span", { class: "s-reviews-display-all-icon", innerHTML: arrowLeft }))) : null), h("salla-slider", { key: 'f950c968c0b076b365b450a13ffabad4e3e9a4da', centered: true, "slides-per-view": 1, type: "testimonials", class: "s-reviews-testimonials-slider", "controls-outer": true, "auto-play": true, id: `testimonials-${this.source}-slider` }, h("div", { key: 'ca057f133699b406673b2e3dc476c14dc0dd9f79', slot: "items" }, this.reviews.map((item, index) => (h("div", { key: index, class: "s-reviews-swiper-slide" }, h("div", { class: "s-reviews-testimonial" }, h("div", { class: "s-reviews-testimonial__inner" }, h("div", { class: "s-reviews-testimonial__avatar" }, h("img", { src: 'images/s-empty.png', "data-src": item.avatar, alt: item.name ? item.name : 'testimonial-' + index, class: "lazy" })), h("div", { class: "s-reviews-testimonial__text" }, h("p", { innerHTML: item.content }), h("div", { class: "s-reviews-testimonial__name_wrapper" }, h("div", { class: "s-reviews-testimonial__info" }, item.name && h("h2", null, `${item.name}`)), h("div", { class: "s-reviews-testimonial__rating" }, h("salla-rating-stars", { size: "small", value: item.stars })))), h("span", { class: "s-reviews-testimonial__icon", innerHTML: IconQuoteOpen }))))))))));
    }
};
SallaReviews.style = sallaReviewsCss;

export { SallaReviews as salla_reviews };
