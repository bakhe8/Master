import OrderFeedbackResponse from "./order-feedback-response";
export declare class SallaRatingModal {
    constructor();
    order: OrderFeedbackResponse | undefined;
    hasError: boolean;
    showContactWidget: boolean;
    errorMessage: string;
    dragAndDropFilesLabel: string;
    contactSubjectLabel: string;
    editReviewLabel: string;
    allowedImagesTypesLabel: string;
    addImagesLabel: string;
    editImagesLabel: string;
    threeImagesMax: string;
    areYouSureLabel: any;
    confirmDeletionLabel: any;
    cancelLabel: any;
    confirmDeleteBtn: any;
    updatedSuccessfullyLabel: any;
    deletedSuccessfullyLabel: any;
    allowAttachImages: any;
    allowContactSupport: any;
    contactUsLabel: any;
    images: String[];
    productImages: object;
    editItemImages: Array<any>;
    contact_body: (store: string, id: number, customer: string) => string;
    editMode: boolean;
    defaultMode: boolean;
    deleteMode: boolean;
    shouldOpenDeleteModal: boolean;
    editType: 'product' | 'store' | 'shipping';
    editFeedbackId: number;
    deleteFeedbackId: number;
    editItem: any;
    private contentRefs;
    private hiddenInputs;
    private isOpen;
    private stepsCount;
    private nextBtn;
    private backBtn;
    private modal;
    private editModal;
    private deleteModal;
    private currentIndex;
    private currentTab;
    private thanksTab;
    private body;
    private thanksTime;
    private steps;
    private dots;
    private submitted;
    /**
     * The order id, to rate on its products & shipping
     */
    orderId: number;
    host: HTMLElement;
    /**
     * Show the rating modal
     */
    open(): Promise<unknown>;
    openEditModal(params: {
        type: 'product' | 'store' | 'shipping';
        feedback_id: number;
    }): Promise<void>;
    fetchEditItem(feedbackId: number): Promise<void>;
    private editReview;
    openDeleteModal(params: any): Promise<unknown>;
    deleteReview(): Promise<void>;
    /**
     * Show the rating modal
     */
    close(): Promise<HTMLElement>;
    private handleWizard;
    private showActiveStep;
    private previousTab;
    private submit;
    private submittedBefore;
    private validate;
    private sendFeedback;
    private showThankYou;
    private getFilepondPlaceholder;
    private onOpen;
    private onClose;
    private toggleUploader;
    private getCustomerName;
    private handleSendEmail;
    private handleSendWhatsApp;
    private resetData;
    private getDeleteModal;
    private getEditModal;
    render(): any;
    componentWillLoad(): void;
    componentDidLoad(): void;
}
