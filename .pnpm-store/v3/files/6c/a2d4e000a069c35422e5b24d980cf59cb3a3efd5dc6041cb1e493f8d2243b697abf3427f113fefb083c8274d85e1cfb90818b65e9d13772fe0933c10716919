/*!
 * Crafted with ❤ by Salla
 */
'use strict';

var index = require('./index-B9asE_s-.js');
var Helper = require('./Helper-C9UmWIYn.js');
var interfaces = require('./interfaces-DZDQwN6-.js');
require('./anime.es-BqW8JHZi.js');

const sallaFiltersWidgetCss = ":host{display:block}";

const SallaFiltersWidget = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.changed = index.createEvent(this, "changed");
        this.initHeight = 195;
        this.isOpen = true;
        this.isShowMore = false;
        this.showMoreLabel = "عرض المزيد";
        this.showLessLabel = "عرض أقل";
        this.page = salla.config.get('page');
    }
    connectedCallback() {
        //lets be smart and don't show 5 and more link for 8 options
        this.withLoadMore = this.option.key != 'price' && Array.isArray(this.option.values) && this.option.values.length > 8;
        salla.onReady(() => {
            this.page = salla.config.get('page');
        });
        salla.lang.onLoaded(() => {
            this.showMoreLabel = salla.lang.getWithDefault('common.titles.more', this.showMoreLabel);
            this.showLessLabel = salla.lang.getWithDefault('common.elements.show_less', this.showLessLabel);
        });
    }
    componentDidLoad() {
        this.widgetValues.scrollHeight < this.initHeight && (this.withLoadMore = false);
        (this.withLoadMore && this.widgetValues) && (this.widgetValues.style.maxHeight = `${this.initHeight}px`);
        this.widgetContent.style.height = `${this.widgetContent.scrollHeight}px`;
    }
    /**
   * Asynchronously sets the height of a widget element to its current height, allowing for smooth transitions.
   * This function is often used in scenarios where the widget's content changes dynamically, and animating
   * the height adjustment is desired for a smoother user experience.
   *
   * @param {number} [delay=250] - Optional. The delay (in milliseconds) before updating the widget height.
   *                               Defaults to 250 milliseconds.
   *
   * @returns {Promise<void>} - A Promise that resolves once the widget height is set after the specified delay.
   *
   * @example
   * // Set widget height with the default delay (250 milliseconds)
   * await setWidgetHeight();
   *
   * // Set widget height with a custom delay (e.g., 500 milliseconds)
   * await setWidgetHeight(500);
   */
    async setWidgetHeight(delay = 250) {
        this.widgetContent.removeAttribute('style');
        setTimeout(() => {
            let currentWidgetHeight = this.widgetContent.scrollHeight;
            this.widgetContent.style.height = currentWidgetHeight + 'px';
        }, delay);
    }
    /**
     * Reset selected filter options.
     */
    async reset() {
        if (this.option.type === interfaces.FilterOptionTypes.RANGE) {
            this.priceRange.reset();
        }
        Array.from(this.host.querySelectorAll('input')).forEach(input => input.checked = false);
    }
    /**
     * Action to show more or less filter options.
     */
    async showMore() {
        this.isShowMore = !this.isShowMore;
        this.widgetContent.style.height = 'auto';
        this.widgetValues.style.maxHeight = this.isShowMore ? `${this.widgetValues.scrollHeight}px` : `${this.initHeight}px`;
        setTimeout(() => {
            this.widgetContent.style.height = `${this.widgetContent.scrollHeight}px`;
        }, 400); // get height after time of collapse animtion (duration-300)
    }
    /**
     * Action to toggle widget open or closed (expand/ collapse).
     */
    async toggleWidget() {
        this.isOpen = !this.isOpen;
        Helper.Helper.toggleElementClassIf(this.widgetContent, 's-filters-widget-opened', 's-filters-widget-closed', () => this.isOpen);
    }
    renderFilterOption(option) {
        if (![interfaces.FilterOptionTypes.VALUES, interfaces.FilterOptionTypes.MINIMUM, interfaces.FilterOptionTypes.VARIANTS].includes(option.type)) {
            return '';
        }
        //@ts-ignore
        return option.values.map((filterOption, index$1) => {
            let value = typeof filterOption == 'number' ? filterOption : (filterOption.key || filterOption.value);
            return index.h("label", { class: "s-filters-label", htmlFor: `${option.key}-option-${value}`, key: `${option.key}-option-${value}` }, index.h("input", { id: `${option.key}-option-${value}`, name: option.key, type: "radio", checked: this.isSelectedOption(option, value), class: `s-filters-radio`, onChange: event => this.changed.emit({ event, option, value }) }), this.getOptionLabel(option, filterOption));
        });
    }
    isSelectedOption(option, value) {
        if (option.type === interfaces.FilterOptionTypes.MINIMUM) {
            return this.filtersData[option.key] == value;
        }
        if (option.type === interfaces.FilterOptionTypes.VARIANTS) {
            return this.filtersData[option.type] && this.filtersData[option.type][Object.keys(this.filtersData[option.type])[0]] == value;
        }
        if (option.type === interfaces.FilterOptionTypes.RANGE) {
            return this.filtersData[option.key] && this.filtersData[option.key].min == value.min && this.filtersData[option.key].max == value.max;
        }
        if (option.type === interfaces.FilterOptionTypes.VALUES) {
            return this.filtersData[option.key] && Number(this.filtersData[option.key]) == Number(value);
        }
        return false;
    }
    getOptionLabel(option, filterOption) {
        if (option.key == 'rating') {
            //in amazon has stars & up, should we add it, to avoid those people who will come to say I selected 4 why I see 5 sars products
            return index.h("salla-rating-stars", { size: "small", value: filterOption });
        }
        let label = filterOption.value || 'null';
        //label+=filterOption.count ? ` (${salla.helpers.number(filterOption.count)})` : '';
        return index.h("span", { class: "s-filters-option-name" }, label);
    }
    render() {
        return (index.h(index.Host, { key: '1987fec03cfe48cddc60af2d81bbc30a476dcb61', class: "s-filters-widget-container" }, index.h("h3", { key: '4232775c4012d1be8bb3036d9d09e5d29d951ee4', class: "s-filters-widget-title", onClick: () => this.toggleWidget() }, index.h("span", { key: '61cf9ea5a69f3ab5377502a396cc84478c6152a1' }, this.option.label), index.h("span", { key: 'b75914eb06f9d419d0a89da2a8f2da2f891f3d27', class: `s-filters-widget-plusminus ${this.isOpen ? 's-filters-widget-plusminus-active' : ''}` })), index.h("div", { key: 'f65e2f8a44648b034dacf1bda1aa64b5398627b7', class: "s-filters-widget-content", ref: (el) => this.widgetContent = el }, index.h("div", { key: 'adcafe169ce8cbef671263f3624bce071b168c36', class: "s-filters-widget-values", ref: (el) => this.widgetValues = el }, index.h("slot", { key: 'fa006556e44e508c3c64cc5ae76cc826b7e7601e' }), this.option.type !== interfaces.FilterOptionTypes.RANGE
            ? this.renderFilterOption(this.option)
            : index.h("salla-price-range", { onChanged: (event) => {
                    this.changed.emit(event.detail);
                }, ref: price => this.priceRange = price, filtersData: this.filtersData, option: this.option })), this.withLoadMore &&
            index.h("a", { key: '16a4ddeb365dc1d52fc51a8999fc6d7dbe094658', class: "s-filters-widget-more", onClick: () => this.showMore() }, !this.isShowMore ? this.showMoreLabel : this.showLessLabel))));
    }
    get host() { return index.getElement(this); }
};
SallaFiltersWidget.style = sallaFiltersWidgetCss;

exports.salla_filters_widget = SallaFiltersWidget;
