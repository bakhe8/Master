/*!
 * Crafted with ‚ù§ by Salla
 */
import { r as registerInstance, h, H as Host, a as getElement, c as createEvent, d as getDefaultExportFromCjs, F as Fragment, j as axios } from './index-CUu-nBEz.js';
import { a as anime } from './anime.es-CgtvEd63.js';
import { A as ArrowDownIcon, S as SpecialDiscountIcon } from './special-discount-yRO-ZESF.js';
import { I as IconVerified } from './check-uTyAzPSy.js';
import { H as Helper } from './Helper-B51hb0bi.js';
import { a as arrowLeft } from './arrow-left-BedNk7k1.js';
import { S as ShoppingBag } from './shopping-bag-DiKTtDW5.js';
import { M as MailIcon } from './mail-DmgxDvXL.js';
import { w as whatsapp$1 } from './whatsapp2-DWksgowB.js';
import { f as facebook, t as twitter } from './twitter-Dz7o69vX.js';
import { G as GiftIcon } from './gift-C0JNGIpa.js';

const sallaAccordionCss = "";

const SallaAccordion = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /** Should the accordion be collapsible or not. Default is true. */
        this.collapsible = true;
        this.bordered = false;
        this.size = "md";
        /** Detect if accordion collapsed or not. */
        this.collapsed = true;
        /** Represents the direction of the layout. */
        this.dir = document.dir || 'rtl';
    }
    directionChangedHandler(event) {
        this.dir = event.detail.dir;
    }
    handleCollapse(event) {
        this.collapsed = event.detail.payload.collapsed;
    }
    setcollapsibleProp() {
        const head = this.host.querySelector('salla-accordion-head');
        if (this.collapsible && head) {
            head.setAttribute('collapsible', 'true');
            head.setAttribute('collapsed', this.collapsed.toString());
        }
    }
    componentDidRender() {
        this.setcollapsibleProp();
        const body = this.host.querySelector('salla-accordion-body');
        if (this.collapsible) {
            this.host.setAttribute('data-collapsed', this.collapsed.toString());
            body?.setAttribute('data-collapsed', this.collapsed.toString());
        }
    }
    render() {
        return (h(Host, { key: 'ed8e4c0f24fa4462654e94fa46706e892c141351', class: `s-accordion-wrapper ${this.dir} ${this.bordered ? 's-accordion-wrapper-bordered' : ''} ${this.size ? `size-${this.size}` : ''}`, "data-collapsed": this.collapsed.toString() }, h("slot", { key: '1dbda01c073f3018a55ebcf5d8613a82a5dc6b27' })));
    }
    get host() { return getElement(this); }
};
SallaAccordion.style = sallaAccordionCss;

const sallaAccordionBodyCss = "";

const SallaAccordionBody = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return (h(Host, { key: '298d42a5bf1bcefdb181ec35060220cf749b56ed', class: "s-accordion-body-wrapper" }, h("slot", { key: '6ab081e8b71b5dc69fb66fbdec82b4725ab53b0d' })));
    }
};
SallaAccordionBody.style = sallaAccordionBodyCss;

var Add = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>add</title>
<path d="M26.667 14.667h-9.333v-9.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333v9.333h-9.333c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333h9.333v9.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-9.333h9.333c0.736 0 1.333-0.597 1.333-1.333s-0.597-1.333-1.333-1.333z"></path>
</svg>
`;

var Minus = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>minus</title>
<path d="M26.667 14.667h-21.333c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333h21.333c0.736 0 1.333-0.597 1.333-1.333s-0.597-1.333-1.333-1.333z"></path>
</svg>
`;

const sallaAccordionHeadCss = "";

const SallaAccordionHead = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.accordionToggle = createEvent(this, "accordionToggle");
        /** Should the accordion be collapsible or not. */
        this.collapsible = false;
        /** Current collapsed state */
        this.collapsed = true;
    }
    emitCollapsePanel() {
        this.accordionToggle.emit({
            payload: {
                collapsed: this.collapsed,
            },
        });
    }
    toggleCollapse() {
        if (!this.collapsible)
            return;
        this.collapsed = !this.collapsed;
        this.host.parentElement?.setAttribute('data-collapsed', this.collapsed.toString());
        this.host.parentElement
            ?.querySelector('salla-accordion-body')
            ?.setAttribute('data-collapsed', this.collapsed.toString());
        this.emitCollapsePanel();
    }
    render() {
        return (h(Host, { key: '9d88d243306cdf451c20d7068fbb9f48807b22e9', "data-collapsed": this.collapsed.toString(), onClick: () => this.toggleCollapse(), class: "s-accordion-head-wrapper" }, h("div", { key: 'bad4c5a913ce1c4581b09c0b6d96fcbdb4236638', class: "s-accordion-head-wrapper-start" }, h("slot", { key: 'acb83cec8cbca5771a9f84e81c0b955c3edad731', name: "title" }), h("slot", { key: 'a4ad42ea6fad4f452c4c218a9ee02dca0adb4a67', name: "progress" }), h("slot", { key: '96ab95d413dc906ac299079f4008816f01881990', name: "html" })), (this.collapsible || this.host.querySelector('[slot="note"]')) && (h("div", { key: '8f9666a5038cd7b1ac6e357c6920ea26d31c5f03', class: "s-accordion-head-wrapper-end" }, h("slot", { key: '14895e8c1385e91c14f046c9ae38ce5e4a4c9a60', name: "note" }), this.collapsible && (h("button", { key: '97dc7fabbb207fcc8b68ebf0a86f6c8a980dca13', class: {
                's-accordion-head-wrapper-toggle': true,
                active: !this.collapsed,
            }, onClick: e => {
                e.stopPropagation();
                this.toggleCollapse();
            } }, h("span", { key: '3b24faf71dcd332663a354310b2ce09f7879eddc', class: "s-accordion-head-wrapper-toggle-icon", innerHTML: this.collapsed ? Add : Minus })))))));
    }
    get host() { return getElement(this); }
};
SallaAccordionHead.style = sallaAccordionHeadCss;

var PendingOrdersIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="30" height="32" viewBox="0 0 30 32">
<title>cart</title>
<path d="M15.426 28.084c0-1.412-0.85-2.684-2.156-3.226-1.305-0.54-2.807-0.241-3.805 0.758-0.999 0.998-1.298 2.5-0.758 3.805 0.54 1.303 1.815 2.155 3.226 2.155 1.928-0.003 3.49-1.564 3.492-3.492h0.001zM10.597 28.084h0.001c0-0.54 0.326-1.027 0.825-1.235 0.498-0.206 1.074-0.091 1.455 0.29 0.383 0.382 0.497 0.957 0.29 1.456-0.208 0.5-0.695 0.825-1.235 0.825-0.355 0-0.695-0.142-0.944-0.391-0.251-0.251-0.392-0.591-0.392-0.946h-0.001l0.001 0.001zM28.23 28.084c0-1.412-0.85-2.684-2.155-3.226-1.305-0.54-2.807-0.241-3.806 0.758s-1.297 2.5-0.756 3.805c0.54 1.303 1.813 2.155 3.226 2.155 1.927-0.003 3.49-1.564 3.491-3.492zM23.401 28.084c0-0.54 0.326-1.027 0.825-1.235 0.5-0.206 1.075-0.091 1.457 0.29s0.497 0.957 0.289 1.456c-0.206 0.5-0.693 0.825-1.233 0.825-0.738 0-1.337-0.599-1.337-1.337l-0.001 0.001zM1.953 0.234l-0.342-0.059c-0.29-0.064-0.594-0.004-0.839 0.166-0.247 0.169-0.414 0.436-0.463 0.734-0.050 0.3 0.023 0.607 0.201 0.85s0.444 0.402 0.738 0.44l0.341 0.059c1.825 0.324 3.248 1.794 3.548 3.662l1.981 12.369h-0.001c0.218 1.387 0.913 2.651 1.96 3.563s2.379 1.412 3.754 1.41h14.242c0.601 0 1.088-0.498 1.088-1.112s-0.487-1.112-1.088-1.112h-14.242c-1.679-0.001-3.139-1.183-3.525-2.854h11.463c1.614 0.004 3.188-0.518 4.493-1.49 1.305-0.973 2.271-2.346 2.762-3.918l1.298-4.136c0.145-0.455 0.065-0.953-0.213-1.336-0.278-0.385-0.72-0.608-1.187-0.602h-20.467l-0.181-1.141c-0.218-1.367-0.849-2.631-1.802-3.615-0.954-0.983-2.184-1.64-3.518-1.878h-0.001zM26.946 9.096l-0.993 3.169v-0.001c-0.353 1.122-1.044 2.101-1.975 2.796s-2.056 1.067-3.208 1.067h-11.833l-1.125-7.042 19.134 0.011z"></path>
</svg>
`;

var WalletIcon$1 = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>full-wallet</title>
<path d="M29 12h-26c-0.668-0.008-1.284-0.226-1.787-0.59l0.009 0.006c-0.744-0.552-1.222-1.428-1.222-2.416 0-1.657 1.343-3 2.999-3h6c0.552 0 1 0.448 1 1s-0.448 1-1 1v0h-6c-0.552 0-1 0.448-1 1 0 0.326 0.156 0.616 0.397 0.798l0.002 0.002c0.167 0.12 0.374 0.194 0.599 0.2l0.001 0h26c0.552 0 1 0.448 1 1s-0.448 1-1 1v0zM27 12c-0.552 0-1-0.448-1-1v0-3h-3c-0.552 0-1-0.448-1-1s0.448-1 1-1v0h4c0.552 0 1 0.448 1 1v0 4c0 0.552-0.448 1-1 1v0zM29 30h-26c-1.657 0-3-1.343-3-3v0-18c0-0.552 0.448-1 1-1s1 0.448 1 1v0 18c0 0.552 0.448 1 1 1v0h25v-5c0-0.552 0.448-1 1-1s1 0.448 1 1v0 6c0 0.552-0.448 1-1 1v0zM29 18c-0.552 0-1-0.448-1-1v0-6c0-0.552 0.448-1 1-1s1 0.448 1 1v0 6c0 0.552-0.448 1-1 1v0zM31 24h-7c-2.209 0-4-1.791-4-4s1.791-4 4-4v0h7c0.552 0 1 0.448 1 1v0 6c0 0.552-0.448 1-1 1v0zM24 18c-1.105 0-2 0.895-2 2s0.895 2 2 2v0h6v-4zM25 12c-0.001 0-0.001 0-0.002 0-0.389 0-0.726-0.222-0.891-0.546l-0.003-0.006-3.552-7.106-2.306 1.152c-0.13 0.066-0.284 0.105-0.447 0.105-0.552 0-1-0.448-1-1 0-0.39 0.223-0.727 0.548-0.892l0.006-0.003 3.2-1.6c0.13-0.067 0.284-0.106 0.447-0.106 0.39 0 0.727 0.223 0.892 0.548l0.003 0.006 4 8c0.067 0.13 0.106 0.285 0.106 0.448 0 0.552-0.448 1-1 1v0zM21 12c-0.001 0-0.001 0-0.002 0-0.389 0-0.726-0.222-0.891-0.546l-0.003-0.006-3.552-7.106-15.104 7.552c-0.13 0.066-0.284 0.105-0.447 0.105-0.552 0-1-0.448-1-1 0-0.39 0.223-0.727 0.548-0.892l0.006-0.003 16-8c0.13-0.067 0.284-0.106 0.447-0.106 0.39 0 0.727 0.223 0.892 0.548l0.003 0.006 4 8c0.067 0.13 0.106 0.285 0.106 0.448 0 0.552-0.448 1-1 1-0.001 0-0.001 0-0.002 0h0z"></path>
</svg>
`;

const sallaAddProductButtonCss = ":host{display:block}salla-add-product-button[width=wide]{width:100%}";

const SallaAddProductButton = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.success = createEvent(this, "success");
        this.failed = createEvent(this, "failed");
        this.hostAttributes = {};
        /**
         * Has Pre Order
         */
        this.hasPreOrder = false;
        /**
         *  Product Status.Defaults to `sale`
         */
        this.productStatus = 'sale';
        /**
         * Product type. Defaults to `product`
         */
        this.productType = 'product';
        this.selectedOptions = [];
        this.buyNowText = salla.lang.get('pages.products.buy_now');
        salla.lang.onLoaded(() => {
            this.buyNowText = salla.lang.get('pages.products.buy_now');
        });
    }
    getLabel() {
        if (this.productStatus === 'sale' && this.supportStickyBar && window.innerWidth <= 768 && this.showQuickBuy && this.isApplePayActive) {
            return PendingOrdersIcon;
        }
        if (this.hasPreOrder) {
            return salla.lang.get('pages.products.pre_order_now');
        }
        if (this.productStatus === 'sale' && this.productType === 'booking') {
            return salla.lang.get('pages.cart.book_now');
        }
        if (this.productStatus === 'sale') {
            return salla.lang.get('pages.cart.add_to_cart');
        }
        if (this.productType !== 'donating') {
            return salla.lang.get('pages.products.out_of_stock');
        }
        // donating
        return salla.lang.get('pages.products.donation_exceed');
    }
    addProductToCart(event) {
        if (this.productType === 'booking') {
            event.preventDefault();
            return this.addBookingProduct();
        }
        // we want to ignore the click action when the type of button is submit a form
        if (this.hostAttributes.type === 'submit') {
            return false;
        }
        event.preventDefault();
        this.btn?.disable();
        // Validate product options explicitly on Add to Cart click
        const optionsEl = document.querySelector(`salla-product-options[product-id="${this.productId}"]`);
        if (optionsEl && typeof optionsEl.validateAndScroll === 'function') {
            return optionsEl.validateAndScroll()
                .then(async (isValid) => {
                // Call validate hook
                const ctx = { isValid, component: this };
                await salla.hooks.call('salla-add-product-button', 'validate', ctx);
                if (!ctx.isValid) {
                    this.btn?.enable();
                    return;
                }
                return this._proceedAddToCart();
            })
                .catch(() => {
                this.btn?.enable();
            });
        }
        // Fallback if options component not found
        return this._proceedAddToCart();
    }
    async _proceedAddToCart() {
        /**
         * by default the quick add is just an alias for add item function
         * but its work only when the id is the only value is passed via the object
         * so we will filter the object entities to remove null and zero values in case we don't want the normal add item action
         */
        const data = Object.entries({
            id: this.productId,
            donation_amount: this.donatingAmount,
            quantity: this.quantity,
            endpoint: 'quickAdd'
        }).reduce((a, [k, v]) => (v ? (a[k] = v, a) : a), {});
        // Use the potentially modified data
        return salla.cart.addItem(data)
            .then(async (response) => {
            this.selectedOptions = [];
            this.btn?.enable();
            this.success.emit(response);
            return response;
        })
            .catch(error => { this.failed.emit(error); this.btn?.enable(); });
    }
    addBookingProduct() {
        if (salla.config.isGuest()) {
            salla.auth.api.setAfterLoginEvent('booking::add', this.productId);
            salla.event.dispatch('login::open');
            return;
        }
        return salla.booking.add(this.productId)
            .then(resp => this.success.emit(resp))
            .catch(error => this.failed.emit(error));
    }
    getBtnAttributes() {
        for (let i = 0; i < this.host.attributes.length; i++) {
            if (!['id', 'class'].includes(this.host.attributes[i].name)) {
                this.hostAttributes[this.host.attributes[i].name] = this.host.attributes[i].value;
            }
        }
        return this.hostAttributes;
    }
    getQuickBuyBtnAttributes() {
        return {
            ...this.getBtnAttributes(),
            type: this.supportStickyBar && window.innerWidth <= 768 ? 'plain' : this.productType == 'donating' ? 'donate' : 'buy'
        };
    }
    miniCheckoutWidget() {
        let storeId = salla.config.get('store.id');
        if (!storeId) {
            return;
        }
        return h("salla-mini-checkout-widget", { language: salla.lang.locale, "store-id": storeId, config: { user: salla.config.get('user'), failure_url: window.location.href }, products: [this.productId], api: salla.config.get('store.api'), outline: true, "form-selector": "form.product-form", class: "s-add-product-button-mini-checkout" }, h("div", { slot: "widget-label", class: "s-add-product-button-mini-checkout-content" }, h("span", { innerHTML: WalletIcon$1 }), this.buyNowText));
    }
    componentWillLoad() {
        return salla.onReady()
            .then(() => {
            // this to fix not added hydrated class to html element after components loaded
            document.documentElement.classList.add('hydrated');
            this.showQuickBuy = this.quickBuy
                && salla.config.get('store.settings.buy_now')
                && this.productStatus == 'sale'
                && this.productType !== 'booking';
            this.isApplePayActive = window.ApplePaySession?.canMakePayments()
                && salla.config.get('store.settings.payments')?.includes('apple_pay')
                && salla.config.get('store.settings.is_salla_gateway', false);
            this.passedLabel = this.host.innerHTML.replace('<!---->', '').trim();
            if (!!this.passedLabel && window.innerWidth >= 768) {
                return this.btn?.setText(this.passedLabel);
            }
            if (this.host.getAttribute('type') === 'submit' && this.supportStickyBar) {
                window.addEventListener('resize', () => this.btn?.setText((window.innerWidth >= 768 && !!this.passedLabel) ? this.passedLabel : this.getLabel()));
            }
        });
    }
    render() {
        //TODO:: find a better fix, this is a patch for issue that duplicates the buttons more than twice @see the screenshot inside this folder
        if (this.host.closest('.swiper-slide')?.classList.contains('swiper-slide-duplicate')) {
            return '';
        }
        if (this.hasSubscribedOptions) {
            return h(Host, null, h("salla-product-availability", { ...this.getBtnAttributes(), "is-subscribed": true }, h("span", { class: "s-hidden" }, h("slot", null))));
        }
        if ((this.productStatus === 'out-and-notify' && this.channels) || this.hasOutOfStockOption) {
            return h(Host, null, h("salla-product-availability", { ...this.getBtnAttributes() }, h("span", { class: "s-hidden" }, h("slot", null))));
        }
        return h(Host, { class: {
                's-add-product-button-with-quick-buy': this.showQuickBuy,
                's-add-product-button-with-sticky-bar': this.supportStickyBar,
                's-add-product-button-with-apple-pay': this.showQuickBuy && this.isApplePayActive
            } }, h("div", { class: {
                's-add-product-button-main': this.showQuickBuy,
                'w-full': !document.getElementById('fast-checkout-js') || ['financial_support', 'donating'].includes(this.productType) // This is a temporary fix until all themes fully support the fast checkout -- To be removed later
            } }, h("salla-button", { color: this.productStatus === 'sale' ? 'primary' : 'light', type: "button", fill: this.productStatus === 'sale' ? 'solid' : 'outline', ref: el => this.btn = el, onClick: event => this.addProductToCart(event), disabled: this.productStatus !== 'sale', ...this.getBtnAttributes(), "loader-position": "center" }, h("slot", null)), this.showQuickBuy && !!document.getElementById('fast-checkout-js') && !['financial_support', 'donating'].includes(this.productType) ? this.miniCheckoutWidget() : ''), this.showQuickBuy && this.isApplePayActive ? h("salla-quick-buy", { ...this.getQuickBuyBtnAttributes() }) : '');
    }
    async componentDidLoad() {
        // Register this component for hooks system, already on it logic to run componentDidLoad trigger
        await Salla.hooks.registerComponent('salla-add-product-button', this);
        if (!this.notifyOptionsAvailability) {
            return;
        }
        salla.event.on('product-options::change', async (data) => {
            if (!['thumbnail', 'color', 'single-option'].includes(data.option.type)) {
                return;
            }
            this.hasSubscribedOptions = false;
            this.selectedOptions = await document.querySelector(`salla-product-options[product-id="${this.productId}"]`)?.getSelectedOptions();
            this.hasOutOfStockOption = await document.querySelector(`salla-product-options[product-id="${this.productId}"]`)?.hasOutOfStockOption();
            let subscribedDetails = salla.storage.get(`product-${this.productId}-subscribed-options`);
            if (!subscribedDetails && !this.subscribedOptions || !this.hasOutOfStockOption) {
                return;
            }
            if (salla.config.isGuest()) {
                const parsedSubscribedDetails = subscribedDetails ? subscribedDetails.map(ids => ids.split(',').map(id => parseInt(id))) : [];
                this.hasSubscribedOptions = parsedSubscribedDetails.length > 0 && parsedSubscribedDetails.some(ids => ids.every(id => this.selectedOptions.some(option => option.id === id)));
            }
            else {
                this.hasSubscribedOptions = this.subscribedOptions && this.subscribedOptions !== 'null' && this.subscribedOptions !== '[]' ? JSON.parse(this.subscribedOptions).some(ids => ids.every(id => this.selectedOptions.some(option => option.id === id))) : false;
            }
        });
    }
    componentDidRender() {
        //if label not passed, get label
        if (!!this.passedLabel && (!this.supportStickyBar || window.innerWidth >= 768)) {
            // if passed label, set it
            this.btn?.setText(this.passedLabel);
            return;
        }
        this.btn?.setText(this.getLabel());
        salla.lang.onLoaded(() => this.btn?.setText(this.getLabel()));
    }
    get host() { return getElement(this); }
};
SallaAddProductButton.style = sallaAddProductButtonCss;

var informationIcon = `<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.99935 18.3332C5.39697 18.3332 1.66602 14.6022 1.66602 9.99984C1.66602 5.39746 5.39697 1.6665 9.99935 1.6665C14.6017 1.6665 18.3327 5.39746 18.3327 9.99984C18.3327 14.6022 14.6017 18.3332 9.99935 18.3332ZM9.99935 16.6665C13.6813 16.6665 16.666 13.6818 16.666 9.99984C16.666 6.31794 13.6813 3.33317 9.99935 3.33317C6.31745 3.33317 3.33268 6.31794 3.33268 9.99984C3.33268 13.6818 6.31745 16.6665 9.99935 16.6665ZM9.16602 5.83317H10.8327V7.49984H9.16602V5.83317ZM9.16602 9.1665H10.8327V14.1665H9.16602V9.1665Z" fill="#417AC8"/>
</svg>
`;

const sallaAlertCss = ":host{display:block}";

const SallaAlert = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /** Variant theme */
        this.variant = 'info';
    }
    renderIcon() {
        const type = this.icon || this.variant;
        if (type === 'none')
            return null;
        switch (type) {
            case 'success':
                return (h("svg", { viewBox: "0 0 24 24", width: "20", height: "20", fill: "currentColor" }, h("path", { d: "M9 16.2l-3.5-3.5L4 14.2l5 5 11-11-1.5-1.5z" })));
            case 'warning':
                return (h("svg", { viewBox: "0 0 24 24", width: "20", height: "20", fill: "currentColor" }, h("path", { d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z" })));
            case 'error':
                return (h("svg", { viewBox: "0 0 24 24", width: "20", height: "20", fill: "currentColor" }, h("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 \n                     10 10 10-4.48 10-10S17.52 2 12 2zm5 \n                     13.59L15.59 17 12 13.41 8.41 17 \n                     7 15.59 10.59 12 7 8.41 8.41 7 \n                     12 10.59 15.59 7 17 8.41 13.41 \n                     12 17 15.59z" })));
            default:
                return h("span", { innerHTML: informationIcon });
        }
    }
    render() {
        return (h(Host, { key: '3b5dd808399eeda5d930454542cd41cca26b0cc3', class: `s-alert-wrapper s-alert-${this.variant}` }, h("span", { key: '4f58234774d1afc790fb83bff983ca9366faa349', class: "s-alert-icon" }, this.renderIcon()), h("span", { key: '10eb3f87e6e77dcc5406a24f866feee1cc1f46ef', class: "s-alert-text" }, this.message, h("slot", { key: '3656e15aeb25fb7285e88f694c090bad3b32dfbd' }))));
    }
};
SallaAlert.style = sallaAlertCss;

var BookingTime = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>calendar-time</title>
<path d="M22.667 17.333c-0.737 0-1.333 0.596-1.333 1.333v2.667h-2.667c-0.737 0-1.333 0.596-1.333 1.333s0.596 1.333 1.333 1.333h4c0.737 0 1.333-0.596 1.333-1.333v-4c0-0.737-0.596-1.333-1.333-1.333zM28 2.667h-2.667v-1.333c0-0.736-0.596-1.333-1.333-1.333s-1.333 0.597-1.333 1.333v1.333h-13.333v-1.333c0-0.736-0.596-1.333-1.333-1.333s-1.333 0.597-1.333 1.333v1.333h-2.667c-2.205 0-4 1.795-4 4v21.333c0 2.205 1.795 4 4 4h5.363c0.737 0 1.333-0.596 1.333-1.333s-0.596-1.333-1.333-1.333h-5.363c-0.736 0-1.333-0.597-1.333-1.333v-21.333c0-0.736 0.597-1.333 1.333-1.333h2.667v2.667c0 0.736 0.596 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-2.667h13.333v2.667c0 0.736 0.596 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-2.667h2.667c0.736 0 1.333 0.599 1.333 1.333v2.696c0 0.736 0.596 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-2.696c0-2.205-1.795-4-4-4zM22 12c-5.515 0-10 4.485-10 10s4.485 10 10 10 10-4.485 10-10-4.485-10-10-10zM22 29.333c-4.043 0-7.333-3.291-7.333-7.333s3.291-7.333 7.333-7.333 7.333 3.291 7.333 7.333-3.291 7.333-7.333 7.333z"></path>
</svg>
`;

var Calendar = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>calendar</title>
<path d="M28 2.667h-2.667v-1.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333v1.333h-13.333v-1.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333v1.333h-2.667c-2.205 0-4 1.795-4 4v21.333c0 2.205 1.795 4 4 4h24c2.205 0 4-1.795 4-4v-21.333c0-2.205-1.795-4-4-4zM29.333 28c0 0.736-0.599 1.333-1.333 1.333h-24c-0.736 0-1.333-0.599-1.333-1.333v-13.333h26.667zM29.333 12h-26.667v-5.333c0-0.736 0.599-1.333 1.333-1.333h2.667v2.667c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-2.667h13.333v2.667c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-2.667h2.667c0.736 0 1.333 0.599 1.333 1.333z"></path>
</svg>
`;

var TimeIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>time</title>
<path d="M16 0c-8.823 0-16 7.177-16 16s7.177 16 16 16 16-7.177 16-16-7.177-16-16-16zM16 29.333c-7.352 0-13.333-5.981-13.333-13.333s5.981-13.333 13.333-13.333 13.333 5.981 13.333 13.333-5.981 13.333-13.333 13.333zM16 8c-0.736 0-1.333 0.596-1.333 1.333v6.667h-4c-0.736 0-1.333 0.596-1.333 1.333s0.597 1.333 1.333 1.333h5.333c0.736 0 1.333-0.596 1.333-1.333v-8c0-0.737-0.597-1.333-1.333-1.333z"></path>
</svg>
`;

const sallaBookingFieldCss = ":host{display:block}";

const SallaBookingField = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.invalidInput = createEvent(this, "invalidInput");
        this.bookNowLabel = salla.lang.get('pages.cart.book_an_appointment', 'ÿ≠ÿ¨ÿ≤ ŸÖŸàÿπÿØ');
        this.editLabel = salla.lang.get('pages.cart.edit_an_appointment', 'ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÖŸàÿπÿØ');
        this.bookedLabel = salla.lang.get('pages.cart.booked_successfully', 'ÿ™ŸÖÿ™ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸàÿπÿØ ÿ®ŸÜÿ¨ÿßÿ≠');
        this.selectDate = salla.lang.get('pages.cart.select_appointment_date', 'ÿ≠ÿØÿØ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÖŸàÿπÿØ');
        this.bookingUrl = '';
        this.iframeReady = false;
        this.reservations = [];
        // Load translations
        salla.lang.onLoaded(() => this.setTranslations());
        // Register event listeners
        Salla.event.on('booking::open', (data) => this.handleBookingOpen(data));
    }
    async setTranslations() {
        const setNestedAsync = (lang, key, value) => {
            return new Promise((resolve) => {
                salla.helpers.setNested(salla.lang.messages[lang], key, value);
                resolve(true);
            });
        };
        await setNestedAsync('ar.trans', 'pages.cart.book_an_appointment', 'ÿ≠ÿ¨ÿ≤ ŸÖŸàÿπÿØ');
        await setNestedAsync('en.trans', 'pages.cart.book_an_appointment', 'Book an Appointment');
        await setNestedAsync('ar.trans', 'pages.cart.edit_an_appointment', 'ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÖŸàÿπÿØ');
        await setNestedAsync('en.trans', 'pages.cart.edit_an_appointment', 'Edit an Appointment');
        await setNestedAsync('ar.trans', 'pages.cart.booked_successfully', 'ÿ™ŸÖÿ™ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸàÿπÿØ ÿ®ŸÜÿ¨ÿßÿ≠');
        await setNestedAsync('en.trans', 'pages.cart.booked_successfully', 'Booked Successfully');
        await setNestedAsync('ar.trans', 'pages.cart.select_appointment_date', 'ÿ≠ÿØÿØ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÖŸàÿπÿØ');
        await setNestedAsync('en.trans', 'pages.cart.select_appointment_date', 'Select appointment date');
        this.bookNowLabel = salla.lang.get('pages.cart.book_an_appointment');
        this.editLabel = salla.lang.get('pages.cart.edit_an_appointment');
        this.bookedLabel = salla.lang.get('pages.cart.booked_successfully');
        this.selectDate = salla.lang.get('pages.cart.select_appointment_date');
    }
    openBookingModal(event, afterReload = false) {
        if (afterReload && (!event.detail || typeof event.detail !== 'number' || event.detail !== this.productId)) {
            return;
        }
        if (salla.config.isGuest()) {
            this.setAfterReloadEvent('booking::open-after-reload', this.productId);
            salla.event.dispatch('login::open');
            return;
        }
        salla.booking.add(this.productId, false)
            .then((resp) => {
            if (resp.data.redirect.to !== 'booking') {
                throw new Error('Unexpected redirect!');
            }
            salla.event.dispatch('booking::open', { url: resp.data.redirect.url, id: this.productId });
        })
            .catch((error) => {
            salla.error(salla.lang.get('common.errors.error_occurred'));
            salla.logger.error(error.response || error);
        });
    }
    handleBookingOpen(data) {
        if (data.id !== this.productId)
            return;
        this.bookingUrl = salla.url.addParamToUrl('product_id', data.id, data.url);
        this.iframeReady = true;
        setTimeout(() => {
            this.modal.setTitle(this.selectDate);
            this.modal.open();
        }, 100);
    }
    setAfterReloadEvent(event, payload) {
        salla.storage.set('afterReloadEvent', { event, payload });
    }
    emitAfterReloadEvent() {
        const eventDetails = salla.storage.get('afterReloadEvent');
        if (eventDetails && eventDetails.event) {
            const customEvent = new CustomEvent(eventDetails.event, {
                detail: eventDetails.payload
            });
            window.dispatchEvent(customEvent);
            salla.storage.remove('afterReloadEvent');
        }
    }
    componentWillLoad() {
        if (this.option && this.option.details.length) {
            this.reservations = this.option.details;
        }
    }
    componentDidLoad() {
        window.addEventListener('booking::open-after-reload', (event) => this.openBookingModal(event, true));
        this.emitAfterReloadEvent();
        window.addEventListener('message', this.handleMessageEvent.bind(this));
        this.reservationsInput.addEventListener('invalid', e => this.invalidInput.emit(e));
        this.reservationsInput.addEventListener('input', () => {
            this.reservationsInput.setCustomValidity('');
            this.reservationsInput.reportValidity();
        });
    }
    handleMessageEvent(event) {
        if (event.data.source !== 'booking')
            return;
        const action = event.data.type;
        const value = event.data.message;
        if (localStorage.getItem('debug'))
            console.log(`Received an action:${action}`, event.data);
        if (action === 'error') {
            if (value.fields?.reservation) {
                salla.notify.error(value.fields.reservation[0]);
                return;
            }
            const errorList = Object.values(value.fields || [value.message]).flat().map(error => `<li>${error}</li>`).join('');
            salla.notify.error(`<ul>${errorList}</ul>`);
        }
        if (action === 'success') {
            if (Number(value.productId) !== Number(this.productId))
                return;
            this.reservations = value.data.reservations.map(schedule => {
                if (schedule.time && schedule.time.length > 0) {
                    const timeSlot = schedule.time[0];
                    return {
                        date: schedule.date,
                        day: schedule.day,
                        from_timestamp: timeSlot.from,
                        to_timestamp: timeSlot.to,
                    };
                }
                return null;
            }).filter(item => item !== null);
            salla.notify.success(this.bookedLabel);
            this.modal?.close();
            setTimeout(() => window.location.reload());
        }
        if (action === 'height') {
            this.iframe.height = value?.height + 'px';
        }
    }
    bookingModal() {
        return (h("salla-modal", { class: "s-booking-field-modal", ref: modal => (this.modal = modal), width: "md", position: "middle", noPadding: true }, h("iframe", { ref: iframe => (this.iframe = iframe), src: this.bookingUrl, frameborder: "0" })));
    }
    renderReservationDate(reservation) {
        return (h("span", { class: reservation.from_timestamp ? 's-booking-field-reservations-has-time' : '' }, h("i", { class: "s-booking-field-reservations-icon", innerHTML: Calendar }), reservation.date));
    }
    renderReservationTime(reservation) {
        if (!reservation.from_timestamp)
            return '';
        return (h("span", { class: "s-booking-field-reservations-time" }, h("i", { class: "s-booking-field-reservations-icon", innerHTML: TimeIcon }), h("span", null, reservation.from_timestamp, " - ", reservation.to_timestamp)));
    }
    render() {
        return (h(Host, { key: '04c9e3dc3dc825bd6905221d858c260f7ca34748' }, h("div", { key: '07ec38cec1bd1798640dd7ea9592bb3b17d945c6', class: "s-booking-field-main" }, this.option.required || this.reservations.length > 0 ? h("div", { class: "s-booking-field-price" }, h("span", { innerHTML: salla.money(this.option.price) })) : '', h("salla-button", { key: '6b71889cfc0429d15c466a6f194df31549f09786', class: "s-booking-field-book-now", size: "small", loaderPosition: "center", fill: "outline", onClick: event => this.openBookingModal(event, false) }, h("span", { key: 'a16f8db6f52c7751ea605efcae04057ca0dc5b61', class: "s-booking-field-book-now-content" }, h("span", { key: '95f6086a599bcc620c87ece6c6ae9620dba15581', innerHTML: BookingTime }), this.reservations.length ? this.editLabel : this.bookNowLabel))), this.reservations.length > 0 && (h("div", { key: 'b3615100bbfff3d98d0ac99145aaf53449790c94', class: "s-booking-field-reservations" }, this.reservations.map((reservation, index) => (h("div", { key: index, class: "s-booking-field-reservations-item" }, this.renderReservationDate(reservation), this.renderReservationTime(reservation)))))), h("input", { key: '126f14f2e520b8696bc7450e209bad30b267878b', class: "s-hidden", name: this.option.name, required: this.option.required, value: JSON.stringify(this.reservations) === '[]' ? '' : JSON.stringify(this.reservations), ref: reservations => this.reservationsInput = reservations }), this.iframeReady && this.bookingModal()));
    }
    get host() { return getElement(this); }
};
SallaBookingField.style = sallaBookingFieldCss;

var infoIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>info</title>
<path d="M16 13.333c-0.737 0-1.333 0.596-1.333 1.333v9.333c0 0.737 0.596 1.333 1.333 1.333s1.333-0.596 1.333-1.333v-9.333c0-0.737-0.596-1.333-1.333-1.333zM16 7.987c-0.737 0-1.333 0.596-1.333 1.333v0.013c0 0.737 0.596 1.327 1.333 1.327s1.333-0.603 1.333-1.34-0.596-1.333-1.333-1.333zM16 0c-8.823 0-16 7.177-16 16s7.177 16 16 16 16-7.177 16-16-7.177-16-16-16zM16 29.333c-7.352 0-13.333-5.981-13.333-13.333s5.981-13.333 13.333-13.333 13.333 5.981 13.333 13.333-5.981 13.333-13.333 13.333z"></path>
</svg>
`;

var ImageIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>image</title>
<path d="M21.333 6.667c-2.205 0-4 1.795-4 4s1.795 4 4 4 4-1.795 4-4-1.795-4-4-4zM21.333 12c-0.736 0-1.333-0.599-1.333-1.333s0.597-1.333 1.333-1.333 1.333 0.599 1.333 1.333-0.597 1.333-1.333 1.333zM24 1.333h-16c-3.676 0-6.667 2.991-6.667 6.667v16c0 0.969 0.219 1.884 0.592 2.715 0.013 0.024 0.025 0.048 0.039 0.072 1.059 2.284 3.359 3.88 6.036 3.88h16c3.676 0 6.667-2.991 6.667-6.667v-16c0-3.676-2.991-6.667-6.667-6.667zM8 28c-1.376 0-2.592-0.699-3.312-1.76l7.312-9.401 8.681 11.161zM28 24c0 2.187-1.765 3.964-3.945 3.995l-11.003-14.147c-0.505-0.649-1.599-0.649-2.104 0l-6.948 8.933v-14.781c0-2.205 1.795-4 4-4h16c2.205 0 4 1.795 4 4z"></path>
</svg>
`;

var moneyIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>money-card</title>
<path d="M17.333 14.667h-2.667c-0.736 0-1.333-0.599-1.333-1.333s0.597-1.333 1.333-1.333h4c0.737 0 1.333-0.597 1.333-1.333s-0.596-1.333-1.333-1.333h-1.333v-1.333c0-0.736-0.596-1.333-1.333-1.333s-1.333 0.597-1.333 1.333v1.333c-2.205 0-4 1.795-4 4s1.795 4 4 4h2.667c0.736 0 1.333 0.597 1.333 1.333s-0.597 1.333-1.333 1.333h-4c-0.737 0-1.333 0.596-1.333 1.333s0.596 1.333 1.333 1.333h1.333v1.333c0 0.737 0.596 1.333 1.333 1.333s1.333-0.596 1.333-1.333v-1.333c2.205 0 4-1.795 4-4s-1.795-4-4-4zM28 2.667h-24c-2.205 0-4 1.795-4 4v18.667c0 2.205 1.795 4 4 4h24c2.205 0 4-1.795 4-4v-18.667c0-2.205-1.795-4-4-4zM29.333 25.333c0 0.736-0.597 1.333-1.333 1.333h-24c-0.736 0-1.333-0.597-1.333-1.333v-18.667c0-0.735 0.597-1.333 1.333-1.333h24c0.736 0 1.333 0.599 1.333 1.333z"></path>
</svg>
`;

var checkCircleIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>check-circle</title>
<path d="M19.557 11.26l-4.593 6.891-2.891-1.927c-0.616-0.411-1.441-0.243-1.849 0.369-0.409 0.612-0.244 1.441 0.369 1.849l4 2.667c0.228 0.152 0.485 0.224 0.739 0.224 0.431 0 0.855-0.208 1.111-0.593l5.333-8c0.409-0.612 0.244-1.441-0.369-1.849-0.616-0.411-1.443-0.243-1.849 0.369zM16 0c-8.823 0-16 7.177-16 16s7.177 16 16 16 16-7.177 16-16-7.177-16-16-16zM16 29.333c-7.352 0-13.333-5.981-13.333-13.333s5.981-13.333 13.333-13.333 13.333 5.981 13.333 13.333-5.981 13.333-13.333 13.333z"></path>
</svg>
`;

const sallaBottomAlertCss = ":host{display:block}";

const SallaBottomAlert = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.storeId = salla.config.get('store.id');
        this.template = salla.config.get('store.template');
        this.loading = false;
        this.templateData = {};
        this.defaultMessage = salla.lang.getWithDefault('common.elements.store_is_available_for_purchase', 'Ÿáÿ∞ÿß ÿßŸÑŸÖÿ™ÿ¨ÿ± ŸÖÿ™ÿßÿ≠ ŸÑŸÑÿ¥ÿ±ÿßÿ° ŸÖŸÜ');
        this.defaultActionLabel = salla.lang.get('common.elements.know_more');
        this.storeFeatures = salla.lang.get('common.elements.store_features');
        this.storeDetails = salla.lang.get('common.elements.store_details');
        this.storePrice = salla.lang.getWithDefault('common.elements.store_price', 'ÿ≥ÿπÿ± ÿßŸÑŸÖÿ™ÿ¨ÿ±');
        this.storePriceDetails = salla.lang.getWithDefault('common.elements.store_price_details', 'ÿßŸÑÿ≥ÿπÿ± Ÿäÿ¥ŸÖŸÑ');
        this.theDeveloper = salla.lang.get('common.elements.the_developer');
        this.templateInformation = salla.lang.get('common.elements.template_information');
        this.buyTheTemplate = salla.lang.get('common.elements.buy_the_template');
        this.isRtl = salla.config.get('theme.is_rtl', true);
        this.storeName = salla.config.get('store.name');
        this.salla = salla.lang.getWithDefault('common.elements.salla', 'ÿ≥ŸÑÿ©');
        /**
         * Alert Type
         * */
        this.type = 'popup';
        salla.lang.onLoaded(() => {
            this.defaultMessage = salla.lang.get('common.elements.experimental_and_available_store');
            this.defaultActionLabel = salla.lang.get('common.elements.know_more');
            this.storeFeatures = salla.lang.get('common.elements.store_features');
            this.storeDetails = salla.lang.get('common.elements.store_details');
            this.templateInformation = salla.lang.get('common.elements.template_information');
            this.buyTheTemplate = salla.lang.get('common.elements.buy_the_template');
            salla.helpers.setNested(salla.lang.messages['ar.trans'], 'common.elements.store_price', 'ÿ≥ÿπÿ± ÿßŸÑŸÖÿ™ÿ¨ÿ±');
            salla.helpers.setNested(salla.lang.messages['en.trans'], 'common.elements.store_price', 'Store Price');
            salla.helpers.setNested(salla.lang.messages['ar.trans'], 'common.elements.the_developer', 'ÿßŸÑŸÖÿ∑Ÿàÿ±');
            salla.helpers.setNested(salla.lang.messages['en.trans'], 'common.elements.the_developer', 'the developer');
            salla.helpers.setNested(salla.lang.messages['ar.trans'], 'common.elements.store_price_details', 'ÿßŸÑÿ≥ÿπÿ± Ÿäÿ¥ŸÖŸÑ');
            salla.helpers.setNested(salla.lang.messages['en.trans'], 'common.elements.store_price_details', 'Price Includes');
            salla.helpers.setNested(salla.lang.messages['ar.trans'], 'common.elements.salla', 'ÿ≥ŸÑÿ©');
            salla.helpers.setNested(salla.lang.messages['en.trans'], 'common.elements.salla', 'Salla');
            salla.helpers.setNested(salla.lang.messages['ar.trans'], 'common.elements.store_is_available_for_purchase', 'Ÿáÿ∞ÿß ÿßŸÑŸÖÿ™ÿ¨ÿ± ŸÖÿ™ÿßÿ≠ ŸÑŸÑÿ¥ÿ±ÿßÿ° ŸÖŸÜ');
            salla.helpers.setNested(salla.lang.messages['en.trans'], 'common.elements.store_is_available_for_purchase', 'This store is available for purchase from');
            setTimeout(() => {
                this.storePrice = salla.lang.get('common.elements.store_price');
                this.theDeveloper = salla.lang.get('common.elements.the_developer');
                this.storePriceDetails = salla.lang.getWithDefault('common.elements.store_price_details', 'ÿßŸÑÿ≥ÿπÿ± Ÿäÿ¥ŸÖŸÑ');
                this.salla = salla.lang.getWithDefault('common.elements.salla', 'ÿ≥ŸÑÿ©');
                this.defaultMessage = salla.lang.getWithDefault('common.elements.store_is_available_for_purchase', 'Ÿáÿ∞ÿß ÿßŸÑŸÖÿ™ÿ¨ÿ± ŸÖÿ™ÿßÿ≠ ŸÑŸÑÿ¥ÿ±ÿßÿ° ŸÖŸÜ');
            }, 100);
        });
    }
    open() {
        return this.drawer.open()
            .then(() => this.handleTemplateRequest());
    }
    handleTemplateRequest() {
        if (Object.keys(this.templateData).length) {
            return;
        }
        this.drawer.loading();
        return salla.api.request(`/store/template`, {}, 'get', { 'Store-Identifier': this.storeId })
            .then((res) => {
            this.drawer.setTitle(this.storeDetails + " " + this.storeName);
            this.templateData = res.data;
            this.drawer.stopLoading();
        })
            .catch(() => {
            this.drawer.close();
        });
    }
    handleAction() {
        if (this.type === 'link') {
            window.location.href = this.actionUrl;
        }
        if (this.type === 'popup') {
            this.open();
        }
    }
    popup() {
        return (h("salla-drawer", { class: "s-bottom-alert-modal", ref: drawer => this.drawer = drawer, "no-padding": true }, Object.keys(this.templateData).length ?
            [h("div", { class: "s-bottom-alert-modal-inner s-scrollbar" }, h("div", { class: { "s-bottom-alert-modal-content": true } }, this.templateData?.features ? [h("div", { class: "s-bottom-alert-modal-content-title" }, h("i", { innerHTML: ImageIcon, class: "s-bottom-alert-modal-content-icon" }), h("span", null, this.storeFeatures)), h("div", { class: "s-bottom-alert-modal-content-features", innerHTML: this.templateData?.features })
                ] : ''), h("div", { class: { "s-bottom-alert-modal-content": true, 's-bottom-alert-modal-content-extra-padding': this.templateData?.price } }, this.templateData?.features ? [h("div", { class: "s-bottom-alert-modal-content-title" }, h("i", { innerHTML: moneyIcon, class: "s-bottom-alert-modal-content-icon" }), h("span", null, this.storePriceDetails)), h("div", { class: "s-bottom-alert-modal-content-price-details" }, this.templateData?.price_details?.items.map((item) => (h("div", { class: "s-bottom-alert-modal-content-price-details-item" }, h("i", { innerHTML: checkCircleIcon, class: "s-bottom-alert-modal-content-price-details-item-icon" }), h("span", { class: "s-bottom-alert-modal-content-price-details-item-name" }, item.name), h("span", { class: "s-bottom-alert-modal-content-price-details-item-price", innerHTML: salla.money(item.price) })))))
                ] : ''), this.templateData?.link ?
                    h("div", { class: "s-bottom-alert-modal-content-footer" }, h("salla-button", { color: 'primary', size: "medium", width: 'wide', href: this.templateData?.link }, h("i", { innerHTML: PendingOrdersIcon }), this.buyTheTemplate)) : '')] : ''));
    }
    render() {
        const hasTemplate = this.template && typeof this.template === 'object' && Object.keys(this.template).length > 0;
        // const developer = hasTemplate && this.template.developer;
        // const hasDeveloper = developer !== undefined;
        // const developerName = hasDeveloper && developer?.name;
        // const developerUrl = null;//hasDeveloper && developer.url;
        return (h(Host, { key: '39eb4b7f3c12ba74281ebcdd4b52cf04ec46054b', class: "s-bottom-alert-wrapper" }, h("div", { key: '94bdca640a4ae3434c9b6eaf2b3af8ffabfd5802', class: "s-bottom-alert-content" }, h("div", { key: 'cc218513a8d832155031cdf64f63c21bf01a0d1b', class: "s-bottom-alert-icon" }, this.icon ? h("i", { class: this.icon }) : h("i", { innerHTML: infoIcon })), h("div", { key: '97deba6e71c8507c68fb942940912e3e201dd65e', class: "s-bottom-alert-message" }, this.message ? (this.message) : hasTemplate ? (h("span", null, this.defaultMessage, " ", h("span", { class: {
                "s-bottom-alert-message-highlight": true,
            }, "aria-label": "Developer" }, this.salla), " ", h("span", { class: "s-bottom-alert-message-splitter" }, "|"), " ", this.storePrice, ":", " ", h("span", { class: "s-bottom-alert-message-highlight", innerHTML: salla.money(this.template.price) }))) : (this.defaultMessage)), this.type !== 'banner' && (h("div", { key: '7923680790c1db0ffeb716997b489dbb9b097125', class: "s-bottom-alert-action" }, h("salla-button", { key: 'f0d00ce883a1dec0a1640ad5f27b9eec3e645630', href: this.actionUrl, size: "medium", onClick: () => this.handleAction(), width: "normal" }, this.actionLabel || this.defaultActionLabel))), this.type === 'popup' && this.popup())));
    }
    get host() { return getElement(this); }
};
SallaBottomAlert.style = sallaBottomAlertCss;

var ArrowLeftIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>keyboard_arrow_left</title>
<path d="M20.563 22.104l-1.875 1.875-8-8 8-8 1.875 1.875-6.125 6.125z"></path>
</svg>
`;

var ArrowRightIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>keyboard_arrow_right</title>
<path d="M11.438 22.479l6.125-6.125-6.125-6.125 1.875-1.875 8 8-8 8z"></path>
</svg>
`;

const sallaBreadcrumbCss = ":host{display:block}";

const SallaBreadcrumb = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.sessionStorageKey = "breadcrumb_snapshot";
        this.itemSlot = this.host.querySelector('[slot="item"]')?.outerHTML || `<li class="s-breadcrumb-item"><a href={url}>{title}</a></li>`;
        this.iconSlot = this.host.querySelector('[slot="icon"]')?.outerHTML;
    }
    componentWillLoad() {
        return (new Promise(resolve => salla.onReady(() => salla.lang.onLoaded(resolve))))
            .then(() => {
            if (salla.url.is_page('index')) {
                throw new Error('salla-breadcrumb:: breadcrumb not supported on home page');
            }
        })
            .then(() => {
            if (!salla.config.get('theme.settings.is_breadcrumbs_enabled', true)) {
                throw new Error('salla-breadcrumb:: merchant disabled the feature');
            }
        })
            .then(() => {
            const page = salla.config.get("page");
            if (!page || !page.slug) {
                salla.logger.error('salla-breadcrumbs:: page object not existed on salla.config.get("page")!');
                this.breadcrumbs = [];
                return;
            }
            let sessionBreadcrumbs = this.getSessionBreadcrumbs();
            if (page.slug === "product.single" && sessionBreadcrumbs && sessionBreadcrumbs.length > 0) {
                sessionBreadcrumbs.push({
                    title: page.title,
                    url: page.url
                });
                this.breadcrumbs = this.setBreadcrumbsFromArray(sessionBreadcrumbs);
                this.storeBreadcrumbSnapshot();
            }
            else if (sessionBreadcrumbs && sessionBreadcrumbs.length > 0) {
                if (this.isNewPage(page, sessionBreadcrumbs)) {
                    this.breadcrumbs = this.generateBreadcrumbs(page);
                    this.storeBreadcrumbSnapshot();
                }
                else {
                    this.breadcrumbs = this.setBreadcrumbsFromArray(sessionBreadcrumbs);
                }
            }
            else {
                this.breadcrumbs = this.generateBreadcrumbs(page);
                this.storeBreadcrumbSnapshot();
            }
            if (this.breadcrumbs?.length) {
                this.breadcrumbs[this.breadcrumbs.length - 1].is_last = true;
            }
            return this.breadcrumbs;
        })
            .catch((error) => {
            salla.logger.error('salla-breadcrumb:: unexpected error!', error);
            this.breadcrumbs = [];
        });
    }
    getSessionBreadcrumbs() {
        if (new URLSearchParams(window.location.search).get('from') === 'search-bar') {
            return [];
        }
        return JSON.parse(sessionStorage.getItem(this.sessionStorageKey) || '[]');
    }
    /**
   * Helper function to determine if we're navigating to a new page that requires updating the session storage.
   */
    isNewPage(page, sessionBreadcrumbs) {
        // Check if the last breadcrumb in sessionStorage matches the current page's URL.
        const lastBreadcrumb = sessionBreadcrumbs[sessionBreadcrumbs.length - 1];
        return lastBreadcrumb?.url !== page.url; // If the URLs don't match, it's a new page.
    }
    setBreadcrumbsFromArray(breadcrumbArray) {
        return breadcrumbArray.map((item, index) => ({
            ...item,
            is_last: index === breadcrumbArray.length - 1,
        }));
    }
    /**
     * Sanitizes the breadcrumb title by splitting it on the `|` character and returning
     * the part based on `preferedIndex`. If no separator is found, returns the trimmed title.
     *
     * @param {string} title - The title to sanitize.
     * @param {number} [preferedIndex=1] - Index of the part to return (0 for first, 1 for second).
     * @returns {string} - The sanitized title.
     */
    sanitizeBreadcrumbTitle(title, preferedIndex = 1) {
        if (!title.includes('|')) {
            return title.trim();
        }
        return title.split('|').map(part => part.trim())[preferedIndex];
    }
    generateBreadcrumbs(page) {
        let breadcrumbs = [];
        //TODO:: check what is the need from this?
        if (page.slug === 'product.single') {
            const previousPage = this.getSessionBreadcrumbs();
            if (previousPage.length > 0 && previousPage[1]?.url === page.parent?.url) {
                return this.setBreadcrumbsFromArray([...previousPage, page]);
            }
        }
        // Start with the current page
        let currentPage = page;
        // Traverse up to the parent pages
        while (currentPage) {
            if (currentPage.title) {
                breadcrumbs.unshift({
                    title: currentPage.title,
                    url: currentPage.url,
                });
            }
            currentPage = currentPage.parent;
        }
        // Additional logic based on page slug or title
        if (page.slug.includes("customer") && page.slug !== 'customer.profile') {
            breadcrumbs.unshift({ title: salla.lang.get('common.titles.profile'), url: salla.url.get('profile') });
        }
        if (page.slug.includes('blog')) {
            breadcrumbs.unshift({ title: salla.lang.get('blocks.footer.blog'), url: salla.url.get('blog') });
        }
        if (page.slug === 'brands.single') {
            breadcrumbs.unshift({ title: salla.lang.get('common.titles.brands'), url: salla.url.get('brands') });
        }
        if (!page.title && page.slug === 'loyalty') {
            breadcrumbs.unshift({ title: salla.lang.get('common.titles.loyalty_program'), url: salla.url.get('loyalty') });
        }
        // Add home breadcrumb
        breadcrumbs.unshift({ title: salla.lang.get('common.titles.home'), url: salla.url.get('') });
        return breadcrumbs;
    }
    storeBreadcrumbSnapshot() {
        try {
            const page = salla.config.get("page");
            // Skip storing breadcrumbs for product.single page
            if (page?.slug === 'product.single') {
                return;
            }
            const items = [...this.breadcrumbs];
            // Find the last item and update its URL
            const lastItemIndex = items.length - 1;
            if (lastItemIndex >= 0) {
                items[lastItemIndex].url = window.location.href;
            }
            const breadcrumbSnapshot = JSON.stringify(items);
            sessionStorage.setItem(this.sessionStorageKey, breadcrumbSnapshot);
        }
        catch (error) {
            salla.logger.error('salla-breadcrumb:: Failed to store breadcrumb snapshot in sessionStorage.', error);
        }
    }
    render() {
        if (this.breadcrumbs.length <= 1) {
            salla.log('salla-breadcrumb:: There is no breadcrumbs!');
            return null;
        }
        return (h("ol", { class: {
                "s-breadcrumb-wrapper": true,
                "s-breadcrumb-dark": salla.url.is_page('loyalty'),
                "s-breadcrumb-primary-reverse": salla.config.get('page.slug').includes('customer')
            } }, this.breadcrumbs.map(item => {
            const isProductSingle = salla.config.get('page.slug') === "product.single";
            const title = (isProductSingle && item.is_last) ? item.title : this.sanitizeBreadcrumbTitle(item.title);
            const itemHTML = this.itemSlot.replace(/\{url\}/g, item.url).replace(/\{title\}/g, title);
            return [
                h("div", { class: "s-breadcrumb-slot", innerHTML: itemHTML }),
                this.getArrowDomForItem(item)
            ];
        })));
    }
    getArrowDomForItem(item) {
        if (item.is_last) {
            return '';
        }
        let iconDom = this.iconSlot || (salla.config.get('theme.is_rtl', true) ? ArrowLeftIcon : ArrowRightIcon);
        return h("li", { class: "s-breadcrumb-arrow" }, h("div", { class: { "s-breadcrumb-icon-slot": true, "s-breadcrumb-default-icon": !this.iconSlot }, innerHTML: iconDom }));
    }
    /**
     * Lifecycle method called after the component is rendered.
     * - Reduces the number of elements in the DOM.
     * - Removes unnecessary slots parent elements.
     * - Replaces the last anchor tag in the breadcrumb with its content.
     */
    componentDidRender() {
        // Reduces the number of elements in the DOM
        this.host.querySelectorAll('.s-breadcrumb-slot').forEach(el => el.replaceWith(el.firstChild));
        this.host.querySelectorAll('.s-breadcrumb-icon-slot.s-breadcrumb-default-icon').forEach(el => el.replaceWith(el.querySelector('svg')));
        // Removes the slots parent elements if exists
        this.host.querySelector('[slot="item"]')?.remove();
        this.host.querySelector('[slot="icon"]')?.remove();
        let lastEl = this.host.querySelectorAll('.s-breadcrumb-item')[this.breadcrumbs.length - 1]?.querySelector('a');
        lastEl && lastEl.replaceWith(lastEl.firstChild);
    }
    get host() { return getElement(this); }
};
SallaBreadcrumb.style = sallaBreadcrumbCss;

const sallaButtonCss = "";

const SallaButton = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.hostAttributes = {};
        /**
         * Button Type
         */
        this.shape = 'btn';
        /**
         * Button Color
         */
        this.color = 'primary';
        /**
         * Button Fill
         */
        this.fill = 'solid';
        /**
         * Button Size
         */
        this.size = 'medium';
        /**
         * Button Width
         */
        this.width = 'normal';
        /**
         * Is the button currently loading
         */
        this.loading = false;
        /**
         * Is the button currently disabled
         */
        this.disabled = false;
        /**
         * If there is need to change loader position, pass the position
         */
        this.loaderPosition = 'after';
        /**
         * Determines the type of the rendered button.
         * By default, the type is set to "button," making it a general-purpose button.
         * Setting `type` to "submit" makes the button behave as a submit button within a form, triggering form submission.
         * Possible values for `type` include "button," "submit," "reset," and "menu.".
         *
         * Possible values and their usage are as follows:
         * "button" (default, used for general button functionality),
         * "reset" (resets form fields to their default values), and
         * "menu" (represents a button that, when activated, displays a context menu).
         */
        this.type = "button";
    }
    /**
     * Run loading animation
     */
    async load() {
        if (this.loaderPosition == 'center')
            this.text.classList.add('s-button-hide');
        this.host.setAttribute('loading', '');
        return this.host;
    }
    /**
     * Stop loading animation
     */
    async stop() {
        this.host.removeAttribute('loading');
        this.host.querySelector('button').removeAttribute('loading');
        if (this.loaderPosition == 'center')
            this.text.classList.remove('s-button-hide');
        return this.host;
    }
    /**
     * Changing the body of the button
     * @param html
     */
    async setText(html) {
        this.text.innerHTML = html;
        return this.host;
    }
    /**
     * Add `disabled` attribute
     */
    async disable() {
        this.host.setAttribute('disabled', '');
        return this.host;
    }
    /**
     * Remove `disabled` attribute
     */
    async enable() {
        this.host.removeAttribute('disabled');
        return this.host;
    }
    getBtnAttributes() {
        for (let i = 0; i < this.host.attributes.length; i++) {
            if (!['color', 'fill', 'size', 'width', 'id'].includes(this.host.attributes[i].name)) {
                this.hostAttributes[this.host.attributes[i].name] = this.host.attributes[i].value;
            }
        }
        this.hostAttributes.type = this.hostAttributes.type || this.type;
        this.hostAttributes.class +=
            ' s-button-element s-button-' + this.shape
                + ' s-button-' + (this.fill == "none" ? 'fill-none' : this.fill)
                + (this.size != "medium" ? ' s-button-' + this.size : '')
                + (this.width != "normal" ? ' s-button-' + this.width : '')
                + (this.shape == "link" ? ' s-button-' + this.color + '-link' : '')
                + (this.shape != "link" && this.fill != 'outline' ? ' s-button-' + this.color : '')
                + (this.fill == 'outline' ? ' s-button-' + this.color + '-outline' : '')
                + (this.disabled ? ' s-button-disabled ' : '')
                + (this.shape == 'icon' ? ' s-button-loader-center' : ' s-button-loader-' + this.loaderPosition);
        return this.hostAttributes;
    }
    button() {
        return (h("button", { ...this.getBtnAttributes(), disabled: this.disabled }, h("span", { class: "s-button-text", ref: el => this.text = el }, h("slot", null)), this.loading ? h("span", { class: "s-button-loader" }) : ''));
    }
    render() {
        //TODO:: find a better fix, this is a patch for issue that duplicates the buttons twice @see the screenshot inside this folder
        return this.host.closest('.swiper-slide')?.classList.contains('swiper-slide-duplicate')
            ? ''
            : (h(Host, { class: "s-button-wrap" }, this.href ? h("a", { href: this.href }, this.button()) : this.button()));
    }
    get host() { return getElement(this); }
};
SallaButton.style = sallaButtonCss;

const sallaCartSummaryCss = "";

const SallaCartSummary = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.cartSummaryCount = salla.storage.get('cart.summary.count') || 0;
        this.cartSummaryTotal = salla.storage.get('cart.summary.total') || 0;
        this.cartLabel = salla.config.get('user.language_code') === 'ar' ? 'ÿßŸÑÿ≥ŸÑÿ©' : 'Cart';
        salla.cart.event.onUpdated((response) => {
            this.cartSummaryCount = response.count || 0;
            this.cartSummaryTotal = response.total || 0;
        });
    }
    /**
     * Animate product Image to cart summary
     * @param image the image element to animate
     */
    async animateToCart(image) {
        document.querySelectorAll('.s-cart-thumb').forEach(el => el.remove());
        if (!image?.src) {
            salla.log('Failed to get the img element');
            return;
        }
        let cartBtn = this.host.querySelector('#s-cart-icon'), btnOffset = cartBtn.getBoundingClientRect(), btnTop = btnOffset.top + window.scrollY, btnLeft = btnOffset.left + window.scrollX;
        // get thumb position ---
        let position = image.getBoundingClientRect(), width = image.offsetWidth + 'px', height = image.offsetHeight + 'px', top = position.top, left = position.left;
        // create thumb img element ---
        let img = document.createElement("img");
        img.src = image.getAttribute('src');
        img.className = "s-cart-thumb";
        img.setAttribute("style", "object-fit:cover; width:" + width + '; height:' + height + '; top:' + top + 'px; left:' + left + 'px;z-index:99999999; ');
        document.body.append(img);
        let cartThumb = document.querySelector('.s-cart-thumb');
        cartBtn.classList.remove('animated', 'rubberBand');
        // start timeline ---
        let cartThumbAnime = new anime.timeline();
        cartThumbAnime.add({
            targets: cartThumb,
            width: [150, 30],
            height: [150, 30],
            top: [top, window.scrollY > 0 ? btnTop - window.scrollY - 40 : btnTop - 40],
            left: [left, btnLeft],
            borderRadius: ['20%', '50%'],
            easing: 'easeOutExpo',
            duration: 1200,
        }, '+=200')
            .add({
            targets: cartThumb,
            width: [30, 0],
            height: [30, 0],
            opacity: [1, 0],
            easing: 'easeOutExpo',
            top: [window.scrollY > 0 ? btnTop - window.scrollY - 40 : btnTop - 40, window.scrollY > 0 ? btnTop - window.scrollY + 10 : btnTop + 10],
            left: [btnLeft, btnLeft + 10],
        }, '-=500')
            .add({
            complete: function () {
                cartBtn.classList.add('animated', 'rubberBand');
                cartThumb.remove();
            },
        }, '-=1700');
    }
    /**
     * Some times it renderes with main domain, something like `https://salla.sa/cart`, because salla is not loaded,
     * here, we are sure it will not be rendred unless salla is ready
     */
    componentWillLoad() {
        return new Promise(resolve => salla.onReady(resolve));
    }
    /**
     * Compute cart href with scope parameter if available
     */
    getCartLink() {
        let cartUrl = salla.url.get('cart');
        const scope = salla.config.get('store.scope', salla.storage.get('scope'));
        if (scope && scope.id) {
            try {
                const url = new URL(cartUrl);
                url.searchParams.set('scope', scope.id);
                return url.toString();
            }
            catch (e) {
                const delimiter = cartUrl.includes('?') ? '&' : '?';
                return `${cartUrl}${delimiter}scope=${encodeURIComponent(scope.id)}`;
            }
        }
        return cartUrl;
    }
    render() {
        return (h(Host, { key: '9438bba26da9472fd505b4797fae50877103b9aa' }, h("a", { key: 'f0c8b59b4878525d189fafb89a50654b239e96fd', class: "s-cart-summary-wrapper", href: this.getCartLink() }, h("div", { key: '91b633322061063ab214f2c9409eb156da210bc2', id: "s-cart-icon" }, h("slot", { key: 'ccf02e30d94dd3485e219528ace2d56651c52456', name: "icon" }, h("i", { key: 'f102e391d9175cf9881c84063b33993c832c426b', class: "s-cart-summary-icon", innerHTML: PendingOrdersIcon }))), h("span", { key: '3bf1db1728d57b526c9e60ce284f7128226586b5', class: "s-cart-summary-count" }, salla.helpers.number(this.cartSummaryCount)), h("p", { key: '57aa05278d5c30395d263aca978e4be8676d3a25', class: "s-cart-summary-content" }, this.showCartLabel && h("span", { key: '06d9c96ff9224023608a859fbec427f370c9e522', class: "s-cart-summary-label" }, this.cartLabel), h("b", { key: 'd8c05640c7e3579cd04fbdd29251f96f6e47bfa5', class: "s-cart-summary-total", innerHTML: salla.money(this.cartSummaryTotal) })))));
    }
    get host() { return getElement(this); }
};
SallaCartSummary.style = sallaCartSummaryCss;

var vanillaPicker$1 = {exports: {}};

/*!
 * vanilla-picker v2.12.3
 * https://vanilla-picker.js.org
 *
 * Copyright 2017-2024 Andreas Borgen (https://github.com/Sphinxxxx), Adam Brooks (https://github.com/dissimulate)
 * Released under the ISC license.
 */
var vanillaPicker = vanillaPicker$1.exports;

var hasRequiredVanillaPicker;

function requireVanillaPicker () {
	if (hasRequiredVanillaPicker) return vanillaPicker$1.exports;
	hasRequiredVanillaPicker = 1;
	(function (module, exports) {
		(function (global, factory) {
		  module.exports = factory() ;
		})(vanillaPicker, (function () {
		  var classCallCheck = function (instance, Constructor) {
		    if (!(instance instanceof Constructor)) {
		      throw new TypeError("Cannot call a class as a function");
		    }
		  };

		  var createClass = function () {
		    function defineProperties(target, props) {
		      for (var i = 0; i < props.length; i++) {
		        var descriptor = props[i];
		        descriptor.enumerable = descriptor.enumerable || false;
		        descriptor.configurable = true;
		        if ("value" in descriptor) descriptor.writable = true;
		        Object.defineProperty(target, descriptor.key, descriptor);
		      }
		    }

		    return function (Constructor, protoProps, staticProps) {
		      if (protoProps) defineProperties(Constructor.prototype, protoProps);
		      if (staticProps) defineProperties(Constructor, staticProps);
		      return Constructor;
		    };
		  }();

		  var slicedToArray = function () {
		    function sliceIterator(arr, i) {
		      var _arr = [];
		      var _n = true;
		      var _d = false;
		      var _e = undefined;

		      try {
		        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
		          _arr.push(_s.value);

		          if (i && _arr.length === i) break;
		        }
		      } catch (err) {
		        _d = true;
		        _e = err;
		      } finally {
		        try {
		          if (!_n && _i["return"]) _i["return"]();
		        } finally {
		          if (_d) throw _e;
		        }
		      }

		      return _arr;
		    }

		    return function (arr, i) {
		      if (Array.isArray(arr)) {
		        return arr;
		      } else if (Symbol.iterator in Object(arr)) {
		        return sliceIterator(arr, i);
		      } else {
		        throw new TypeError("Invalid attempt to destructure non-iterable instance");
		      }
		    };
		  }();

		  String.prototype.startsWith = String.prototype.startsWith || function (needle) {
		      return this.indexOf(needle) === 0;
		  };
		  String.prototype.padStart = String.prototype.padStart || function (len, pad) {
		      var str = this;while (str.length < len) {
		          str = pad + str;
		      }return str;
		  };

		  var colorNames = { cb: '0f8ff', tqw: 'aebd7', q: '-ffff', qmrn: '7fffd4', zr: '0ffff', bg: '5f5dc', bsq: 'e4c4', bck: '---', nch: 'ebcd', b: '--ff', bvt: '8a2be2', brwn: 'a52a2a', brw: 'deb887', ctb: '5f9ea0', hrt: '7fff-', chcT: 'd2691e', cr: '7f50', rnw: '6495ed', crns: '8dc', crms: 'dc143c', cn: '-ffff', Db: '--8b', Dcn: '-8b8b', Dgnr: 'b8860b', Dgr: 'a9a9a9', Dgrn: '-64-', Dkhk: 'bdb76b', Dmgn: '8b-8b', Dvgr: '556b2f', Drng: '8c-', Drch: '9932cc', Dr: '8b--', Dsmn: 'e9967a', Dsgr: '8fbc8f', DsTb: '483d8b', DsTg: '2f4f4f', Dtrq: '-ced1', Dvt: '94-d3', ppnk: '1493', pskb: '-bfff', mgr: '696969', grb: '1e90ff', rbrc: 'b22222', rwht: 'af0', stg: '228b22', chs: '-ff', gnsb: 'dcdcdc', st: '8f8ff', g: 'd7-', gnr: 'daa520', gr: '808080', grn: '-8-0', grnw: 'adff2f', hnw: '0fff0', htpn: '69b4', nnr: 'cd5c5c', ng: '4b-82', vr: '0', khk: '0e68c', vnr: 'e6e6fa', nrb: '0f5', wngr: '7cfc-', mnch: 'acd', Lb: 'add8e6', Lcr: '08080', Lcn: 'e0ffff', Lgnr: 'afad2', Lgr: 'd3d3d3', Lgrn: '90ee90', Lpnk: 'b6c1', Lsmn: 'a07a', Lsgr: '20b2aa', Lskb: '87cefa', LsTg: '778899', Lstb: 'b0c4de', Lw: 'e0', m: '-ff-', mgrn: '32cd32', nn: 'af0e6', mgnt: '-ff', mrn: '8--0', mqm: '66cdaa', mmb: '--cd', mmrc: 'ba55d3', mmpr: '9370db', msg: '3cb371', mmsT: '7b68ee', '': '-fa9a', mtr: '48d1cc', mmvt: 'c71585', mnLb: '191970', ntc: '5fffa', mstr: 'e4e1', mccs: 'e4b5', vjw: 'dead', nv: '--80', c: 'df5e6', v: '808-0', vrb: '6b8e23', rng: 'a5-', rngr: '45-', rch: 'da70d6', pgnr: 'eee8aa', pgrn: '98fb98', ptrq: 'afeeee', pvtr: 'db7093', ppwh: 'efd5', pchp: 'dab9', pr: 'cd853f', pnk: 'c0cb', pm: 'dda0dd', pwrb: 'b0e0e6', prp: '8-080', cc: '663399', r: '--', sbr: 'bc8f8f', rb: '4169e1', sbrw: '8b4513', smn: 'a8072', nbr: '4a460', sgrn: '2e8b57', ssh: '5ee', snn: 'a0522d', svr: 'c0c0c0', skb: '87ceeb', sTb: '6a5acd', sTgr: '708090', snw: 'afa', n: '-ff7f', stb: '4682b4', tn: 'd2b48c', t: '-8080', thst: 'd8bfd8', tmT: '6347', trqs: '40e0d0', vt: 'ee82ee', whT: '5deb3', wht: '', hts: '5f5f5', w: '-', wgrn: '9acd32' };

		  function printNum(num) {
		      var decs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

		      var str = decs > 0 ? num.toFixed(decs).replace(/0+$/, '').replace(/\.$/, '') : num.toString();
		      return str || '0';
		  }

		  var Color = function () {
		      function Color(r, g, b, a) {
		          classCallCheck(this, Color);


		          var that = this;
		          function parseString(input) {

		              if (input.startsWith('hsl')) {
		                  var _input$match$map = input.match(/([\-\d\.e]+)/g).map(Number),
		                      _input$match$map2 = slicedToArray(_input$match$map, 4),
		                      h = _input$match$map2[0],
		                      s = _input$match$map2[1],
		                      l = _input$match$map2[2],
		                      _a = _input$match$map2[3];

		                  if (_a === undefined) {
		                      _a = 1;
		                  }

		                  h /= 360;
		                  s /= 100;
		                  l /= 100;
		                  that.hsla = [h, s, l, _a];
		              } else if (input.startsWith('rgb')) {
		                  var _input$match$map3 = input.match(/([\-\d\.e]+)/g).map(Number),
		                      _input$match$map4 = slicedToArray(_input$match$map3, 4),
		                      _r = _input$match$map4[0],
		                      _g = _input$match$map4[1],
		                      _b = _input$match$map4[2],
		                      _a2 = _input$match$map4[3];

		                  if (_a2 === undefined) {
		                      _a2 = 1;
		                  }

		                  that.rgba = [_r, _g, _b, _a2];
		              } else {
		                  if (input.startsWith('#')) {
		                      that.rgba = Color.hexToRgb(input);
		                  } else {
		                      that.rgba = Color.nameToRgb(input) || Color.hexToRgb(input);
		                  }
		              }
		          }

		          if (r === undefined) ; else if (Array.isArray(r)) {
		              this.rgba = r;
		          } else if (b === undefined) {
		              var color = r && '' + r;
		              if (color) {
		                  parseString(color.toLowerCase());
		              }
		          } else {
		              this.rgba = [r, g, b, a === undefined ? 1 : a];
		          }
		      }

		      createClass(Color, [{
		          key: 'printRGB',
		          value: function printRGB(alpha) {
		              var rgb = alpha ? this.rgba : this.rgba.slice(0, 3),
		                  vals = rgb.map(function (x, i) {
		                  return printNum(x, i === 3 ? 3 : 0);
		              });

		              return alpha ? 'rgba(' + vals + ')' : 'rgb(' + vals + ')';
		          }
		      }, {
		          key: 'printHSL',
		          value: function printHSL(alpha) {
		              var mults = [360, 100, 100, 1],
		                  suff = ['', '%', '%', ''];

		              var hsl = alpha ? this.hsla : this.hsla.slice(0, 3),
		                  vals = hsl.map(function (x, i) {
		                  return printNum(x * mults[i], i === 3 ? 3 : 1) + suff[i];
		              });

		              return alpha ? 'hsla(' + vals + ')' : 'hsl(' + vals + ')';
		          }
		      }, {
		          key: 'printHex',
		          value: function printHex(alpha) {
		              var hex = this.hex;
		              return alpha ? hex : hex.substring(0, 7);
		          }
		      }, {
		          key: 'rgba',
		          get: function get() {
		              if (this._rgba) {
		                  return this._rgba;
		              }
		              if (!this._hsla) {
		                  throw new Error('No color is set');
		              }

		              return this._rgba = Color.hslToRgb(this._hsla);
		          },
		          set: function set(rgb) {
		              if (rgb.length === 3) {
		                  rgb[3] = 1;
		              }

		              this._rgba = rgb;
		              this._hsla = null;
		          }
		      }, {
		          key: 'rgbString',
		          get: function get() {
		              return this.printRGB();
		          }
		      }, {
		          key: 'rgbaString',
		          get: function get() {
		              return this.printRGB(true);
		          }
		      }, {
		          key: 'hsla',
		          get: function get() {
		              if (this._hsla) {
		                  return this._hsla;
		              }
		              if (!this._rgba) {
		                  throw new Error('No color is set');
		              }

		              return this._hsla = Color.rgbToHsl(this._rgba);
		          },
		          set: function set(hsl) {
		              if (hsl.length === 3) {
		                  hsl[3] = 1;
		              }

		              this._hsla = hsl;
		              this._rgba = null;
		          }
		      }, {
		          key: 'hslString',
		          get: function get() {
		              return this.printHSL();
		          }
		      }, {
		          key: 'hslaString',
		          get: function get() {
		              return this.printHSL(true);
		          }
		      }, {
		          key: 'hex',
		          get: function get() {
		              var rgb = this.rgba,
		                  hex = rgb.map(function (x, i) {
		                  return i < 3 ? x.toString(16) : Math.round(x * 255).toString(16);
		              });

		              return '#' + hex.map(function (x) {
		                  return x.padStart(2, '0');
		              }).join('');
		          },
		          set: function set(hex) {
		              this.rgba = Color.hexToRgb(hex);
		          }
		      }], [{
		          key: 'hexToRgb',
		          value: function hexToRgb(input) {

		              var hex = (input.startsWith('#') ? input.slice(1) : input).replace(/^(\w{3})$/, '$1F').replace(/^(\w)(\w)(\w)(\w)$/, '$1$1$2$2$3$3$4$4').replace(/^(\w{6})$/, '$1FF');

		              if (!hex.match(/^([0-9a-fA-F]{8})$/)) {
		                  throw new Error('Unknown hex color; ' + input);
		              }

		              var rgba = hex.match(/^(\w\w)(\w\w)(\w\w)(\w\w)$/).slice(1).map(function (x) {
		                  return parseInt(x, 16);
		              });

		              rgba[3] = rgba[3] / 255;
		              return rgba;
		          }
		      }, {
		          key: 'nameToRgb',
		          value: function nameToRgb(input) {

		              var hash = input.toLowerCase().replace('at', 'T').replace(/[aeiouyldf]/g, '').replace('ght', 'L').replace('rk', 'D').slice(-5, 4),
		                  hex = colorNames[hash];
		              return hex === undefined ? hex : Color.hexToRgb(hex.replace(/\-/g, '00').padStart(6, 'f'));
		          }
		      }, {
		          key: 'rgbToHsl',
		          value: function rgbToHsl(_ref) {
		              var _ref2 = slicedToArray(_ref, 4),
		                  r = _ref2[0],
		                  g = _ref2[1],
		                  b = _ref2[2],
		                  a = _ref2[3];

		              r /= 255;
		              g /= 255;
		              b /= 255;

		              var max = Math.max(r, g, b),
		                  min = Math.min(r, g, b);
		              var h = void 0,
		                  s = void 0,
		                  l = (max + min) / 2;

		              if (max === min) {
		                  h = s = 0;
		              } else {
		                  var d = max - min;
		                  s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		                  switch (max) {
		                      case r:
		                          h = (g - b) / d + (g < b ? 6 : 0);break;
		                      case g:
		                          h = (b - r) / d + 2;break;
		                      case b:
		                          h = (r - g) / d + 4;break;
		                  }

		                  h /= 6;
		              }

		              return [h, s, l, a];
		          }
		      }, {
		          key: 'hslToRgb',
		          value: function hslToRgb(_ref3) {
		              var _ref4 = slicedToArray(_ref3, 4),
		                  h = _ref4[0],
		                  s = _ref4[1],
		                  l = _ref4[2],
		                  a = _ref4[3];

		              var r = void 0,
		                  g = void 0,
		                  b = void 0;

		              if (s === 0) {
		                  r = g = b = l;
		              } else {
		                  var hue2rgb = function hue2rgb(p, q, t) {
		                      if (t < 0) t += 1;
		                      if (t > 1) t -= 1;
		                      if (t < 1 / 6) return p + (q - p) * 6 * t;
		                      if (t < 1 / 2) return q;
		                      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
		                      return p;
		                  };

		                  var q = l < 0.5 ? l * (1 + s) : l + s - l * s,
		                      p = 2 * l - q;

		                  r = hue2rgb(p, q, h + 1 / 3);
		                  g = hue2rgb(p, q, h);
		                  b = hue2rgb(p, q, h - 1 / 3);
		              }

		              var rgba = [r * 255, g * 255, b * 255].map(Math.round);
		              rgba[3] = a;

		              return rgba;
		          }
		      }]);
		      return Color;
		  }();

		  var EventBucket = function () {
		      function EventBucket() {
		          classCallCheck(this, EventBucket);

		          this._events = [];
		      }

		      createClass(EventBucket, [{
		          key: 'add',
		          value: function add(target, type, handler) {
		              target.addEventListener(type, handler, false);
		              this._events.push({
		                  target: target,
		                  type: type,
		                  handler: handler
		              });
		          }
		      }, {
		          key: 'remove',
		          value: function remove(target, type, handler) {
		              this._events = this._events.filter(function (e) {
		                  var isMatch = true;
		                  if (target && target !== e.target) {
		                      isMatch = false;
		                  }
		                  if (type && type !== e.type) {
		                      isMatch = false;
		                  }
		                  if (handler && handler !== e.handler) {
		                      isMatch = false;
		                  }

		                  if (isMatch) {
		                      EventBucket._doRemove(e.target, e.type, e.handler);
		                  }
		                  return !isMatch;
		              });
		          }
		      }, {
		          key: 'destroy',
		          value: function destroy() {
		              this._events.forEach(function (e) {
		                  return EventBucket._doRemove(e.target, e.type, e.handler);
		              });
		              this._events = [];
		          }
		      }], [{
		          key: '_doRemove',
		          value: function _doRemove(target, type, handler) {
		              target.removeEventListener(type, handler, false);
		          }
		      }]);
		      return EventBucket;
		  }();

		  function parseHTML(htmlString) {

		      var div = document.createElement('div');
		      div.innerHTML = htmlString;
		      return div.firstElementChild;
		  }

		  function dragTrack(eventBucket, area, callback) {
		      var dragging = false;

		      function clamp(val, min, max) {
		          return Math.max(min, Math.min(val, max));
		      }

		      function onMove(e, info, starting) {
		          if (starting) {
		              dragging = true;
		          }
		          if (!dragging) {
		              return;
		          }

		          e.preventDefault();

		          var bounds = area.getBoundingClientRect(),
		              w = bounds.width,
		              h = bounds.height,
		              x = info.clientX,
		              y = info.clientY;

		          var relX = clamp(x - bounds.left, 0, w),
		              relY = clamp(y - bounds.top, 0, h);

		          callback(relX / w, relY / h);
		      }

		      function onMouse(e, starting) {
		          var button = e.buttons === undefined ? e.which : e.buttons;
		          if (button === 1) {
		              onMove(e, e, starting);
		          } else {
		              dragging = false;
		          }
		      }

		      function onTouch(e, starting) {
		          if (e.touches.length === 1) {
		              onMove(e, e.touches[0], starting);
		          } else {
		              dragging = false;
		          }
		      }

		      eventBucket.add(area, 'mousedown', function (e) {
		          onMouse(e, true);
		      });
		      eventBucket.add(area, 'touchstart', function (e) {
		          onTouch(e, true);
		      });
		      eventBucket.add(window, 'mousemove', onMouse);
		      eventBucket.add(area, 'touchmove', onTouch);
		      eventBucket.add(window, 'mouseup', function (e) {
		          dragging = false;
		      });
		      eventBucket.add(area, 'touchend', function (e) {
		          dragging = false;
		      });
		      eventBucket.add(area, 'touchcancel', function (e) {
		          dragging = false;
		      });
		  }

		  var BG_TRANSP = 'linear-gradient(45deg, lightgrey 25%, transparent 25%, transparent 75%, lightgrey 75%) 0 0 / 2em 2em,\n                   linear-gradient(45deg, lightgrey 25%,       white 25%,       white 75%, lightgrey 75%) 1em 1em / 2em 2em';
		  var HUES = 360;

		  var EVENT_KEY = 'keydown',
		      EVENT_CLICK_OUTSIDE = 'mousedown',
		      EVENT_TAB_MOVE = 'focusin';

		  function $(selector, context) {
		      return (context || document).querySelector(selector);
		  }

		  function stopEvent(e) {

		      e.preventDefault();
		      e.stopPropagation();
		  }
		  function onKey(bucket, target, keys, handler, stop) {
		      bucket.add(target, EVENT_KEY, function (e) {
		          if (keys.indexOf(e.key) >= 0) {
		              handler(e);
		          }
		      });
		  }

		  var Picker = function () {
		      function Picker(options) {
		          classCallCheck(this, Picker);


		          this.settings = {

		              popup: 'right',
		              layout: 'default',
		              alpha: true,
		              editor: true,
		              editorFormat: 'hex',
		              cancelButton: false,
		              defaultColor: '#0cf'
		          };

		          this._events = new EventBucket();

		          this.onChange = null;

		          this.onDone = null;

		          this.onOpen = null;

		          this.onClose = null;

		          this.setOptions(options);
		      }

		      createClass(Picker, [{
		          key: 'setOptions',
		          value: function setOptions(options) {
		              var _this = this;

		              if (!options) {
		                  return;
		              }
		              var settings = this.settings;

		              function transfer(source, target, skipKeys) {
		                  for (var key in source) {

		                      target[key] = source[key];
		                  }
		              }

		              if (options instanceof HTMLElement) {
		                  settings.parent = options;
		              } else {

		                  if (settings.parent && options.parent && settings.parent !== options.parent) {
		                      this._events.remove(settings.parent);
		                      this._popupInited = false;
		                  }

		                  transfer(options, settings);

		                  if (options.onChange) {
		                      this.onChange = options.onChange;
		                  }
		                  if (options.onDone) {
		                      this.onDone = options.onDone;
		                  }
		                  if (options.onOpen) {
		                      this.onOpen = options.onOpen;
		                  }
		                  if (options.onClose) {
		                      this.onClose = options.onClose;
		                  }

		                  var col = options.color || options.colour;
		                  if (col) {
		                      this._setColor(col);
		                  }
		              }

		              var parent = settings.parent;
		              if (parent && settings.popup && !this._popupInited) {

		                  var openProxy = function openProxy(e) {
		                      return _this.openHandler(e);
		                  };

		                  this._events.add(parent, 'click', openProxy);

		                  onKey(this._events, parent, [' ', 'Spacebar', 'Enter'], openProxy);

		                  this._popupInited = true;
		              } else if (options.parent && !settings.popup) {
		                  this.show();
		              }
		          }
		      }, {
		          key: 'openHandler',
		          value: function openHandler(e) {
		              if (this.show()) {

		                  e && e.preventDefault();

		                  this.settings.parent.style.pointerEvents = 'none';

		                  var toFocus = e && e.type === EVENT_KEY ? this._domEdit : this.domElement;
		                  setTimeout(function () {
		                      return toFocus.focus();
		                  }, 100);

		                  if (this.onOpen) {
		                      this.onOpen(this.colour);
		                  }
		              }
		          }
		      }, {
		          key: 'closeHandler',
		          value: function closeHandler(e) {
		              var event = e && e.type;
		              var doHide = false;

		              if (!e) {
		                  doHide = true;
		              } else if (event === EVENT_CLICK_OUTSIDE || event === EVENT_TAB_MOVE) {

		                  var knownTime = (this.__containedEvent || 0) + 100;
		                  if (e.timeStamp > knownTime) {
		                      doHide = true;
		                  }
		              } else {

		                  stopEvent(e);

		                  doHide = true;
		              }

		              if (doHide && this.hide()) {
		                  this.settings.parent.style.pointerEvents = '';

		                  if (event !== EVENT_CLICK_OUTSIDE) {
		                      this.settings.parent.focus();
		                  }

		                  if (this.onClose) {
		                      this.onClose(this.colour);
		                  }
		              }
		          }
		      }, {
		          key: 'movePopup',
		          value: function movePopup(options, open) {

		              this.closeHandler();

		              this.setOptions(options);
		              if (open) {
		                  this.openHandler();
		              }
		          }
		      }, {
		          key: 'setColor',
		          value: function setColor(color, silent) {
		              this._setColor(color, { silent: silent });
		          }
		      }, {
		          key: '_setColor',
		          value: function _setColor(color, flags) {
		              if (typeof color === 'string') {
		                  color = color.trim();
		              }
		              if (!color) {
		                  return;
		              }

		              flags = flags || {};
		              var c = void 0;
		              try {

		                  c = new Color(color);
		              } catch (ex) {
		                  if (flags.failSilently) {
		                      return;
		                  }
		                  throw ex;
		              }

		              if (!this.settings.alpha) {
		                  var hsla = c.hsla;
		                  hsla[3] = 1;
		                  c.hsla = hsla;
		              }
		              this.colour = this.color = c;
		              this._setHSLA(null, null, null, null, flags);
		          }
		      }, {
		          key: 'setColour',
		          value: function setColour(colour, silent) {
		              this.setColor(colour, silent);
		          }
		      }, {
		          key: 'show',
		          value: function show() {
		              var parent = this.settings.parent;
		              if (!parent) {
		                  return false;
		              }

		              if (this.domElement) {
		                  var toggled = this._toggleDOM(true);

		                  this._setPosition();

		                  return toggled;
		              }

		              var html = this.settings.template || '<div class="picker_wrapper" tabindex="-1"><div class="picker_arrow"></div><div class="picker_hue picker_slider"><div class="picker_selector"></div></div><div class="picker_sl"><div class="picker_selector"></div></div><div class="picker_alpha picker_slider"><div class="picker_selector"></div></div><div class="picker_editor"><input aria-label="Type a color name or hex value"/></div><div class="picker_sample"></div><div class="picker_done"><button>Ok</button></div><div class="picker_cancel"><button>Cancel</button></div></div>';
		              var wrapper = parseHTML(html);

		              this.domElement = wrapper;
		              this._domH = $('.picker_hue', wrapper);
		              this._domSL = $('.picker_sl', wrapper);
		              this._domA = $('.picker_alpha', wrapper);
		              this._domEdit = $('.picker_editor input', wrapper);
		              this._domSample = $('.picker_sample', wrapper);
		              this._domOkay = $('.picker_done button', wrapper);
		              this._domCancel = $('.picker_cancel button', wrapper);

		              wrapper.classList.add('layout_' + this.settings.layout);
		              if (!this.settings.alpha) {
		                  wrapper.classList.add('no_alpha');
		              }
		              if (!this.settings.editor) {
		                  wrapper.classList.add('no_editor');
		              }
		              if (!this.settings.cancelButton) {
		                  wrapper.classList.add('no_cancel');
		              }
		              this._ifPopup(function () {
		                  return wrapper.classList.add('popup');
		              });

		              this._setPosition();

		              if (this.colour) {
		                  this._updateUI();
		              } else {
		                  this._setColor(this.settings.defaultColor);
		              }
		              this._bindEvents();

		              return true;
		          }
		      }, {
		          key: 'hide',
		          value: function hide() {
		              return this._toggleDOM(false);
		          }
		      }, {
		          key: 'destroy',
		          value: function destroy() {
		              this._events.destroy();
		              if (this.domElement) {
		                  this.settings.parent.removeChild(this.domElement);
		              }
		          }
		      }, {
		          key: '_bindEvents',
		          value: function _bindEvents() {
		              var _this2 = this;

		              var that = this,
		                  dom = this.domElement,
		                  events = this._events;

		              function addEvent(target, type, handler) {
		                  events.add(target, type, handler);
		              }

		              addEvent(dom, 'click', function (e) {
		                  return e.preventDefault();
		              });

		              dragTrack(events, this._domH, function (x, y) {
		                  return that._setHSLA(x);
		              });

		              dragTrack(events, this._domSL, function (x, y) {
		                  return that._setHSLA(null, x, 1 - y);
		              });

		              if (this.settings.alpha) {
		                  dragTrack(events, this._domA, function (x, y) {
		                      return that._setHSLA(null, null, null, 1 - y);
		                  });
		              }

		              var editInput = this._domEdit;
		              {
		                  addEvent(editInput, 'input', function (e) {
		                      that._setColor(this.value, { fromEditor: true, failSilently: true });
		                  });

		                  addEvent(editInput, 'focus', function (e) {
		                      var input = this;

		                      if (input.selectionStart === input.selectionEnd) {
		                          input.select();
		                      }
		                  });
		              }

		              this._ifPopup(function () {

		                  var popupCloseProxy = function popupCloseProxy(e) {
		                      return _this2.closeHandler(e);
		                  };

		                  addEvent(window, EVENT_CLICK_OUTSIDE, popupCloseProxy);
		                  addEvent(window, EVENT_TAB_MOVE, popupCloseProxy);
		                  onKey(events, dom, ['Esc', 'Escape'], popupCloseProxy);

		                  var timeKeeper = function timeKeeper(e) {
		                      _this2.__containedEvent = e.timeStamp;
		                  };
		                  addEvent(dom, EVENT_CLICK_OUTSIDE, timeKeeper);

		                  addEvent(dom, EVENT_TAB_MOVE, timeKeeper);

		                  addEvent(_this2._domCancel, 'click', popupCloseProxy);
		              });

		              var onDoneProxy = function onDoneProxy(e) {
		                  _this2._ifPopup(function () {
		                      return _this2.closeHandler(e);
		                  });
		                  if (_this2.onDone) {
		                      _this2.onDone(_this2.colour);
		                  }
		              };
		              addEvent(this._domOkay, 'click', onDoneProxy);
		              onKey(events, dom, ['Enter'], onDoneProxy);
		          }
		      }, {
		          key: '_setPosition',
		          value: function _setPosition() {
		              var parent = this.settings.parent,
		                  elm = this.domElement;

		              if (parent !== elm.parentNode) {
		                  parent.appendChild(elm);
		              }

		              this._ifPopup(function (popup) {

		                  if (getComputedStyle(parent).position === 'static') {
		                      parent.style.position = 'relative';
		                  }

		                  var cssClass = popup === true ? 'popup_right' : 'popup_' + popup;

		                  ['popup_top', 'popup_bottom', 'popup_left', 'popup_right'].forEach(function (c) {

		                      if (c === cssClass) {
		                          elm.classList.add(c);
		                      } else {
		                          elm.classList.remove(c);
		                      }
		                  });

		                  elm.classList.add(cssClass);
		              });
		          }
		      }, {
		          key: '_setHSLA',
		          value: function _setHSLA(h, s, l, a, flags) {
		              flags = flags || {};

		              var col = this.colour,
		                  hsla = col.hsla;

		              [h, s, l, a].forEach(function (x, i) {
		                  if (x || x === 0) {
		                      hsla[i] = x;
		                  }
		              });
		              col.hsla = hsla;

		              this._updateUI(flags);

		              if (this.onChange && !flags.silent) {
		                  this.onChange(col);
		              }
		          }
		      }, {
		          key: '_updateUI',
		          value: function _updateUI(flags) {
		              if (!this.domElement) {
		                  return;
		              }
		              flags = flags || {};

		              var col = this.colour,
		                  hsl = col.hsla,
		                  cssHue = 'hsl(' + hsl[0] * HUES + ', 100%, 50%)',
		                  cssHSL = col.hslString,
		                  cssHSLA = col.hslaString;

		              var uiH = this._domH,
		                  uiSL = this._domSL,
		                  uiA = this._domA,
		                  thumbH = $('.picker_selector', uiH),
		                  thumbSL = $('.picker_selector', uiSL),
		                  thumbA = $('.picker_selector', uiA);

		              function posX(parent, child, relX) {
		                  child.style.left = relX * 100 + '%';
		              }
		              function posY(parent, child, relY) {
		                  child.style.top = relY * 100 + '%';
		              }

		              posX(uiH, thumbH, hsl[0]);

		              this._domSL.style.backgroundColor = this._domH.style.color = cssHue;

		              posX(uiSL, thumbSL, hsl[1]);
		              posY(uiSL, thumbSL, 1 - hsl[2]);

		              uiSL.style.color = cssHSL;

		              posY(uiA, thumbA, 1 - hsl[3]);

		              var opaque = cssHSL,
		                  transp = opaque.replace('hsl', 'hsla').replace(')', ', 0)'),
		                  bg = 'linear-gradient(' + [opaque, transp] + ')';

		              this._domA.style.background = bg + ', ' + BG_TRANSP;

		              if (!flags.fromEditor) {
		                  var format = this.settings.editorFormat,
		                      alpha = this.settings.alpha;

		                  var value = void 0;
		                  switch (format) {
		                      case 'rgb':
		                          value = col.printRGB(alpha);break;
		                      case 'hsl':
		                          value = col.printHSL(alpha);break;
		                      default:
		                          value = col.printHex(alpha);
		                  }
		                  this._domEdit.value = value;
		              }

		              this._domSample.style.color = cssHSLA;
		          }
		      }, {
		          key: '_ifPopup',
		          value: function _ifPopup(actionIf, actionElse) {
		              if (this.settings.parent && this.settings.popup) {
		                  actionIf && actionIf(this.settings.popup);
		              } else {
		                  actionElse && actionElse();
		              }
		          }
		      }, {
		          key: '_toggleDOM',
		          value: function _toggleDOM(toVisible) {
		              var dom = this.domElement;
		              if (!dom) {
		                  return false;
		              }

		              var displayStyle = toVisible ? '' : 'none',
		                  toggle = dom.style.display !== displayStyle;

		              if (toggle) {
		                  dom.style.display = displayStyle;
		              }
		              return toggle;
		          }
		      }]);
		      return Picker;
		  }();

		  {
		      var style = document.createElement('style');
		      style.textContent = '.picker_wrapper.no_alpha .picker_alpha{display:none}.picker_wrapper.no_editor .picker_editor{position:absolute;z-index:-1;opacity:0}.picker_wrapper.no_cancel .picker_cancel{display:none}.layout_default.picker_wrapper{display:flex;flex-flow:row wrap;justify-content:space-between;align-items:stretch;font-size:10px;width:25em;padding:.5em}.layout_default.picker_wrapper input,.layout_default.picker_wrapper button{font-size:1rem}.layout_default.picker_wrapper>*{margin:.5em}.layout_default.picker_wrapper::before{content:"";display:block;width:100%;height:0;order:1}.layout_default .picker_slider,.layout_default .picker_selector{padding:1em}.layout_default .picker_hue{width:100%}.layout_default .picker_sl{flex:1 1 auto}.layout_default .picker_sl::before{content:"";display:block;padding-bottom:100%}.layout_default .picker_editor{order:1;width:6.5rem}.layout_default .picker_editor input{width:100%;height:100%}.layout_default .picker_sample{order:1;flex:1 1 auto}.layout_default .picker_done,.layout_default .picker_cancel{order:1}.picker_wrapper{box-sizing:border-box;background:#f2f2f2;box-shadow:0 0 0 1px silver;cursor:default;font-family:sans-serif;color:#444;pointer-events:auto}.picker_wrapper:focus{outline:none}.picker_wrapper button,.picker_wrapper input{box-sizing:border-box;border:none;box-shadow:0 0 0 1px silver;outline:none}.picker_wrapper button:focus,.picker_wrapper button:active,.picker_wrapper input:focus,.picker_wrapper input:active{box-shadow:0 0 2px 1px #1e90ff}.picker_wrapper button{padding:.4em .6em;cursor:pointer;background-color:#f5f5f5;background-image:linear-gradient(0deg, gainsboro, transparent)}.picker_wrapper button:active{background-image:linear-gradient(0deg, transparent, gainsboro)}.picker_wrapper button:hover{background-color:#fff}.picker_selector{position:absolute;z-index:1;display:block;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);border:2px solid #fff;border-radius:100%;box-shadow:0 0 3px 1px #67b9ff;background:currentColor;cursor:pointer}.picker_slider .picker_selector{border-radius:2px}.picker_hue{position:relative;background-image:linear-gradient(90deg, red, yellow, lime, cyan, blue, magenta, red);box-shadow:0 0 0 1px silver}.picker_sl{position:relative;box-shadow:0 0 0 1px silver;background-image:linear-gradient(180deg, white, rgba(255, 255, 255, 0) 50%),linear-gradient(0deg, black, rgba(0, 0, 0, 0) 50%),linear-gradient(90deg, #808080, rgba(128, 128, 128, 0))}.picker_alpha,.picker_sample{position:relative;background:linear-gradient(45deg, lightgrey 25%, transparent 25%, transparent 75%, lightgrey 75%) 0 0/2em 2em,linear-gradient(45deg, lightgrey 25%, white 25%, white 75%, lightgrey 75%) 1em 1em/2em 2em;box-shadow:0 0 0 1px silver}.picker_alpha .picker_selector,.picker_sample .picker_selector{background:none}.picker_editor input{font-family:monospace;padding:.2em .4em}.picker_sample::before{content:"";position:absolute;display:block;width:100%;height:100%;background:currentColor}.picker_arrow{position:absolute;z-index:-1}.picker_wrapper.popup{position:absolute;z-index:2;margin:1.5em}.picker_wrapper.popup,.picker_wrapper.popup .picker_arrow::before,.picker_wrapper.popup .picker_arrow::after{background:#f2f2f2;box-shadow:0 0 10px 1px rgba(0,0,0,.4)}.picker_wrapper.popup .picker_arrow{width:3em;height:3em;margin:0}.picker_wrapper.popup .picker_arrow::before,.picker_wrapper.popup .picker_arrow::after{content:"";display:block;position:absolute;top:0;left:0;z-index:-99}.picker_wrapper.popup .picker_arrow::before{width:100%;height:100%;-webkit-transform:skew(45deg);transform:skew(45deg);-webkit-transform-origin:0 100%;transform-origin:0 100%}.picker_wrapper.popup .picker_arrow::after{width:150%;height:150%;box-shadow:none}.popup.popup_top{bottom:100%;left:0}.popup.popup_top .picker_arrow{bottom:0;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.popup.popup_bottom{top:100%;left:0}.popup.popup_bottom .picker_arrow{top:0;left:0;-webkit-transform:rotate(90deg) scale(1, -1);transform:rotate(90deg) scale(1, -1)}.popup.popup_left{top:0;right:100%}.popup.popup_left .picker_arrow{top:0;right:0;-webkit-transform:scale(-1, 1);transform:scale(-1, 1)}.popup.popup_right{top:0;left:100%}.popup.popup_right .picker_arrow{top:0;left:0}';
		      document.documentElement.firstElementChild.appendChild(style);

		      Picker.StyleElement = style;
		  }

		  return Picker;

		})); 
	} (vanillaPicker$1));
	return vanillaPicker$1.exports;
}

var vanillaPickerExports = requireVanillaPicker();
var Picker = /*@__PURE__*/getDefaultExportFromCjs(vanillaPickerExports);

const sallaColorPickerCss = "";

const SallaColorPicker = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.colorChanged = createEvent(this, "colorChanged");
        this.invalidInput = createEvent(this, "invalidInput");
        this.submitted = createEvent(this, "submitted");
        this.popupOpened = createEvent(this, "popupOpened");
        this.popupClosed = createEvent(this, "popupClosed");
        /**
         * File input name for the native formData
         */
        this.name = 'color';
        /**
         * Set if the color picker input is required or not
         */
        this.required = false;
        /**
         * How to display the selected color in the text field
         * (the text field still supports input in any format).
         */
        this.format = 'hex';
        /**
         * Whether to have a "Cancel" button which closes the popup.
         */
        this.showCancelButton = false;
        /**
         * Whether to show a text field for color value editing.
         */
        this.showTextField = true;
        /**
         * Whether to enable adjusting the alpha channel.
         */
        this.enableAlpha = false;
    }
    colorChangeHandler(color) {
        this.colorInput.value = color.hex;
        this.colorChanged.emit(color);
    }
    submittedHandler(color) {
        this.setColorValue(color.rgbaString, true);
        this.canvas.style.backgroundColor = color.rgbString;
        this.colorInput.value = color.hex;
        this.colorInput.dispatchEvent(new window.Event('change', { bubbles: true }));
        this.submitted.emit(color);
    }
    popupOpenedHandler(color) {
        this.setPopInPosition();
        this.popupOpened.emit(color);
    }
    popupClosedHandler(color) {
        this.popupClosed.emit(color);
    }
    /** Methods */
    /**
     * Set the picker options.
     *
     * (Usually a new .parent and .color).
     * @param {Object} options
     */
    async setPickerOption(options) {
        this.picker.setOptions(options);
    }
    /**
     * Move the popup to a different parent, optionally opening it at the same time.
     *
     * (Usually a new .parent and .color).
     * @param {Options} option
     *
     * Whether to open the popup immediately.
     * @param {boolean} openImmediately
     */
    async movePopUp(options, openImmediately) {
        this.picker.movePopup(options, openImmediately);
    }
    /**
     * Set/initialize the picker's color.
     *
     * Color name, RGBA/HSLA/HEX string, or RGBA array.
     * @param {string} color
     *
     * If true, won't trigger onChange.
     * @param {boolean} triggerEvent
     */
    async setColorValue(color, triggerEvent) {
        this.picker.setColor(color, triggerEvent);
    }
    /**
     * Show/open the picker.
     */
    async openPicker() {
        this.picker.show();
    }
    /**
     * Close/Hide the picker.
     */
    async closePicker() {
        this.picker.hide();
    }
    /**
     * Release all resources used by this picker instance.
     */
    async destroyPicker() {
        this.picker.destroy();
    }
    componentWillLoad() {
        salla.onReady(() => {
            this.color = this.color ? this.color : salla.config.get('theme.color.primary', '#5dd5c4');
        });
    }
    setPopInPosition() {
        const popup = this.host.querySelector('.picker_wrapper');
        const widgetPosition = this.host.querySelector('.s-color-picker-widget').getBoundingClientRect();
        const widgetToWindowEq = window.innerWidth / 2 - widgetPosition.width / 2;
        const widgetInLeft = widgetToWindowEq > widgetPosition.x;
        const widgetInRight = widgetToWindowEq < widgetPosition.x;
        const widgetInCenter = widgetToWindowEq === widgetPosition.x;
        const isMobile = window.innerWidth < 768;
        if (isMobile && widgetInLeft) {
            popup.style.left = '0';
        }
        if (isMobile && (widgetInRight)) {
            popup.style.left = 'auto';
        }
        if (!isMobile || (isMobile && ((!widgetInRight && !widgetInLeft) || widgetInCenter))) {
            popup.style.left = `-95px`;
        }
    }
    initColorPicker() {
        this.picker = new Picker({
            parent: this.host,
            color: this.color,
            popup: 'bottom',
            // template: string,
            // layout: string,
            alpha: this.enableAlpha,
            editor: this.showTextField,
            editorFormat: this.format,
            cancelButton: this.showCancelButton,
            onChange: (color) => this.colorChangeHandler(color),
            onDone: (color) => this.submittedHandler(color),
            onOpen: (color) => this.popupOpenedHandler(color),
            onClose: (color) => this.popupClosedHandler(color),
        });
    }
    render() {
        return (h(Host, { key: '692d43f617dbaa05e170c32c725eb4adcc01ec78', class: "s-color-picker-main" }, h("slot", { key: '33166575c005f01e1557ac665749e206f05cc499', name: "widget" }, h("div", { key: '60bf746f0e2b336da837d62e962fefeaf63a9a2c', class: "s-color-picker-widget" }, h("div", { key: '62c56bc83a9315052ac3c21841f284b416407945', class: "s-color-picker-widget-canvas", ref: dv => this.canvas = dv }), h("span", { key: '3f1869950f457659a3c52d8148fd386ce1171caa', innerHTML: ArrowDownIcon }))), h("input", { key: '7fa3f08df14f03e9a4cf33e41eeb9f34b1a9dbfe', class: "s-hidden", name: this.name, required: this.required, value: this.color, ref: color => this.colorInput = color })));
    }
    componentDidLoad() {
        this.canvas.style.backgroundColor = this.color;
        this.initColorPicker();
        this.colorInput.addEventListener('invalid', e => {
            this.invalidInput.emit(e);
        });
        this.colorInput.addEventListener('input', () => {
            this.colorInput.setCustomValidity('');
            this.colorInput.reportValidity();
        });
    }
    get host() { return getElement(this); }
};
SallaColorPicker.style = sallaColorPickerCss;

const sallaCommentFormCss = ":host{display:block}";

const SallaCommentForm = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.placeholder = salla.lang.get('blocks.comments.placeholder');
        this.submitText = salla.lang.get('blocks.comments.submit');
        salla.lang.onLoaded(() => {
            this.placeholder = salla.lang.get('blocks.comments.placeholder');
            this.submitText = salla.lang.get('blocks.comments.submit');
        });
        salla.onReady(() => {
            this.canComment = salla.config.get('user.can_comment');
            this.itemId = salla.config.get('page.id');
            this.type = salla.url.is_page('page-single') ? 'page' : salla.url.is_page('blog.single') ? 'blog' : 'product';
        });
    }
    submit() {
        if (!this.commentForm.reportValidity()) {
            salla.log('CommentForm:: validation error!');
            return;
        }
        this.submitBtn.load()
            .then(() => salla.comment.add({ id: this.itemId, comment: this.commentField.value, type: this.type }))
            .finally(() => this.submitBtn.stop);
    }
    render() {
        return (h(Host, { key: '305789ae94c288c8ca485ab10ae87a71f31d1042' }, !!this.canComment ? h("form", { ref: frm => this.commentForm = frm }, h("div", { class: "s-comment-form-wrapper" }, this.showAvatar ?
            h("img", { class: "s-comment-form-avatar", src: salla.config.get('user.avatar'), alt: "user avatar" }) : '', h("div", { class: "s-comment-form-content" }, h("textarea", { cols: 30, rows: 5, minlength: "4", maxlength: "500", ref: field => this.commentField = field, placeholder: this.placeholder, class: "s-comment-form-input", required: true }), h("br", null), h("div", { class: "s-comment-form-action" }, h("salla-button", { ref: btn => this.submitBtn = btn, "loader-position": 'center', onClick: () => this.submit() }, this.submitText))))) : ''));
    }
};
SallaCommentForm.style = sallaCommentFormCss;

var Reply = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>reply</title>
<path d="M20 14.667h-12.609l9.401-6.927c0.592-0.436 0.72-1.271 0.283-1.863-0.439-0.595-1.273-0.72-1.864-0.283l-12.667 9.333c-0.343 0.251-0.544 0.649-0.544 1.072s0.201 0.821 0.543 1.073l12.667 9.333c0.237 0.176 0.515 0.26 0.789 0.26 0.409 0 0.813-0.188 1.075-0.543 0.437-0.592 0.309-1.427-0.283-1.863l-9.4-6.928h12.609c4.412 0 8 3.588 8 8 0 0.737 0.597 1.333 1.333 1.333s1.333-0.596 1.333-1.333c0-5.881-4.785-10.667-10.667-10.667z"></path>
</svg>
`;

var ThumbsUp = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>thumbs-up</title>
<path d="M26.667 10.667h-8.261l1.279-3.38c0.723-1.911 0.087-4.051-1.549-5.203-0.909-0.639-2.004-0.881-3.085-0.684-1.101 0.203-2.061 0.837-2.703 1.787l-5.452 8.067c-0.148 0.22-0.228 0.48-0.228 0.747v12c0 3.676 2.991 6.667 6.667 6.667h8.688c2.535 0 4.817-1.407 5.955-3.671l2.548-5.063c0.093-0.187 0.143-0.392 0.143-0.6v-6.667c0-2.205-1.795-4-4-4zM28 21.017l-2.405 4.78c-0.683 1.359-2.052 2.203-3.573 2.203h-8.688c-2.205 0-4-1.795-4-4v-11.592l5.223-7.728c0.237-0.352 0.584-0.585 0.975-0.657 0.367-0.067 0.749 0.017 1.068 0.241 0.631 0.444 0.879 1.317 0.591 2.079l-1.963 5.185c-0.156 0.409-0.099 0.869 0.149 1.229s0.66 0.576 1.099 0.576h10.192c0.735 0 1.333 0.599 1.333 1.333zM2.667 10.667c-0.736 0-1.333 0.597-1.333 1.333v16c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-16c0-0.736-0.597-1.333-1.333-1.333z"></path>
</svg>
`;

const sallaCommentsCss$1 = ":host{display:block}";

const SallaCommentItem = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        // Translations
        this.has_bought_trans = salla.lang.get('blocks.comments.has_bought');
        this.rated_trans = salla.lang.get('pages.rating.rated');
        this.waiting_approval_trans = salla.lang.get('blocks.comments.waiting_approval');
        this.has_order_trans = salla.lang.get('blocks.comments.has_order');
        this.allowLikes = salla.config.get('store.settings.rating.allow_likes');
        this.allowAttachImages = salla.config.get('store.settings.rating.allow_attach_images');
        this.helpfulLabel = salla.lang.getWithDefault('blocks.comments.helpful', 'ŸÖŸÅŸäÿØ');
        this.likesCount = 0;
        this.likedComments = [];
        salla.lang.onLoaded(() => {
            const setNestedAsync = (lang, key, value) => {
                return new Promise((resolve) => {
                    salla.helpers.setNested(salla.lang.messages[lang], key, value);
                    resolve(true);
                });
            };
            const setTranslations = async () => {
                await setNestedAsync('ar.trans', 'blocks.comments.helpful', 'ŸÖŸÅŸäÿØ');
                await setNestedAsync('en.trans', 'blocks.comments.helpful', 'Helpful');
                this.helpfulLabel = salla.lang.getWithDefault('blocks.comments.helpful', 'ŸÖŸÅŸäÿØ');
            };
            this.has_bought_trans = salla.lang.get('blocks.comments.has_bought');
            this.rated_trans = salla.lang.get('pages.rating.rated');
            this.waiting_approval_trans = salla.lang.get('blocks.comments.waiting_approval');
            this.has_order_trans = salla.lang.get('blocks.comments.has_order');
            setTranslations();
        });
    }
    componentDidLoad() {
        this.likesCount = this.comment.likes_count;
        try {
            this.likedComments = JSON.parse(localStorage.getItem('liked_comments') || '[]');
            if (this.likedComments.includes(this.comment.id)) {
                this.likeBtn.classList.add('liked');
                this.likeBtn.fill = "solid";
            }
        }
        catch {
            salla.log('Bad json for liked_comments');
        }
    }
    getReplies() {
        return Array.isArray(this.comment.replies) ? this.comment.replies : [this.comment.replies];
    }
    getDate(dateString) {
        const [datePart] = dateString.split(' ');
        const [year, month, day] = datePart.split('-');
        const formattedDate = `${parseInt(day, 10)}/${parseInt(month, 10)}/${parseInt(year, 10)}`;
        return formattedDate;
    }
    getTime(dateString) {
        const [, timePart] = dateString.split(' ');
        const [hours, minutes] = timePart.split(':');
        const formattedTime = `${parseInt(hours, 10)}:${parseInt(minutes, 10)}`;
        return formattedTime;
    }
    async toggleLike() {
        if (salla.config.isGuest()) {
            return salla.notify.error(salla.lang.get('common.messages.must_login'));
        }
        this.likedComments = JSON.parse(localStorage.getItem('liked_comments') || '[]');
        const isLiked = this.likedComments.includes(this.comment.id);
        try {
            const endpoint = isLiked ? `rating/${this.comment.id}/unlike` : `rating/${this.comment.id}/like`;
            const res = await salla.api.request(endpoint, '', 'put');
            salla.log(res.message);
            if (isLiked) {
                this.likeBtn.classList.remove('liked');
                this.likeBtn.fill = 'outline';
                this.updateLikedComments(this.comment.id, false);
                this.likesCount--;
            }
            else {
                this.likeBtn.classList.add('liked');
                this.likeBtn.fill = 'solid';
                this.updateLikedComments(this.comment.id, true);
                this.likesCount++;
            }
        }
        catch (e) {
            if (e.response.status == 409) {
                if (this.likeBtn.classList.contains('liked')) {
                    this.likeBtn.fill = 'outline';
                    this.likeBtn.classList.remove('liked');
                    this.updateLikedComments(this.comment.id, false);
                    this.likesCount--;
                }
                else {
                    this.likeBtn.fill = 'solid';
                    this.likeBtn.classList.add('liked');
                    salla.logger.warn('Like already exists');
                    this.updateLikedComments(this.comment.id, true);
                }
            }
        }
    }
    updateLikedComments(commentId, add) {
        this.likedComments = JSON.parse(localStorage.getItem('liked_comments') || '[]');
        if (add) {
            if (!this.likedComments.includes(commentId)) {
                this.likedComments.push(commentId);
            }
        }
        else {
            this.likedComments = this.likedComments.filter(id => id !== commentId);
        }
        localStorage.setItem('liked_comments', JSON.stringify(this.likedComments));
    }
    render() {
        let isAdmin = this.comment.type == 'admin';
        return (h(Host, { key: '98e314383c34c566ab9e05efeebae51e5b694681', class: isAdmin ? 's-comments-item-admin' : 's-comments-item' }, h("div", { key: 'a704f11fd7f4bc227eb2f986360afb3c2875c6ab', class: { "s-comments-item-wrapper": !isAdmin, "s-comments-item-admin-wrapper": isAdmin }, id: `s-comments-item-${this.comment.id}` }, h("div", { key: '8b0c0a9422003621eb5d8d6a54893fc0a18d4cc9', class: "s-comments-item-inner s-comments-flex-1" }, isAdmin && h("span", { key: '7f421290726abe2391da37178e01265badf4fd08', class: "s-comments-item-reply-icon", innerHTML: Reply }), h("div", { key: '61ef5759d54603f1b886de9126ab771437fe2e98', class: "s-comments-item-avatar" }, h("img", { key: '67b668cc17d3d0747cd128efa961540858750fbf', "data-src": this.comment?.avatar, alt: this.comment?.name, src: this.comment?.avatar, class: "s-comments-item-avatar-img lazy" })), h("div", { key: 'fc42c8a69538f09f8f3f9c0e5555d39b9dc4a6ac', class: "s-comments-flex-1" }, h("div", { key: '7b2b3de758fed9ae73e0032b6cf895ce1df99883', class: "s-comments-item-user-wrapper" }, h("div", { key: '1d4187d935e209354587a900f912a4eb19b066df', class: "s-comments-item-user-info" }, h("h3", { key: '2a45f7ad245c41a2fd5a69bd909e093effed8453', class: "s-comments-item-user-info-name" }, this.comment?.name), (this.comment.has_order || !!this.comment.rating) && !this.comment.is_pending && !this.hideBought ?
            h("div", { class: "s-comments-flex" }, this.comment.has_order ?
                [h("span", { class: "s-comments-item-has-order-check-icon", innerHTML: IconVerified }), h("span", { class: "s-comments-item-has-order-check-text" }, this.has_bought_trans, " ", this.comment.rating ? ', ' : '')] : null, !!this.comment.rating ?
                h("span", { class: "s-comments-item-rated-widget" }, this.rated_trans) : null)
            : null), h("p", { key: 'c934abc4f8dd94bc349d85d00a5984aef672d9d9', class: "s-comments-item-timestamp s-ltr" }, " ", this.getDate(this.comment.created_at?.date), " ", h("span", { key: 'acef6d6af07b12501a61d074ad566692bb02456a', class: "s-comments-item-time" }, " - ", this.getTime(this.comment.created_at?.date), " ")), !!this.comment.rating || !!this.comment.stars ?
            h("salla-rating-stars", { size: "mini", class: "s-comments-item-stars", value: this.comment.rating || this.comment.stars })
            : null), h("div", { key: '9bedec8066878f113623e9ab27c203836eea2db5', class: "s-comments-item-content" }, h("p", { key: '0f8b1bf62ac5afc1449b160884945003b70e55f0', innerHTML: this.comment.content }), this.allowAttachImages && h("div", { key: 'df920f8e2758aedc313b4502f554157fb216c15d', class: "s-comments-item-images" }, this.comment.images.map((image, index) => (h("img", { key: index, src: image, alt: "", onClick: () => this.modal.open() }))), h("salla-modal", { key: '0743d9159e0cf4061b1969953f58fdebf49ee9e2', ref: modal => this.modal = modal, width: "sm" }, h("salla-slider", { key: '00a15b0dca213ddf64f3346da6849ce0dde7f638', id: `s-comments-item-${this.comment.id}-images`, class: "s-comments-item-images-slider", type: "thumbs", "auto-height": true, showControls: this.comment.images.length > 1 ? true : false, "show-thumbs-controls": "false" }, h("div", { key: '21e593664598eab16e56990c43aba10dcc526752', slot: 'items' }, this.comment.images.map((image, index) => (h("img", { key: index, src: image, alt: "" })))), h("div", { key: '8998e861f37fc30c488d60b016c68db0b09483ee', slot: "thumbs" }, this.comment.images.map((image, index) => (h("div", { class: "s-comments-item-images-slider-thumb" }, h("img", { key: index, src: image, alt: "" })))))))), this.allowLikes && !isAdmin && salla.url.is_page('product.single') ? h("salla-button", { ref: el => this.likeBtn = el, class: `s-comments-item-like-btn ${this.likedComments.includes(this.comment.id) ? 'liked' : ''}`, loaderPosition: 'center', fill: 'outline', size: 'small', onClick: () => this.toggleLike() }, h("span", null, this.helpfulLabel, " ", this.likesCount > 0 ? `(${this.likesCount})` : ''), h("span", { innerHTML: ThumbsUp })) : '', this.comment.is_pending ?
            h("span", { class: "s-comments-item-pending-text" }, this.waiting_approval_trans) : null))), !!this.getReplies().length && !isAdmin ?
            this.getReplies().map((reply) => {
                return h("div", null, h("salla-comment-item", { comment: reply }));
            }) : null)));
    }
    get host() { return getElement(this); }
};
SallaCommentItem.style = sallaCommentsCss$1;

var CommentType;
(function (CommentType) {
    CommentType["PAGE"] = "page";
    CommentType["PRODUCT"] = "product";
    CommentType["BLOG"] = "blog";
})(CommentType || (CommentType = {}));

var ChatBubbles = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>chat-bubbles</title>
<path d="M15.333 17.333c4.779 0 8.667-3.888 8.667-8.667s-3.888-8.667-8.667-8.667h-6.667c-4.779 0-8.667 3.888-8.667 8.667 0 2.985 1.513 5.712 4 7.297v4.703c0 0.497 0.277 0.953 0.717 1.183 0.195 0.1 0.405 0.151 0.616 0.151 0.269 0 0.536-0.081 0.764-0.241l6.323-4.425zM11.236 14.908l-4.569 3.199v-2.913c0-0.5-0.28-0.959-0.725-1.187-2.020-1.035-3.275-3.080-3.275-5.34 0-3.308 2.692-6 6-6h6.667c3.308 0 6 2.692 6 6s-2.692 6-6 6h-3.333c-0.273 0-0.54 0.084-0.764 0.241zM29.196 12.964c-0.543-0.5-1.388-0.464-1.884 0.077-0.5 0.541-0.465 1.385 0.077 1.884 1.253 1.156 1.944 2.72 1.944 4.408 0 2.26-1.255 4.305-3.275 5.339-0.445 0.228-0.725 0.687-0.725 1.188v2.572l-5.441-2.939c-0.195-0.104-0.412-0.16-0.633-0.16h-2.592c-1.688 0-3.309-0.724-4.451-1.988-0.492-0.545-1.335-0.591-1.883-0.096-0.547 0.493-0.589 1.336-0.096 1.883 1.644 1.823 3.988 2.868 6.429 2.868h2.255l7.111 3.84c0.199 0.107 0.417 0.16 0.635 0.16 0.236 0 0.472-0.063 0.683-0.188 0.404-0.241 0.651-0.676 0.651-1.145v-4.036c2.487-1.585 4-4.311 4-7.297 0-2.407-1.023-4.727-2.804-6.369z"></path>
</svg>
`;

const sallaCommentsCss = ":host{display:block}";

const SallaComments = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Comment Type
         */
        this.type = CommentType.PAGE;
        /**
         * Show or hide avatar
         */
        this.showFormAvatar = false;
        /**
       * Hide Bought
       */
        this.hideBought = false;
        /**
         * Determines if the comments are testimonials
         */
        this.testimonials = false;
        // Translations
        this.noComments = salla.lang.get('blocks.comments.no_comments');
        this.comment_title = salla.lang.get('blocks.comments.title');
        this.comment_name = salla.lang.get('blocks.comments.comment');
        this.showRatingSummary = salla.config.get('store.settings.rating.show_rating_summary');
        this.allowLikes = salla.config.get('store.settings.rating.allow_likes');
        salla.onReady(() => {
            this.allowLikes = salla.config.get('store.settings.rating.allow_likes');
            this.showRatingSummary = salla.config.get('store.settings.rating.show_rating_summary');
        });
        salla.lang.onLoaded(() => {
            this.comment_title = salla.lang.get('blocks.comments.title');
            this.comment_name = salla.lang.get('blocks.comments.comment');
            this.noComments = salla.lang.get('pages.rating.no_ratings');
            const setNestedAsync = (lang, key, value) => {
                return new Promise((resolve) => {
                    salla.helpers.setNested(salla.lang.messages[lang], key, value);
                    resolve(true);
                });
            };
            const setTranslations = async () => {
                await setNestedAsync('ar.trans', 'blocks.comments.most_helpful', 'ÿßŸÑÿ£ŸÉÿ´ÿ± ÿ•ŸÅÿßÿØÿ©');
                await setNestedAsync('en.trans', 'blocks.comments.most_helpful', 'Most helpful');
                this.mostHelpfulLabel = salla.lang.get('blocks.comments.most_helpful');
                this.comment_title = salla.lang.get('blocks.comments.title');
                this.comment_name = salla.lang.get('blocks.comments.comment');
                this.noComments = salla.lang.get('pages.rating.no_ratings');
            };
            setTranslations();
        });
    }
    // TOOD: it's a good idea to move this into lang.js
    // Pluralize a string based on the count
    pluralize(phrases, count) {
        const options = phrases.split('|');
        const conditions = [
            { condition: count === 0, index: 0 },
            { condition: count === 1, index: 1 },
            { condition: count === 2, index: 2 },
            { condition: count > 2 && count <= 10, index: 3 },
            { condition: count >= 11, index: 4 }
        ];
        const { index } = conditions.find(({ condition }) => condition) || { index: options.length - 1 };
        const selectedOption = options[index];
        return selectedOption.replace(':count', salla.helpers.number(count.toString()))
            .replace(/\{[0-9]+\}/g, '')
            .replace(/\[\d+,\d+\]|\[11,\*\]/g, '');
    }
    wrapConsoleError() {
        if (Salla.infiniteScroll.errorWrapped) {
            return;
        }
        (() => {
            const orig = console.error.bind(console);
            console.error = (...args) => {
                const msg = args[0];
                // only rewrite the noisy one
                if (typeof msg === 'string' && msg.toLowerCase().replace(/\s/g, '').includes('infinitescroll')) {
                    return console.log(...args); // downgrade to log
                }
                return orig(...args); // keep real errors
            };
        })();
        Salla.infiniteScroll.errorWrapped = true;
    }
    // Initiate infinite scroll
    initiateInfiniteScroll() {
        if (!this.wrapper) {
            console.error('Wrapper is undefined. Cannot initiate infinite scroll.');
            return;
        }
        this.wrapConsoleError();
        this.infiniteScroll = salla.infiniteScroll.initiate(this.wrapper, this.wrapper, {
            path: () => this.nextPage,
            history: false,
            nextPage: this.nextPage,
            scrollThreshold: false,
        }, true);
        this.infiniteScroll?.on('request', _response => {
            this.loading();
        });
        this.infiniteScroll?.on('load', response => {
            this.pagination = response.pagination;
            this.nextPage = typeof response.pagination.links === 'object' && !!response.pagination.links.next ? response.pagination.links.next : null;
            for (const card of this.handleResponse(response)) {
                this.wrapper.append(card);
            }
            const items = this.host.querySelectorAll('salla-comment-item:not(.animated):not(.s-comments-item-admin)');
            this.animateItems(items);
            this.loading(false);
        });
        this.infiniteScroll?.on('error', (e) => {
            salla.console.error('Error loading more comments:', e);
        });
    }
    // Show/hide loading
    loading(isLoading = true) {
        const btnText = this.status?.querySelector('.s-button-text');
        if (btnText) {
            Helper.toggleElementClassIf(btnText, 's-button-hide', 's-button-show', () => isLoading);
            this.btnLoader.style.display = isLoading ? 'inherit' : 'none';
        }
    }
    // Animate newly added items
    animateItems(items) {
        anime({
            targets: items,
            opacity: [0, 1],
            duration: 1200,
            translateY: [20, 0],
            delay: (_el, i) => i * 100,
            easing: 'easeOutExpo',
            complete: (_anim) => {
                for (const item of items) {
                    item.classList.add('animated');
                }
            }
        });
    }
    /**
     * Reloads the comments data from the server
     */
    async reload() {
        this.showPlaceholder = false;
        if (this.wrapper) {
            this.wrapper.innerHTML = "";
            const loading = document.createElement('salla-loading');
            this.wrapper.append(loading);
        }
        this.nextPage = null;
        this.loadInitialData();
    }
    // Get comment item HTML
    getCommentHTML(comment) {
        const commentItem = document.createElement('salla-comment-item');
        commentItem.comment = comment;
        commentItem.hideBought = this.hideBought;
        return commentItem;
    }
    // Parse response and return an array of comment items to be appended to the wrapper
    handleResponse(response) {
        return response.data?.map(comment => this.getCommentHTML(comment)) || [];
    }
    componentWillLoad() {
        return salla.onReady()
            .then(() => {
            this.showRatingSummary = salla.config.get('store.settings.rating.show_rating_summary');
        })
            .then(() => this.loading())
            .then(() => {
            this.hideTitle = this.hideTitle || this.testimonials;
            this.hideForm = this.hideForm || this.testimonials;
            return this.loadInitialData();
        });
    }
    // Load initial data
    async loadInitialData() {
        try {
            let resp = { data: [], pagination: {} };
            const searchParams = new URLSearchParams(window.location.search);
            if (searchParams.has('sort')) {
                this.sort = searchParams.get('sort');
            }
            if (this.testimonials) {
                const params = {
                    sort: this.sort,
                    type: "store"
                };
                resp = await salla.api.request('reviews', { params }, 'get');
            }
            else {
                // Ensure sort is passed for regular comments as well
                resp = await salla.api.comment.getComments(this.type, this.itemId, 1, 5, this.sort);
            }
            if (!resp.data || !resp.data.length) {
                this.showPlaceholder = false;
                this.loading(false);
                return;
            }
            if (this.wrapper) {
                this.wrapper.innerHTML = "";
            }
            this.comments = resp.data;
            this.pagination = resp.pagination;
            this.total = resp.pagination.total;
            this.nextPage = typeof resp.pagination.links === 'object' && !!resp.pagination.links.next ? resp.pagination.links.next : null;
            // Preserve sort param in next page URL for infinite scroll
            if (this.nextPage && this.sort) {
                try {
                    const url = new URL(this.nextPage, window.location.origin);
                    if (!url.searchParams.get('sort')) {
                        url.searchParams.set('sort', this.sort);
                        this.nextPage = url.toString();
                    }
                }
                catch (_e) {
                    // fallback for relative next links
                    const hasQuery = this.nextPage.includes('?');
                    const hasSort = /[?&]sort=/.test(this.nextPage);
                    if (!hasSort) {
                        this.nextPage = this.nextPage + (hasQuery ? '&' : '?') + `sort=${this.sort}`;
                    }
                }
            }
            setTimeout(() => {
                for (const card of this.handleResponse(resp)) {
                    this.wrapper.append(card);
                }
                this.initiateInfiniteScroll(); // Initiate infinite scroll after the initial data is loaded
                const items = this.wrapper.querySelectorAll('salla-comment-item:not(.animated)');
                this.animateItems(items);
            }, 100);
        }
        catch (error) {
            console.error('Error loading initial data:', error);
            this.showPlaceholder = true;
            this.loading(false);
        }
    }
    // Get next page
    async loadMore() {
        this.infiniteScroll?.loadNextPage();
    }
    render() {
        // We should show a different placeholder for pages and products (WIP)
        if (this.showPlaceholder) {
            return (h("div", null, !!this.total && !this.hideTitle ? h("h2", { class: "s-comments-title" }, this.blockTitle ? this.blockTitle : this.comment_title) : '', !this.hideForm && !this.testimonials ? h("salla-comment-form", { showAvatar: this.showFormAvatar, type: this.type, "item-id": this.itemId }) : '', h("div", { class: "s-comments-placeholder" }, h("span", { innerHTML: ChatBubbles }), h("p", null, this.noComments))));
        }
        return (h("div", { class: `s-comments s-comments-${this.testimonials ? 'testimonials' : this.type}` }, h("div", { class: `${this.type === CommentType.PAGE ? "s-comments-page-container" : "s-comments-container"}` }, !!this.total && !this.hideTitle ? h("h2", { class: "s-comments-title" }, this.blockTitle ? this.blockTitle : this.comment_title) : '', !this.hideForm && h("salla-comment-form", { showAvatar: this.showFormAvatar, type: this.type, "item-id": this.itemId }), salla.url.is_page('product.single') ? h("salla-reviews-summary", { itemId: this.itemId }) : '', h("div", { class: `s-comments-header ${this.total ? "has-total" : ""}` }, !!this.total && h("span", { class: "s-comments-count-label", innerHTML: this.pluralize(this.comment_name, this.total) }), !!this.total && !this.testimonials && this.type !== CommentType.BLOG ?
            h("div", { class: "s-comments-filter-wrapper" }, h("label", { class: "s-comments-filter-label", htmlFor: "comments-filter" }, salla.lang.get('pages.categories.sorting')), h("select", { id: "comments-filter", class: "s-form-control s-comments-sort-input", onChange: (e) => {
                    this.sort = e.target.value;
                    this.reload();
                } }, h("option", { value: "latest", selected: true }, salla.lang.get("pages.testimonials.sort_by_date_desc")), h("option", { value: "oldest" }, salla.lang.get("pages.testimonials.sort_by_date_asc")), this.allowLikes && h("option", { value: "most_helpful" }, this.mostHelpfulLabel)))
            : ''), h("div", { ref: wrapper => {
                this.wrapper = wrapper;
            } }), this.nextPage && (h("div", { class: "s-infinite-scroll-wrapper", ref: status => {
                this.status = status;
            } }, h("button", { onClick: () => this.loadMore(), class: "s-infinite-scroll-btn s-button-btn s-button-primary", type: "button" }, h("span", { class: "s-button-text s-infinite-scroll-btn-text" }, this.loadMoreText ? this.loadMoreText : salla.lang.get('common.elements.load_more')), h("span", { class: "s-button-loader s-button-loader-center s-infinite-scroll-btn-loader", ref: btnLoader => {
                this.btnLoader = btnLoader;
            }, style: { "display": "none" } })))))));
    }
    get host() { return getElement(this); }
};
SallaComments.style = sallaCommentsCss;

const SallaConditionalFields = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    hideAllOptions(optionId) {
        this.host.querySelectorAll(`[data-show-when^="options[${optionId}"]`).forEach((field) => {
            field.classList.add('hidden');
            this.hideAllOptions(field.dataset.optionId);
            this.disableInputs(field);
        });
    }
    disableInputs(field) {
        field.querySelectorAll('[name]').forEach((input) => {
            input.setAttribute('disabled', '');
            input.removeAttribute('required');
            if (input?.tagName?.toLowerCase() === 'select') {
                input.value = '';
            }
            if (['checkbox'].includes(input.getAttribute('type')) && input.hasOwnProperty('checked')) {
                // @ts-ignore
                input.checked = false;
            }
        });
    }
    changeHandler(event) {
        salla.event.emit('salla-onditional-fields::change', event);
        salla.log('Received the change/input event:', event);
        if (!event.target ||
            (!['SELECT', 'INPUT', 'TEXTAREA'].includes(event.target.tagName) &&
                !['checkbox', 'radio', 'text'].includes(event.target.getAttribute('type')))) {
            salla.log('Ignore the event because is not a supported input: ' + (event?.target?.tagName || 'N/A'));
            return;
        }
        // For text inputs, debounce the handling to improve performance on mobile
        const isTextInput = ['INPUT', 'TEXTAREA'].includes(event.target.tagName) &&
            (!event.target.getAttribute('type') || event.target.getAttribute('type') === 'text');
        if (isTextInput && event.type === 'input') {
            clearTimeout(this.debounceTimeout);
            this.debounceTimeout = setTimeout(() => {
                this.processConditionalFields(event);
            }, 300); // 300ms debounce for text inputs
            return;
        }
        // Process immediately for change events and non-text inputs
        this.processConditionalFields(event);
    }
    processConditionalFields(event) {
        let optionId = event.target.name.replace('[]', '');
        let isMultiple = event.target.getAttribute('type') === 'checkbox';
        let isRadio = event.target.getAttribute('type') === 'radio';
        let isTextInput = ['INPUT', 'TEXTAREA'].includes(event.target.tagName) &&
            (!event.target.getAttribute('type') || event.target.getAttribute('type') === 'text');
        salla.log('Trying to find all elements with condition:', `[data-show-when^="${optionId}"]`);
        this.host.querySelectorAll(`[data-show-when^="${optionId}"]`)
            .forEach((field) => {
            let isEqual = !field?.dataset.showWhen.includes('!=');
            let value = field?.dataset.showWhen.replace(/(.*)(=|!=)(.*)/gm, '$3').trim();
            let isSelected;
            if (isMultiple) {
                let selectedValues = Array.from(this.host.querySelectorAll(`input[name="${event.target.name}"]:checked`), e => e?.value);
                isSelected = selectedValues.includes(value.toString());
            }
            else if (isRadio) {
                // Handle radio inputs.
                isSelected = event.target.checked && event.target.value === value;
            }
            else if (isTextInput) {
                // Handle text inputs and textareas - check if value matches or is not empty for boolean conditions
                isSelected = value === event.target.value || (value.toLowerCase() === 'true' && event.target.value.trim() !== '');
            }
            else {
                isSelected = value === event.target.value;
            }
            salla.log('The input is ', isMultiple ? 'Multiple' : isRadio ? 'Radio' : isTextInput ? 'Text' : 'Single', ' value:', isSelected);
            let showTheInput = (isEqual && isSelected) || (!isEqual && !isSelected);
            if (showTheInput) {
                field.classList.remove('hidden');
                field.querySelectorAll('[name]').forEach((input) => {
                    input.removeAttribute('disabled');
                    const closestProductOption = input.closest('.s-product-options-option');
                    if (closestProductOption.dataset.optionRequired === 'true') {
                        input.setAttribute('required', '');
                    }
                    if (input.getAttribute('type') === 'checkbox') {
                        const checkboxes = Array.from(document.querySelectorAll(`input[type="checkbox"][name="${input.getAttribute('name')}"]`));
                        const isAnyChecked = checkboxes.some((checkbox) => checkbox.checked);
                        if (isAnyChecked) {
                            checkboxes.forEach((checkbox) => {
                                checkbox.removeAttribute('required');
                            });
                        }
                    }
                });
            }
            else {
                this.hideAllOptions(field.dataset.optionId);
                field.classList.add('hidden');
                this.disableInputs(field);
            }
        });
    }
    componentDidRender() {
        this.host.querySelectorAll(`[data-show-when]`).forEach((field) => {
            // @ts-ignore
            let optionName = field?.dataset?.showWhen.replace(/(.*)(=|!=)(.*)/gm, '$1').trim();
            if (!optionName) {
                return;
            }
            this.changeHandler({
                target: this.host.querySelector('[name^="' + optionName + '"]')
            });
        });
    }
    render() {
        return (h(Host, { key: 'b29d3a3e7e7af01540efbd2868cd302e91bba8a4' }, h("slot", { key: 'b6d6544834ea082ffcd20deef2da1206a47e98ba' })));
    }
    get host() { return getElement(this); }
};

const sallaCountDownCss = "";

const SallaCountDown = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * The size of the count down
         * */
        this.size = 'md';
        /**
         * The color of the count down
         * */
        this.color = 'dark';
        /**
         * The digits lang to show in the count down
         * */
        this.digits = 'auto';
        this.daysLabel = salla.lang.getWithDefault('pages.checkout.day', 'ŸäŸàŸÖ');
        this.hoursLabel = salla.lang.getWithDefault('pages.checkout.hour', 'ÿ≥ÿßÿπÿ©');
        this.minutesLabel = salla.lang.getWithDefault('pages.checkout.minute', 'ÿØŸÇŸäŸÇÿ©');
        this.secondsLabel = salla.lang.getWithDefault('pages.checkout.second', 'ÿ´ÿßŸÜŸäÿ©');
        this.endLabel = salla.lang.getWithDefault('pages.checkout.offer_ended', 'ÿßŸÜÿ™Ÿáÿ™ ŸÖÿØÿ© ÿßŸÑÿπÿ±ÿ∂');
        this.invalidDate = salla.lang.getWithDefault('blocks.buy_as_gift.incorrect_date', 'ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ÿßŸÑŸÖŸàÿπÿØ ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠');
        this.offerEnded = false;
        this.days = this.number(0);
        this.hours = this.number(0);
        this.minutes = this.number(0);
        this.seconds = this.number(0);
        salla.lang.onLoaded(() => {
            this.daysLabel = salla.lang.getWithDefault('pages.checkout.day', 'ŸäŸàŸÖ');
            this.hoursLabel = salla.lang.getWithDefault('pages.checkout.hour', 'ÿ≥ÿßÿπÿ©');
            this.minutesLabel = salla.lang.getWithDefault('pages.checkout.minute', 'ÿØŸÇŸäŸÇÿ©');
            this.invalidDate = salla.lang.getWithDefault('blocks.buy_as_gift.incorrect_date', 'ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ÿßŸÑŸÖŸàÿπÿØ ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠');
            this.secondsLabel = salla.lang.getWithDefault('pages.checkout.second', 'ÿ´ÿßŸÜŸäÿ©');
            this.endLabel = salla.lang.getWithDefault('pages.checkout.offer_ended', 'ÿßŸÜÿ™Ÿáÿ™ ŸÖÿØÿ© ÿßŸÑÿπÿ±ÿ∂');
        });
        if (this.date && this.isValidDate(this.date)) {
            this.startCountDown();
        }
    }
    /**
     * End the count down
     * */
    async endCountDown() {
        clearInterval(this.countInterval);
        this.offerEnded = true;
        this.days = this.number(0);
        this.hours = this.number(0);
        this.minutes = this.number(0);
        this.seconds = this.number(0);
    }
    componentWillLoad() {
        if (typeof this.preOrder === 'string') {
            try {
                this.normalizedPreOrder = JSON.parse(this.preOrder);
            }
            catch {
                this.normalizedPreOrder = undefined;
            }
        }
        else {
            this.normalizedPreOrder = this.preOrder;
        }
        if (this.normalizedPreOrder?.end_date) {
            this.date = this.normalizedPreOrder.end_date;
            if (this.date && this.isValidDate(this.date)) {
                this.startCountDown();
            }
        }
    }
    isValidDate(date) {
        let dateHasDashes = date.includes('-'), dateParts = date.split(' '), testedDate;
        if (dateHasDashes) {
            testedDate = dateParts[0].replace(/-/g, '/');
        }
        else {
            testedDate = dateParts[0];
        }
        return !isNaN(Date.parse(testedDate));
    }
    number(digit) {
        return salla.helpers.number(digit, this.digits === 'en');
    }
    startCountDown() {
        let countDownDate = new Date(this.date.replace(/-/g, '/'));
        if (this.endOfDay || this.date.split(' ').length === 1) {
            countDownDate.setHours(23, 59, 59, 999);
        }
        let countDownTime = countDownDate.getTime();
        this.countInterval = setInterval(() => {
            let now = new Date().getTime();
            let distance = countDownTime - now;
            this.days = this.number(Math.floor(distance / (1000 * 60 * 60 * 24)));
            this.hours = this.number(Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));
            this.minutes = this.number(Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)));
            this.seconds = this.number(Math.floor((distance % (1000 * 60)) / 1000));
            if (distance < 0) {
                this.endCountDown();
            }
        }, 1000);
    }
    renderCountDown() {
        return (h("ul", { class: `s-count-down-list ${this.boxed ? 's-count-down-boxed' : ''} ${this.offerEnded ? 's-count-down-ended' : ''} s-count-down-${this.size} s-count-down-${this.color}` }, h("li", { class: "s-count-down-item" }, h("div", { class: "s-count-down-item-value" }, this.seconds), this.labeled && h("div", { class: "s-count-down-item-label" }, this.secondsLabel)), h("li", { class: "s-count-down-item" }, h("div", { class: "s-count-down-item-value" }, this.minutes), this.labeled && h("div", { class: "s-count-down-item-label" }, this.minutesLabel)), h("li", { class: "s-count-down-item" }, h("div", { class: "s-count-down-item-value" }, this.hours), this.labeled && h("div", { class: "s-count-down-item-label" }, this.hoursLabel)), h("li", { class: "s-count-down-item" }, h("div", { class: "s-count-down-item-value" }, this.days), this.labeled && h("div", { class: "s-count-down-item-label" }, this.daysLabel))));
    }
    renderInvalidDate() {
        return h("div", { class: "s-count-down-text-center" }, this.invalidDate);
    }
    renderOfferEnded() {
        return h("div", { class: "s-count-down-end-text" }, !!this.endText ? this.endText : this.endLabel);
    }
    renderPreOrderToBeAvailableOn() {
        if (!this.normalizedPreOrder?.availability_date ||
            !this.isValidDate(this.normalizedPreOrder?.availability_date))
            return null;
        return (h("div", { class: "s-count-down-info-message" }, h("i", { class: "sicon-info" }), h("span", null, salla.lang.getWithDefault('pages.products.expected_to_be', 'ŸÖÿ™ŸàŸÇŸëŸéÿπ ÿ™ŸàŸÅŸëŸèÿ±Ÿá ÿ®ÿ™ÿßÿ±ŸäÿÆ:')), h("span", null, new Date(this.normalizedPreOrder?.availability_date).toLocaleDateString(salla.lang.locale, {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
        }))));
    }
    renderPreOrderCountDown() {
        if (!this.normalizedPreOrder?.activate_countdown)
            return null;
        return (h("div", { class: "s-count-down-pre-order-container" }, h("p", { class: "text-sm " }, salla.lang.getWithDefault('pages.products.pre_order_ends_in', 'ŸäŸÜÿ™ŸáŸä ÿßŸÑÿ∑ŸÑÿ® ÿßŸÑŸÖÿ≥ÿ®ŸÇ ÿÆŸÑÿßŸÑ:')), this.renderCountDown()));
    }
    renderPreOrder() {
        return (h("div", null, typeof this.normalizedPreOrder === 'object' &&
            this.normalizedPreOrder?.availability_date &&
            this.renderPreOrderToBeAvailableOn(), this.renderPreOrderCountDown()));
    }
    renderContent() {
        if (!this.date)
            return null;
        if (!this.isValidDate(this.date)) {
            return this.renderInvalidDate();
        }
        if (this.preOrder) {
            return this.renderPreOrder();
        }
        return this.renderCountDown();
    }
    render() {
        return (h(Host, { key: '1e6baaf061a5cee7aeed3af6f4f02a7edf654885', class: `s-count-down-wrapper ${this.preOrder && this.isValidDate(this.date) ? 's-count-down-pre-order' : ''}` }, this.renderContent(), this.offerEnded && this.renderOfferEnded()));
    }
};
SallaCountDown.style = sallaCountDownCss;

const sallaDatetimePickerCss = ".flatpickr-calendar{background:transparent;opacity:0;display:none;text-align:center;visibility:hidden;padding:0;-webkit-animation:none;animation:none;direction:ltr;border:0;font-size:14px;line-height:24px;border-radius:5px;position:absolute;width:307.875px;-webkit-box-sizing:border-box;box-sizing:border-box;-ms-touch-action:manipulation;touch-action:manipulation;background:#fff;-webkit-box-shadow:1px 0 0 #e6e6e6,-1px 0 0 #e6e6e6,0 1px 0 #e6e6e6,0 -1px 0 #e6e6e6,0 3px 13px rgba(0,0,0,0.08);box-shadow:1px 0 0 #e6e6e6,-1px 0 0 #e6e6e6,0 1px 0 #e6e6e6,0 -1px 0 #e6e6e6,0 3px 13px rgba(0,0,0,0.08)}.flatpickr-calendar.open,.flatpickr-calendar.inline{opacity:1;max-height:640px;visibility:visible}.flatpickr-calendar.open{display:inline-block;z-index:99999}.flatpickr-calendar.animate.open{-webkit-animation:fpFadeInDown 300ms cubic-bezier(.23,1,.32,1);animation:fpFadeInDown 300ms cubic-bezier(.23,1,.32,1)}.flatpickr-calendar.inline{display:block;position:relative;top:2px}.flatpickr-calendar.static{position:absolute;top:calc(100% + 2px)}.flatpickr-calendar.static.open{z-index:999;display:block}.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+1) .flatpickr-day.inRange:nth-child(7n+7){-webkit-box-shadow:none !important;box-shadow:none !important}.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+2) .flatpickr-day.inRange:nth-child(7n+1){-webkit-box-shadow:-2px 0 0 #e6e6e6,5px 0 0 #e6e6e6;box-shadow:-2px 0 0 #e6e6e6,5px 0 0 #e6e6e6}.flatpickr-calendar .hasWeeks .dayContainer,.flatpickr-calendar .hasTime .dayContainer{border-bottom:0;border-bottom-right-radius:0;border-bottom-left-radius:0}.flatpickr-calendar .hasWeeks .dayContainer{border-left:0}.flatpickr-calendar.hasTime .flatpickr-time{height:40px;border-top:1px solid #e6e6e6}.flatpickr-calendar.noCalendar.hasTime .flatpickr-time{height:auto}.flatpickr-calendar:before,.flatpickr-calendar:after{position:absolute;display:block;pointer-events:none;border:solid transparent;content:'';height:0;width:0;left:22px}.flatpickr-calendar.rightMost:before,.flatpickr-calendar.arrowRight:before,.flatpickr-calendar.rightMost:after,.flatpickr-calendar.arrowRight:after{left:auto;right:22px}.flatpickr-calendar.arrowCenter:before,.flatpickr-calendar.arrowCenter:after{left:50%;right:50%}.flatpickr-calendar:before{border-width:5px;margin:0 -5px}.flatpickr-calendar:after{border-width:4px;margin:0 -4px}.flatpickr-calendar.arrowTop:before,.flatpickr-calendar.arrowTop:after{bottom:100%}.flatpickr-calendar.arrowTop:before{border-bottom-color:#e6e6e6}.flatpickr-calendar.arrowTop:after{border-bottom-color:#fff}.flatpickr-calendar.arrowBottom:before,.flatpickr-calendar.arrowBottom:after{top:100%}.flatpickr-calendar.arrowBottom:before{border-top-color:#e6e6e6}.flatpickr-calendar.arrowBottom:after{border-top-color:#fff}.flatpickr-calendar:focus{outline:0}.flatpickr-wrapper{position:relative;display:inline-block}.flatpickr-months{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex}.flatpickr-months .flatpickr-month{background:transparent;color:rgba(0,0,0,0.9);fill:rgba(0,0,0,0.9);height:34px;line-height:1;text-align:center;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}.flatpickr-months .flatpickr-prev-month,.flatpickr-months .flatpickr-next-month{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;text-decoration:none;cursor:pointer;position:absolute;top:0;height:34px;padding:10px;z-index:3;color:rgba(0,0,0,0.9);fill:rgba(0,0,0,0.9)}.flatpickr-months .flatpickr-prev-month.flatpickr-disabled,.flatpickr-months .flatpickr-next-month.flatpickr-disabled{display:none}.flatpickr-months .flatpickr-prev-month i,.flatpickr-months .flatpickr-next-month i{position:relative}.flatpickr-months .flatpickr-prev-month.flatpickr-prev-month,.flatpickr-months .flatpickr-next-month.flatpickr-prev-month{left:0}.flatpickr-months .flatpickr-prev-month.flatpickr-next-month,.flatpickr-months .flatpickr-next-month.flatpickr-next-month{right:0}.flatpickr-months .flatpickr-prev-month:hover,.flatpickr-months .flatpickr-next-month:hover{color:#959ea9}.flatpickr-months .flatpickr-prev-month:hover svg,.flatpickr-months .flatpickr-next-month:hover svg{fill:#f64747}.flatpickr-months .flatpickr-prev-month svg,.flatpickr-months .flatpickr-next-month svg{width:14px;height:14px}.flatpickr-months .flatpickr-prev-month svg path,.flatpickr-months .flatpickr-next-month svg path{-webkit-transition:fill .1s;transition:fill .1s;fill:inherit}.numInputWrapper{position:relative;height:auto}.numInputWrapper input,.numInputWrapper span{display:inline-block}.numInputWrapper input{width:100%}.numInputWrapper input::-ms-clear{display:none}.numInputWrapper input::-webkit-outer-spin-button,.numInputWrapper input::-webkit-inner-spin-button{margin:0;-webkit-appearance:none}.numInputWrapper span{position:absolute;right:0;width:14px;padding:0 4px 0 2px;height:50%;line-height:50%;opacity:0;cursor:pointer;border:1px solid rgba(57,57,57,0.15);-webkit-box-sizing:border-box;box-sizing:border-box}.numInputWrapper span:hover{background:rgba(0,0,0,0.1)}.numInputWrapper span:active{background:rgba(0,0,0,0.2)}.numInputWrapper span:after{display:block;content:\"\";position:absolute}.numInputWrapper span.arrowUp{top:0;border-bottom:0}.numInputWrapper span.arrowUp:after{border-left:4px solid transparent;border-right:4px solid transparent;border-bottom:4px solid rgba(57,57,57,0.6);top:26%}.numInputWrapper span.arrowDown{top:50%}.numInputWrapper span.arrowDown:after{border-left:4px solid transparent;border-right:4px solid transparent;border-top:4px solid rgba(57,57,57,0.6);top:40%}.numInputWrapper span svg{width:inherit;height:auto}.numInputWrapper span svg path{fill:rgba(0,0,0,0.5)}.numInputWrapper:hover{background:rgba(0,0,0,0.05)}.numInputWrapper:hover span{opacity:1}.flatpickr-current-month{font-size:135%;line-height:inherit;font-weight:300;color:inherit;position:absolute;width:75%;left:12.5%;padding:7.48px 0 0 0;line-height:1;height:34px;display:inline-block;text-align:center;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.flatpickr-current-month span.cur-month{font-family:inherit;font-weight:700;color:inherit;display:inline-block;margin-left:.5ch;padding:0}.flatpickr-current-month span.cur-month:hover{background:rgba(0,0,0,0.05)}.flatpickr-current-month .numInputWrapper{width:6ch;width:7ch\\0;display:inline-block}.flatpickr-current-month .numInputWrapper span.arrowUp:after{border-bottom-color:rgba(0,0,0,0.9)}.flatpickr-current-month .numInputWrapper span.arrowDown:after{border-top-color:rgba(0,0,0,0.9)}.flatpickr-current-month input.cur-year{background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;cursor:text;padding:0 0 0 .5ch;margin:0;display:inline-block;font-size:inherit;font-family:inherit;font-weight:300;line-height:inherit;height:auto;border:0;border-radius:0;vertical-align:initial;-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield}.flatpickr-current-month input.cur-year:focus{outline:0}.flatpickr-current-month input.cur-year[disabled],.flatpickr-current-month input.cur-year[disabled]:hover{font-size:100%;color:rgba(0,0,0,0.5);background:transparent;pointer-events:none}.flatpickr-current-month .flatpickr-monthDropdown-months{appearance:menulist;background:transparent;border:none;border-radius:0;box-sizing:border-box;color:inherit;cursor:pointer;font-size:inherit;font-family:inherit;font-weight:300;height:auto;line-height:inherit;margin:-1px 0 0 0;outline:none;padding:0 0 0 .5ch;position:relative;vertical-align:initial;-webkit-box-sizing:border-box;-webkit-appearance:menulist;-moz-appearance:menulist;width:auto}.flatpickr-current-month .flatpickr-monthDropdown-months:focus,.flatpickr-current-month .flatpickr-monthDropdown-months:active{outline:none}.flatpickr-current-month .flatpickr-monthDropdown-months:hover{background:rgba(0,0,0,0.05)}.flatpickr-current-month .flatpickr-monthDropdown-months .flatpickr-monthDropdown-month{background-color:transparent;outline:none;padding:0}.flatpickr-weekdays{background:transparent;text-align:center;overflow:hidden;width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;height:28px}.flatpickr-weekdays .flatpickr-weekdaycontainer{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}span.flatpickr-weekday{cursor:default;font-size:90%;background:transparent;color:rgba(0,0,0,0.54);line-height:1;margin:0;text-align:center;display:block;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;font-weight:bolder}.dayContainer,.flatpickr-weeks{padding:1px 0 0 0}.flatpickr-days{position:relative;overflow:hidden;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:start;-webkit-align-items:flex-start;-ms-flex-align:start;align-items:flex-start;width:307.875px}.flatpickr-days:focus{outline:0}.dayContainer{padding:0;outline:0;text-align:left;width:307.875px;min-width:307.875px;max-width:307.875px;-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;display:-ms-flexbox;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-wrap:wrap;-ms-flex-pack:justify;-webkit-justify-content:space-around;justify-content:space-around;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);opacity:1}.dayContainer+.dayContainer{-webkit-box-shadow:-1px 0 0 #e6e6e6;box-shadow:-1px 0 0 #e6e6e6}.flatpickr-day{background:none;border:1px solid transparent;border-radius:150px;-webkit-box-sizing:border-box;box-sizing:border-box;color:#393939;cursor:pointer;font-weight:400;width:14.2857143%;-webkit-flex-basis:14.2857143%;-ms-flex-preferred-size:14.2857143%;flex-basis:14.2857143%;max-width:39px;height:39px;line-height:39px;margin:0;display:inline-block;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;text-align:center}.flatpickr-day.inRange,.flatpickr-day.prevMonthDay.inRange,.flatpickr-day.nextMonthDay.inRange,.flatpickr-day.today.inRange,.flatpickr-day.prevMonthDay.today.inRange,.flatpickr-day.nextMonthDay.today.inRange,.flatpickr-day:hover,.flatpickr-day.prevMonthDay:hover,.flatpickr-day.nextMonthDay:hover,.flatpickr-day:focus,.flatpickr-day.prevMonthDay:focus,.flatpickr-day.nextMonthDay:focus{cursor:pointer;outline:0;background:#e6e6e6;border-color:#e6e6e6}.flatpickr-day.today{border-color:#959ea9}.flatpickr-day.today:hover,.flatpickr-day.today:focus{border-color:#959ea9;background:#959ea9;color:#fff}.flatpickr-day.selected,.flatpickr-day.startRange,.flatpickr-day.endRange,.flatpickr-day.selected.inRange,.flatpickr-day.startRange.inRange,.flatpickr-day.endRange.inRange,.flatpickr-day.selected:focus,.flatpickr-day.startRange:focus,.flatpickr-day.endRange:focus,.flatpickr-day.selected:hover,.flatpickr-day.startRange:hover,.flatpickr-day.endRange:hover,.flatpickr-day.selected.prevMonthDay,.flatpickr-day.startRange.prevMonthDay,.flatpickr-day.endRange.prevMonthDay,.flatpickr-day.selected.nextMonthDay,.flatpickr-day.startRange.nextMonthDay,.flatpickr-day.endRange.nextMonthDay{background:#569ff7;-webkit-box-shadow:none;box-shadow:none;color:#fff;border-color:#569ff7}.flatpickr-day.selected.startRange,.flatpickr-day.startRange.startRange,.flatpickr-day.endRange.startRange{border-radius:50px 0 0 50px}.flatpickr-day.selected.endRange,.flatpickr-day.startRange.endRange,.flatpickr-day.endRange.endRange{border-radius:0 50px 50px 0}.flatpickr-day.selected.startRange+.endRange:not(:nth-child(7n+1)),.flatpickr-day.startRange.startRange+.endRange:not(:nth-child(7n+1)),.flatpickr-day.endRange.startRange+.endRange:not(:nth-child(7n+1)){-webkit-box-shadow:-10px 0 0 #569ff7;box-shadow:-10px 0 0 #569ff7}.flatpickr-day.selected.startRange.endRange,.flatpickr-day.startRange.startRange.endRange,.flatpickr-day.endRange.startRange.endRange{border-radius:50px}.flatpickr-day.inRange{border-radius:0;-webkit-box-shadow:-5px 0 0 #e6e6e6,5px 0 0 #e6e6e6;box-shadow:-5px 0 0 #e6e6e6,5px 0 0 #e6e6e6}.flatpickr-day.flatpickr-disabled,.flatpickr-day.flatpickr-disabled:hover,.flatpickr-day.prevMonthDay,.flatpickr-day.nextMonthDay,.flatpickr-day.notAllowed,.flatpickr-day.notAllowed.prevMonthDay,.flatpickr-day.notAllowed.nextMonthDay{color:rgba(57,57,57,0.3);background:transparent;border-color:transparent;cursor:default}.flatpickr-day.flatpickr-disabled,.flatpickr-day.flatpickr-disabled:hover{cursor:not-allowed;color:rgba(57,57,57,0.1)}.flatpickr-day.week.selected{border-radius:0;-webkit-box-shadow:-5px 0 0 #569ff7,5px 0 0 #569ff7;box-shadow:-5px 0 0 #569ff7,5px 0 0 #569ff7}.flatpickr-day.hidden{visibility:hidden}.rangeMode .flatpickr-day{margin-top:1px}.flatpickr-weekwrapper{float:left}.flatpickr-weekwrapper .flatpickr-weeks{padding:0 12px;-webkit-box-shadow:1px 0 0 #e6e6e6;box-shadow:1px 0 0 #e6e6e6}.flatpickr-weekwrapper .flatpickr-weekday{float:none;width:100%;line-height:28px}.flatpickr-weekwrapper span.flatpickr-day,.flatpickr-weekwrapper span.flatpickr-day:hover{display:block;width:100%;max-width:none;color:rgba(57,57,57,0.3);background:transparent;cursor:default;border:none}.flatpickr-innerContainer{display:block;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden}.flatpickr-rContainer{display:inline-block;padding:0;-webkit-box-sizing:border-box;box-sizing:border-box}.flatpickr-time{text-align:center;outline:0;display:block;height:0;line-height:40px;max-height:40px;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex}.flatpickr-time:after{content:\"\";display:table;clear:both}.flatpickr-time .numInputWrapper{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;width:40%;height:40px;float:left}.flatpickr-time .numInputWrapper span.arrowUp:after{border-bottom-color:#393939}.flatpickr-time .numInputWrapper span.arrowDown:after{border-top-color:#393939}.flatpickr-time.hasSeconds .numInputWrapper{width:26%}.flatpickr-time.time24hr .numInputWrapper{width:49%}.flatpickr-time input{background:transparent;-webkit-box-shadow:none;box-shadow:none;border:0;border-radius:0;text-align:center;margin:0;padding:0;height:inherit;line-height:inherit;color:#393939;font-size:14px;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield}.flatpickr-time input.flatpickr-hour{font-weight:bold}.flatpickr-time input.flatpickr-minute,.flatpickr-time input.flatpickr-second{font-weight:400}.flatpickr-time input:focus{outline:0;border:0}.flatpickr-time .flatpickr-time-separator,.flatpickr-time .flatpickr-am-pm{height:inherit;float:left;line-height:inherit;color:#393939;font-weight:bold;width:2%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center}.flatpickr-time .flatpickr-am-pm{outline:0;width:18%;cursor:pointer;text-align:center;font-weight:400}.flatpickr-time input:hover,.flatpickr-time .flatpickr-am-pm:hover,.flatpickr-time input:focus,.flatpickr-time .flatpickr-am-pm:focus{background:#eee}.flatpickr-input[readonly]{cursor:pointer}@-webkit-keyframes fpFadeInDown{from{opacity:0;-webkit-transform:translate3d(0,-20px,0);transform:translate3d(0,-20px,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@keyframes fpFadeInDown{from{opacity:0;-webkit-transform:translate3d(0,-20px,0);transform:translate3d(0,-20px,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}";

const SallaDatetimePicker = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.picked = createEvent(this, "picked");
        this.invalidInput = createEvent(this, "invalidInput");
        /**
         * Two way data binding to retrieve the selected date[time] value
         */
        this.value = null;
        /**
         * Placeholder text to show on the input element
         */
        this.placeholder = salla.lang.get('blocks.buy_as_gift.select_send_date_and_time');
        /**
         * Allows the user to enter a date directly into the input field. By default, direct entry is disabled.
         */
        this.allowInput = true;
        /**
         * Allows the preloading of an invalid date. When disabled, the field will be cleared if the provided date is invalid
         */
        this.allowInvalidPreload = false;
        /**
         * Exactly the same as date format, but for the altInput field.
         */
        this.altFormat = "F j, Y";
        /**
         * Show the user a readable date (as per altFormat), but return something totally different to the server.
         */
        this.altInput = false;
        /**
         * Instead of body, appends the calendar to the specified node instead.
         */
        this.appendTo = undefined;
        /**
         * Defines how the date will be formatted in the aria-label for calendar days,
         * using the same tokens as dateFormat. If you change this, you should choose a
         * value that will make sense if a screen reader reads it out loud.
         */
        this.ariaDateFormat = "F j, Y";
        /**
         * Whether the default time should be auto-filled when the input is empty and gains or loses focus.
         */
        this.autoFillDefaultTime = true;
        /**
         * Whether clicking on the input should open the picker.
         * Set it to false if you only want to open the calendar programmatically with [open()]
         */
        this.clickOpens = true;
        /**
         * Whether calendar should close after date selection or not
         */
        this.closeOnSelect = true;
        /**
         * A string of characters which are used to define how the date will be displayed in the input box.
         * The supported characters are defined in the table below.
         */
        this.dateFormat = "Y-m-d";
        /**
         * Initial value of the hour element, when no date is selected
         */
        this.defaultHour = 12;
        /**
         * Initial value of the minute element, when no date is selected
         */
        this.defaultMinute = 0;
        /**
         * Initial value of the seconds element, when no date is selected
         */
        this.defaultSeconds = 0;
        /**
         * Disables certain dates, preventing them from being selected.
         * See https://chmln.github.io/flatpickr/examples/#disabling-specific-dates
         */
        this.disable = [];
        /**
         * Set this to true to always use the non-native picker on mobile devices.
         * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.
         */
        this.disableMobile = false;
        /**
         * Disables all dates except these specified. See https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few
         */
        this.enable = [(_) => true];
        /**
         * Enables seconds selection in the time picker.
         */
        this.enableSeconds = false;
        /**
         * Enables the time picker
         */
        this.enableTime = false;
        /**
         * Adjusts the step for the hour input (incl. scrolling)
         */
        this.hourIncrement = 1;
        /**
         * Displays the calendar inline
         */
        this.inline = false;
        /**
         * The locale, either as a string (e.g. "ar", "en") or as an object.
         * See https://chmln.github.io/flatpickr/localization/
         */
        this.locale = "en";
        /**
         * The maximum date that a user can pick to (inclusive).
         */
        this.maxDate = null;
        /**
         * The minimum date that a user can start picking from (inclusive).
         */
        this.maxTime = null;
        /**
         * The minimum date that a user can start picking from (inclusive).
         */
        this.minDate = null;
        /**
         * The minimum time that a user can start picking from (inclusive).
         */
        this.minTime = null;
        /**
         * Adjusts the step for the minute input (incl. scrolling) Defaults to 5
         */
        this.minuteIncrement = 5;
        /**
         * Date selection mode, defaults to "single"
         */
        this.mode = "single";
        /**
         * How the month should be displayed in the header of the calendar.
         * If showMonths has a value greater than 1, the month is always shown as static.
         */
        this.monthSelectorType = "dropdown";
        /**
         * HTML for the arrow icon, used to switch months.
         */
        this.nextArrow = '<span class="sicon-keyboard_arrow_right"></span>';
        /**
         * Hides the day selection in calendar. Use it along with enableTime to create a time picker.
         */
        this.noCalendar = false;
        /**
         * How the calendar should be positioned with regards to the input. Defaults to "auto"
         */
        this.position = "auto";
        /**
         * HTML for the left arrow icon, used to switch months.
         */
        this.prevArrow = '<span class="sicon-keyboard_arrow_left"></span>';
        /**
         * Whether to display the current month name in shorthand mode, e.g. "Sep" instead "September"
         */
        this.shorthandCurrentMonth = false;
        /**
         * Position the calendar inside the wrapper and next to the input element*.
         */
        this.static = false;
        /**
         * The number of months to be shown at the same time when displaying the calendar.
         */
        this.showMonths = 1;
        /**
         * Displays time picker in 24 hour mode without AM/PM selection when enabled.
         */
        this.time_24hr = false;
        /**
         * Enables display of week numbers in calendar.
         */
        this.weekNumbers = false;
        /**
         * See https://chmln.github.io/flatpickr/examples/#flatpickr-external-elements
         */
        this.wrap = false;
        /**
         * Whether the input is disabled
         */
        this.disabled = false;
    }
    /**
     * Lazy load flatpickr library
     * This reduces initial bundle size by ~35-40KB
     */
    async loadFlatpickr() {
        if (this.flatpickr)
            return;
        try {
            const flatpickrModule = await import('./index-D-twzdLJ.js');
            this.flatpickr = flatpickrModule.default;
            // Load locale if not English
            if (this.locale && this.locale !== 'en') {
                try {
                    await import(`flatpickr/dist/l10n/${this.locale}.js`);
                }
                catch (e) {
                    console.warn(`Flatpickr locale ${this.locale} not found, using default`);
                }
            }
        }
        catch (error) {
            console.error('Failed to load Flatpickr:', error);
            salla.notify?.error?.('Failed to load date picker. Please refresh the page.');
            throw error;
        }
    }
    render() {
        return h("div", { key: '10ac16506ca2b2b2a94227887a8d0b6593d7ac17', class: "s-datetime-picker" }, h("input", { key: 'fad4a5677edf21d9bd9a977392ebaf4ae2ad3b7b', type: "datetime", name: this.name, value: this.value, required: this.required, disabled: this.disabled, placeholder: this.placeholder, class: "s-datetime-picker-input", ref: (el) => this.dateInput = el }));
    }
    async componentDidLoad() {
        // Load flatpickr before initializing
        await this.loadFlatpickr();
        let options = {
            allowInput: this.allowInput,
            allowInvalidPreload: this.allowInvalidPreload,
            altFormat: this.altFormat,
            altInput: this.altInput,
            altInputClass: this.altInputClass,
            appendTo: this.appendTo,
            ariaDateFormat: this.ariaDateFormat,
            autoFillDefaultTime: this.autoFillDefaultTime,
            clickOpens: this.clickOpens,
            closeOnSelect: this.closeOnSelect,
            conjunction: this.conjunction,
            dateFormat: this.dateFormat,
            defaultDate: !!this.value ? Date.parse(this.value) : this.defaultDate,
            defaultHour: this.defaultHour,
            defaultMinute: this.defaultMinute,
            defaultSeconds: this.defaultSeconds,
            disable: this.disable,
            disableMobile: this.disableMobile,
            enable: this.enable,
            enableSeconds: this.enableSeconds,
            enableTime: this.enableTime,
            formatDate: this.formatDate,
            hourIncrement: this.hourIncrement,
            inline: this.inline,
            locale: this.locale,
            maxDate: this.maxDate,
            maxTime: this.maxTime,
            minDate: this.minDate,
            minTime: this.minTime,
            minuteIncrement: this.minuteIncrement,
            mode: this.mode,
            monthSelectorType: this.monthSelectorType,
            nextArrow: this.nextArrow,
            noCalendar: this.noCalendar,
            parseDate: this.dateParser,
            position: this.position,
            positionElement: this.positionElement,
            prevArrow: this.prevArrow,
            shorthandCurrentMonth: this.shorthandCurrentMonth,
            static: this.static,
            showMonths: this.showMonths,
            time_24hr: this.time_24hr,
            weekNumbers: this.weekNumbers,
            wrap: this.wrap,
            // @ts-ignore
            onChange: (selectedDates, dateStr) => this.picked.emit(this.value = dateStr)
            // onOpen: this.handleOnOpen(selectedDates, dateStr, instance)
            // onClose: this.handleOnClose(selectedDates, dateStr, instance)
        };
        this.flatpickr(this.dateInput, options);
        this.dateInput.addEventListener('invalid', e => {
            this.invalidInput.emit(e);
        });
        this.dateInput.addEventListener('input', () => {
            this.dateInput.setCustomValidity('');
            this.dateInput.reportValidity();
        });
    }
};
SallaDatetimePicker.style = sallaDatetimePickerCss;

var Cancel = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>cancel</title>
<path d="M17.885 16l7.057-7.057c0.521-0.521 0.521-1.364 0-1.885s-1.364-0.521-1.885 0l-7.057 7.057-7.057-7.057c-0.521-0.521-1.364-0.521-1.885 0s-0.521 1.364 0 1.885l7.057 7.057-7.057 7.057c-0.521 0.521-0.521 1.364 0 1.885 0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391l7.057-7.057 7.057 7.057c0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391c0.521-0.521 0.521-1.364 0-1.885z"></path>
</svg>
`;

var AlertEngineIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>alert-engine</title>
<path d="M16 18.673c-0.736 0-1.333 0.604-1.333 1.34s0.597 1.333 1.333 1.333 1.333-0.597 1.333-1.333v-0.013c0-0.736-0.597-1.327-1.333-1.327zM2.667 16c0-3.092 1.083-6.105 3.047-8.484 0.469-0.568 0.389-1.408-0.179-1.877-0.568-0.468-1.408-0.388-1.877 0.179-2.359 2.857-3.657 6.473-3.657 10.183s1.299 7.325 3.657 10.183c0.264 0.319 0.645 0.484 1.029 0.484 0.299 0 0.6-0.1 0.848-0.305 0.568-0.469 0.648-1.309 0.179-1.877-1.964-2.379-3.047-5.392-3.047-8.484zM16 10.667c-0.736 0-1.333 0.597-1.333 1.333v4c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-4c0-0.736-0.597-1.333-1.333-1.333zM16 5.333c-5.881 0-10.667 4.785-10.667 10.667s4.785 10.667 10.667 10.667 10.667-4.785 10.667-10.667-4.785-10.667-10.667-10.667zM16 24c-4.412 0-8-3.588-8-8s3.588-8 8-8 8 3.588 8 8-3.588 8-8 8zM28.343 5.817c-0.469-0.567-1.307-0.647-1.877-0.179-0.568 0.469-0.648 1.309-0.179 1.877 1.964 2.379 3.047 5.392 3.047 8.484s-1.083 6.105-3.047 8.484c-0.469 0.568-0.389 1.408 0.179 1.877 0.249 0.205 0.549 0.305 0.848 0.305 0.384 0 0.765-0.165 1.028-0.484 2.36-2.857 3.659-6.473 3.659-10.183s-1.299-7.325-3.657-10.183z"></path>
</svg>
`;

var CheckCircle2 = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>check-circle2</title>
<path d="M29.333 14.133c-0.8 0-1.333 0.533-1.333 1.333v1.2c0 6.667-5.333 12-12 12 0 0 0 0 0 0-6.667 0-12-5.333-12-12s5.333-12 12-12c0 0 0 0 0 0 1.733 0 3.333 0.4 4.933 1.067 0.667 0.267 1.467 0 1.733-0.667s0-1.467-0.667-1.733c-1.867-0.8-3.867-1.333-6-1.333 0 0 0 0 0 0-8.133 0-14.667 6.533-14.667 14.667s6.533 14.667 14.667 14.667c0 0 0 0 0 0 8.133 0 14.667-6.533 14.667-14.667v-1.2c0-0.8-0.533-1.333-1.333-1.333zM12.933 14.4c-0.533-0.533-1.333-0.533-1.867 0s-0.533 1.333 0 1.867l4 4c0.267 0.267 0.533 0.4 0.933 0.4s0.667-0.133 0.933-0.4l13.333-13.333c0.533-0.533 0.533-1.333 0-1.867s-1.333-0.533-1.867 0l-12.4 12.4-3.067-3.067z"></path>
</svg>
`;

const sallaDrawerCss = "";

const SallaDrawer = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.drawerVisibilityChanged = createEvent(this, "drawerVisibilityChanged");
        /**
         * Sets the drawer to be closable. Defaults to `true`
         */
        this.isClosable = true;
        /**
         * The width of the drawer
         */
        this.width = 'md';
        /**
         * The position of the drawer (left or right)
         */
        this.position = 'right';
        /**
         * open the drawer on rendering
         */
        this.visible = false;
        /**
         * open the drawer on rendering
         */
        this.hasSkeleton = false;
        /**
         * Show loading in the middle
         */
        this.isLoading = false;
        /**
         * Show subtitle before the title or not, defaults to `false` (after the title)
         */
        this.subTitleFirst = false;
        /**
         * Avoid padding in the drawer body or not, defaults to `false`
         */
        this.noPadding = false;
        /**
         * Set drawer sub title.
         */
        this.subTitle = '';
        /**
         * Align drawer content to center, defaults to `false`
         */
        this.centered = false;
        /**
         * Set the style of the header icon.
         */
        this.iconStyle = undefined;
        salla.event.on('drawer::open', target => target == this.host.id && this.open());
        salla.event.on('drawer::close', target => target == this.host.id && this.close());
        this.drawerTitle = this.host.getAttribute('drawer-title');
    }
    handleVisible(newValue) {
        if (!newValue) {
            this.drawerVisibilityChanged.emit(false);
            this.toggleDrawer(false);
            return;
        }
        this.drawerVisibilityChanged.emit(true);
        this.host.classList.remove('s-hidden');
        setTimeout(() => this.toggleDrawer(true)); //small amont of time to running toggle After adding hidden
    }
    handleKeyUp(ev) {
        if (ev.key === "Escape") {
            this.closeDrawer();
        }
    }
    /**
     * Open the drawer
     */
    async open() {
        this.host.setAttribute('visible', '');
        this.handleAutoFocus();
        return this.host;
    }
    /**
     * close the drawer
     */
    async close() {
        this.host.removeAttribute('visible');
        return this.host;
    }
    /**
     * Change the Drawer Title
     * @param {string} drawerTitle
     */
    async setTitle(drawerTitle) {
        this.drawerTitle = drawerTitle;
        return this.host;
    }
    /**
     * Start loading
     */
    async loading() {
        this.isLoading = true;
        return this.host;
    }
    /**
     * Stop the loading
     */
    async stopLoading() {
        this.isLoading = false;
        return this.host;
    }
    handleAutoFocus() {
        const firstFocusableElement = this.host.querySelector('input, textarea, select');
        if (!firstFocusableElement) {
            return;
        }
        setTimeout(() => {
            firstFocusableElement.focus();
        }, 100);
    }
    toggleDrawer(isOpen) {
        const body = this.host.querySelector('.s-drawer-body');
        Helper.toggleElementClassIf(body, 's-drawer-entering', 's-drawer-leaving', () => isOpen)
            .toggleElementClassIf(this.overlay, 's-drawer-entering', 's-drawer-overlay-leaving', () => isOpen)
            .toggleElementClassIf(document.body, 'drawer-is-open', 'drawer-is-closed', () => isOpen);
        if (!isOpen) {
            setTimeout(() => this.host.classList.add('s-hidden'), 350);
        }
    }
    closeDrawer(reason) {
        if (!this.isClosable) {
            return;
        }
        salla.event.dispatch('drawer::close', { reason });
        this.host.removeAttribute('visible');
    }
    iconBlockClasses() {
        return {
            's-drawer-icon': true,
            's-drawer-bg-error': this.iconStyle == 'error',
            's-drawer-bg-success': this.iconStyle == 'success',
            's-drawer-bg-normal': !this.iconStyle,
            's-drawer-bg-primary': this.iconStyle == 'primary'
        };
    }
    getWidth() {
        return this.isLoading ? (this.hasSkeleton ? 'md' : 'xs') : this.width;
    }
    render() {
        this.host.id = this.host.id || 'salla-drawer';
        if (this.isLoading) {
            return (h(Host, { class: 'salla-drawer s-drawer s-drawer-container s-hidden', "aria-modal": "true", role: "dialog", onKeyUp: e => this.handleKeyUp(e) }, h("div", { class: "s-drawer-overlay s-drawer-overlay-leaving", ref: el => this.overlay = el, onClick: () => this.closeDrawer("backdropClick") }), h("div", { class: "s-drawer-wrapper s-drawer-wrapper-" + this.position }, h("div", { class: 's-drawer-body flex justify-center s-drawer-leaving s-drawer-' + this.position + ' s-drawer-' + this.getWidth() + (this.noPadding ? ' s-drawer-nopadding' : ' s-drawer-padding') }, h("slot", { name: "loading" }, h("salla-loading", null)), h("div", { class: "s-hidden" }, h("slot", null))))));
        }
        return (h(Host, { class: 'salla-drawer s-drawer s-drawer-container s-hidden', "aria-modal": "true", role: "dialog" }, h("div", { class: "s-drawer-overlay  s-drawer-overlay-leaving", ref: el => this.overlay = el, onClick: () => this.closeDrawer("backdropClick") }), h("div", { class: "s-drawer-wrapper s-drawer-wrapper-" + this.position }, h("div", { class: 's-drawer-body s-drawer-leaving s-drawer-' + this.position + ' s-drawer-' + this.getWidth() + (this.noPadding ? ' s-drawer-nopadding' : ' s-drawer-padding') }, h("div", { class: { 's-drawer-header': true, 's-drawer-is-center': this.centered } }, this.isClosable ?
            h("button", { class: "s-drawer-close", onClick: () => this.closeDrawer("closeButtonClick"), type: "button" }, h("span", { innerHTML: Cancel }))
            : '', this.drawerTitle || this.subTitle ?
            h("div", { class: "s-drawer-header-inner" }, h("slot", { name: 'icon' }, !!this.iconStyle ?
                h("div", { class: this.iconBlockClasses(), innerHTML: this.iconStyle == 'error' ? AlertEngineIcon : CheckCircle2 })
                : ''), h("div", { class: "s-drawer-header-content" }, this.drawerTitle ? h("div", { class: { 's-drawer-title': true, 's-drawer-title-below': this.subTitleFirst }, innerHTML: this.drawerTitle }) : '', this.subTitle ? h("p", { class: { 's-drawer-sub-title': true }, innerHTML: this.subTitle }) : ''))
            : ''), h("slot", null), h("slot", { name: "footer" })))));
    }
    //move the drawer as root dom, because we need the drawer to be outside the forms
    componentDidLoad() {
        document.body.append(this.host);
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "visible": ["handleVisible"]
    }; }
};
SallaDrawer.style = sallaDrawerCss;

const sallaFileUploadCss = "/*!\n * FilePond 4.32.8\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */.filepond--assistant{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--browser.filepond--browser{position:absolute;margin:0;padding:0;left:1em;top:1.75em;width:calc(100% - 2em);opacity:0;font-size:0}.filepond--data{position:absolute;width:0;height:0;padding:0;margin:0;border:none;visibility:hidden;pointer-events:none;contain:strict}.filepond--drip{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden;opacity:.1;pointer-events:none;border-radius:.5em;background:rgba(0,0,0,.01)}.filepond--drip-blob{-webkit-transform-origin:center center;transform-origin:center center;width:8em;height:8em;margin-left:-4em;margin-top:-4em;background:#292625;border-radius:50%}.filepond--drip-blob,.filepond--drop-label{position:absolute;top:0;left:0;will-change:transform,opacity}.filepond--drop-label{right:0;margin:0;color:#4f4f4f;display:flex;justify-content:center;align-items:center;height:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.filepond--drop-label.filepond--drop-label label{display:block;margin:0;padding:.5em}.filepond--drop-label label{cursor:default;font-size:.875em;font-weight:400;text-align:center;line-height:1.5}.filepond--label-action{text-decoration:underline;-webkit-text-decoration-skip:ink;text-decoration-skip-ink:auto;-webkit-text-decoration-color:#a7a4a4;text-decoration-color:#a7a4a4;cursor:pointer}.filepond--root[data-disabled] .filepond--drop-label label{opacity:.5}.filepond--file-action-button.filepond--file-action-button{font-size:1em;width:1.625em;height:1.625em;font-family:inherit;line-height:inherit;margin:0;padding:0;border:none;outline:none;will-change:transform,opacity}.filepond--file-action-button.filepond--file-action-button span{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--file-action-button.filepond--file-action-button svg{width:100%;height:100%}.filepond--file-action-button.filepond--file-action-button:after{position:absolute;left:-.75em;right:-.75em;top:-.75em;bottom:-.75em;content:\"\"}.filepond--file-action-button{cursor:auto;color:#fff;border-radius:50%;background-color:rgba(0,0,0,.5);background-image:none;box-shadow:0 0 0 0 hsla(0,0%,100%,0);transition:box-shadow .25s ease-in}.filepond--file-action-button:focus,.filepond--file-action-button:hover{box-shadow:0 0 0 .125em hsla(0,0%,100%,.9)}.filepond--file-action-button[disabled]{color:hsla(0,0%,100%,.5);background-color:rgba(0,0,0,.25)}.filepond--file-action-button[hidden]{display:none}.filepond--action-edit-item.filepond--action-edit-item{width:2em;height:2em;padding:.1875em}.filepond--action-edit-item.filepond--action-edit-item[data-align*=center]{margin-left:-.1875em}.filepond--action-edit-item.filepond--action-edit-item[data-align*=bottom]{margin-bottom:-.1875em}.filepond--action-edit-item-alt{border:none;line-height:inherit;background:transparent;font-family:inherit;color:inherit;outline:none;padding:0;margin:0 0 0 .25em;pointer-events:all;position:absolute}.filepond--action-edit-item-alt svg{width:1.3125em;height:1.3125em}.filepond--action-edit-item-alt span{font-size:0;opacity:0}.filepond--file-info{position:static;display:flex;flex-direction:column;align-items:flex-start;flex:1;margin:0 .5em 0 0;min-width:0;will-change:transform,opacity;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.filepond--file-info *{margin:0}.filepond--file-info .filepond--file-info-main{font-size:.75em;line-height:1.2;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;width:100%}.filepond--file-info .filepond--file-info-sub{font-size:.625em;opacity:.5;transition:opacity .25s ease-in-out;white-space:nowrap}.filepond--file-info .filepond--file-info-sub:empty{display:none}.filepond--file-status{position:static;display:flex;flex-direction:column;align-items:flex-end;flex-grow:0;flex-shrink:0;margin:0;min-width:2.25em;text-align:right;will-change:transform,opacity;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.filepond--file-status *{margin:0;white-space:nowrap}.filepond--file-status .filepond--file-status-main{font-size:.75em;line-height:1.2}.filepond--file-status .filepond--file-status-sub{font-size:.625em;opacity:.5;transition:opacity .25s ease-in-out}.filepond--file-wrapper.filepond--file-wrapper{border:none;margin:0;padding:0;min-width:0;height:100%}.filepond--file-wrapper.filepond--file-wrapper>legend{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--file{position:static;display:flex;height:100%;align-items:flex-start;padding:.5625em;color:#fff;border-radius:.5em}.filepond--file .filepond--file-status{margin-left:auto;margin-right:2.25em}.filepond--file .filepond--processing-complete-indicator{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:3}.filepond--file .filepond--file-action-button,.filepond--file .filepond--processing-complete-indicator,.filepond--file .filepond--progress-indicator{position:absolute}.filepond--file [data-align*=left]{left:.5625em}.filepond--file [data-align*=right]{right:.5625em}.filepond--file [data-align*=center]{left:calc(50% - .8125em)}.filepond--file [data-align*=bottom]{bottom:1.125em}.filepond--file [data-align=center]{top:calc(50% - .8125em)}.filepond--file .filepond--progress-indicator{margin-top:.1875em}.filepond--file .filepond--progress-indicator[data-align*=right]{margin-right:.1875em}.filepond--file .filepond--progress-indicator[data-align*=left]{margin-left:.1875em}[data-filepond-item-state*=error] .filepond--file-info,[data-filepond-item-state*=invalid] .filepond--file-info,[data-filepond-item-state=cancelled] .filepond--file-info{margin-right:2.25em}[data-filepond-item-state~=processing] .filepond--file-status-sub{opacity:0}[data-filepond-item-state~=processing] .filepond--action-abort-item-processing~.filepond--file-status .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-error] .filepond--file-status-sub{opacity:0}[data-filepond-item-state=processing-error] .filepond--action-retry-item-processing~.filepond--file-status .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-complete] .filepond--action-revert-item-processing svg{-webkit-animation:fall .5s linear .125s both;animation:fall .5s linear .125s both}[data-filepond-item-state=processing-complete] .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-complete] .filepond--file-info-sub,[data-filepond-item-state=processing-complete] .filepond--processing-complete-indicator:not([style*=hidden])~.filepond--file-status .filepond--file-status-sub{opacity:0}[data-filepond-item-state=processing-complete] .filepond--action-revert-item-processing~.filepond--file-info .filepond--file-info-sub{opacity:.5}[data-filepond-item-state*=error] .filepond--file-wrapper,[data-filepond-item-state*=error] .filepond--panel,[data-filepond-item-state*=invalid] .filepond--file-wrapper,[data-filepond-item-state*=invalid] .filepond--panel{-webkit-animation:shake .65s linear both;animation:shake .65s linear both}[data-filepond-item-state*=busy] .filepond--progress-indicator svg{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes shake{10%,90%{-webkit-transform:translateX(-.0625em);transform:translateX(-.0625em)}20%,80%{-webkit-transform:translateX(.125em);transform:translateX(.125em)}30%,50%,70%{-webkit-transform:translateX(-.25em);transform:translateX(-.25em)}40%,60%{-webkit-transform:translateX(.25em);transform:translateX(.25em)}}@keyframes shake{10%,90%{-webkit-transform:translateX(-.0625em);transform:translateX(-.0625em)}20%,80%{-webkit-transform:translateX(.125em);transform:translateX(.125em)}30%,50%,70%{-webkit-transform:translateX(-.25em);transform:translateX(-.25em)}40%,60%{-webkit-transform:translateX(.25em);transform:translateX(.25em)}}@-webkit-keyframes fall{0%{opacity:0;-webkit-transform:scale(.5);transform:scale(.5);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}70%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}to{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes fall{0%{opacity:0;-webkit-transform:scale(.5);transform:scale(.5);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}70%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}to{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}.filepond--hopper[data-hopper-state=drag-over]>*{pointer-events:none}.filepond--hopper[data-hopper-state=drag-over]:after{content:\"\";position:absolute;left:0;top:0;right:0;bottom:0;z-index:100}.filepond--progress-indicator{z-index:103}.filepond--file-action-button{z-index:102}.filepond--file-status{z-index:101}.filepond--file-info{z-index:100}.filepond--item{position:absolute;top:0;left:0;right:0;z-index:1;padding:0;margin:.25em;will-change:transform,opacity;touch-action:auto}.filepond--item>.filepond--panel{z-index:-1}.filepond--item>.filepond--panel .filepond--panel-bottom{box-shadow:0 .0625em .125em -.0625em rgba(0,0,0,.25)}.filepond--item>.filepond--file-wrapper,.filepond--item>.filepond--panel{transition:opacity .15s ease-out}.filepond--item[data-drag-state]{cursor:-webkit-grab;cursor:grab}.filepond--item[data-drag-state]>.filepond--panel{transition:box-shadow .125s ease-in-out;box-shadow:0 0 0 transparent}.filepond--item[data-drag-state=drag]{cursor:-webkit-grabbing;cursor:grabbing}.filepond--item[data-drag-state=drag]>.filepond--panel{box-shadow:0 .125em .3125em rgba(0,0,0,.325)}.filepond--item[data-drag-state]:not([data-drag-state=idle]){z-index:2}.filepond--item-panel{background-color:#64605e}[data-filepond-item-state=processing-complete] .filepond--item-panel{background-color:#369763}[data-filepond-item-state*=error] .filepond--item-panel,[data-filepond-item-state*=invalid] .filepond--item-panel{background-color:#c44e47}.filepond--item-panel{border-radius:.5em;transition:background-color .25s}.filepond--list-scroller{position:absolute;top:0;left:0;right:0;margin:0;will-change:transform}.filepond--list-scroller[data-state=overflow] .filepond--list{bottom:0;right:0}.filepond--list-scroller[data-state=overflow]{overflow-y:scroll;overflow-x:hidden;-webkit-overflow-scrolling:touch;-webkit-mask:linear-gradient(180deg,#000 calc(100% - .5em),transparent);mask:linear-gradient(180deg,#000 calc(100% - .5em),transparent)}.filepond--list-scroller::-webkit-scrollbar{background:transparent}.filepond--list-scroller::-webkit-scrollbar:vertical{width:1em}.filepond--list-scroller::-webkit-scrollbar:horizontal{height:0}.filepond--list-scroller::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.3);border-radius:99999px;border:.3125em solid transparent;background-clip:content-box}.filepond--list.filepond--list{position:absolute;top:0;margin:0;padding:0;list-style-type:none;will-change:transform}.filepond--list{left:.75em;right:.75em}.filepond--root[data-style-panel-layout~=integrated]{width:100%;height:100%;max-width:none;margin:0}.filepond--root[data-style-panel-layout~=circle] .filepond--panel-root,.filepond--root[data-style-panel-layout~=integrated] .filepond--panel-root{border-radius:0}.filepond--root[data-style-panel-layout~=circle] .filepond--panel-root>*,.filepond--root[data-style-panel-layout~=integrated] .filepond--panel-root>*{display:none}.filepond--root[data-style-panel-layout~=circle] .filepond--drop-label,.filepond--root[data-style-panel-layout~=integrated] .filepond--drop-label{bottom:0;height:auto;display:flex;justify-content:center;align-items:center;z-index:7}.filepond--root[data-style-panel-layout~=circle] .filepond--item-panel,.filepond--root[data-style-panel-layout~=integrated] .filepond--item-panel{display:none}.filepond--root[data-style-panel-layout~=compact] .filepond--list-scroller,.filepond--root[data-style-panel-layout~=integrated] .filepond--list-scroller{overflow:hidden;height:100%;margin-top:0;margin-bottom:0}.filepond--root[data-style-panel-layout~=compact] .filepond--list,.filepond--root[data-style-panel-layout~=integrated] .filepond--list{left:0;right:0;height:100%}.filepond--root[data-style-panel-layout~=compact] .filepond--item,.filepond--root[data-style-panel-layout~=integrated] .filepond--item{margin:0}.filepond--root[data-style-panel-layout~=compact] .filepond--file-wrapper,.filepond--root[data-style-panel-layout~=integrated] .filepond--file-wrapper{height:100%}.filepond--root[data-style-panel-layout~=compact] .filepond--drop-label,.filepond--root[data-style-panel-layout~=integrated] .filepond--drop-label{z-index:7}.filepond--root[data-style-panel-layout~=circle]{border-radius:99999rem;overflow:hidden}.filepond--root[data-style-panel-layout~=circle]>.filepond--panel{border-radius:inherit}.filepond--root[data-style-panel-layout~=circle]>.filepond--panel>*{display:none}.filepond--root[data-style-panel-layout~=circle] .filepond--file-info,.filepond--root[data-style-panel-layout~=circle] .filepond--file-status{display:none}.filepond--root[data-style-panel-layout~=circle] .filepond--action-edit-item{opacity:1!important;visibility:visible!important}@media not all and (min-resolution:0.001dpcm){@supports (-webkit-appearance:none) and (stroke-color:transparent){.filepond--root[data-style-panel-layout~=circle]{will-change:transform}}}.filepond--panel-root{border-radius:.5em;background-color:#f1f0ef}.filepond--panel{position:absolute;left:0;top:0;right:0;margin:0;height:100%!important;pointer-events:none}.filepond-panel:not([data-scalable=false]){height:auto!important}.filepond--panel[data-scalable=false]>div{display:none}.filepond--panel[data-scalable=true]{-webkit-transform-style:preserve-3d;transform-style:preserve-3d;background-color:transparent!important;border:none!important}.filepond--panel-bottom,.filepond--panel-center,.filepond--panel-top{position:absolute;left:0;top:0;right:0;margin:0;padding:0}.filepond--panel-bottom,.filepond--panel-top{height:.5em}.filepond--panel-top{border-bottom-left-radius:0!important;border-bottom-right-radius:0!important;border-bottom:none!important}.filepond--panel-top:after{content:\"\";position:absolute;height:2px;left:0;right:0;bottom:-1px;background-color:inherit}.filepond--panel-bottom,.filepond--panel-center{will-change:transform;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-origin:left top;transform-origin:left top;-webkit-transform:translate3d(0,.5em,0);transform:translate3d(0,.5em,0)}.filepond--panel-bottom{border-top-left-radius:0!important;border-top-right-radius:0!important;border-top:none!important}.filepond--panel-bottom:before{content:\"\";position:absolute;height:2px;left:0;right:0;top:-1px;background-color:inherit}.filepond--panel-center{height:100px!important;border-top:none!important;border-bottom:none!important;border-radius:0!important}.filepond--panel-center:not([style]){visibility:hidden}.filepond--progress-indicator{position:static;width:1.25em;height:1.25em;color:#fff;margin:0;pointer-events:none;will-change:transform,opacity}.filepond--progress-indicator svg{width:100%;height:100%;vertical-align:top;transform-box:fill-box}.filepond--progress-indicator path{fill:none;stroke:currentColor}.filepond--list-scroller{z-index:6}.filepond--drop-label{z-index:5}.filepond--drip{z-index:3}.filepond--root>.filepond--panel{z-index:2}.filepond--browser{z-index:1}.filepond--root{box-sizing:border-box;position:relative;margin-bottom:1em;font-size:1rem;line-height:normal;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:450;text-align:left;text-rendering:optimizeLegibility;direction:ltr;contain:layout style size}.filepond--root *{box-sizing:inherit;line-height:inherit}.filepond--root :not(text){font-size:inherit}.filepond--root[data-disabled]{pointer-events:none}.filepond--root[data-disabled] .filepond--list-scroller{pointer-events:all}.filepond--root[data-disabled] .filepond--list{pointer-events:none}.filepond--root .filepond--drop-label{min-height:4.75em}.filepond--root .filepond--list-scroller{margin-top:1em;margin-bottom:1em}.filepond--root .filepond--credits{position:absolute;right:0;opacity:.4;line-height:.85;font-size:11px;color:inherit;text-decoration:none;z-index:3;bottom:-14px}.filepond--root .filepond--credits[style]{top:0;bottom:auto;margin-top:14px}/*!\n * FilePondPluginImagePreview 4.6.12\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */.filepond--image-preview-markup{position:absolute;left:0;top:0}.filepond--image-preview-wrapper{z-index:2}.filepond--image-preview-overlay{display:block;position:absolute;left:0;top:0;width:100%;min-height:5rem;max-height:7rem;margin:0;opacity:0;z-index:2;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.filepond--image-preview-overlay svg{width:100%;height:auto;color:inherit;max-height:inherit}.filepond--image-preview-overlay-idle{mix-blend-mode:multiply;color:rgba(40, 40, 40, 0.85)}.filepond--image-preview-overlay-success{mix-blend-mode:normal;color:rgba(54, 151, 99, 1)}.filepond--image-preview-overlay-failure{mix-blend-mode:normal;color:rgba(196, 78, 71, 1)}@supports (-webkit-marquee-repetition: infinite) and\n  ((-o-object-fit: fill) or (object-fit: fill)){.filepond--image-preview-overlay-idle{mix-blend-mode:normal}}.filepond--image-preview-wrapper{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:absolute;left:0;top:0;right:0;height:100%;margin:0;border-radius:0.45em;overflow:hidden;background:rgba(0, 0, 0, 0.01)}.filepond--image-preview{position:absolute;left:0;top:0;z-index:1;display:flex;align-items:center;height:100%;width:100%;pointer-events:none;background:#222;will-change:transform, opacity}.filepond--image-clip{position:relative;overflow:hidden;margin:0 auto;}.filepond--image-clip[data-transparency-indicator='grid'] img,.filepond--image-clip[data-transparency-indicator='grid'] canvas{background-color:#fff;background-image:url(\"data:image/svg+xml,%3Csvg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg' fill='%23eee'%3E%3Cpath d='M0 0 H50 V50 H0'/%3E%3Cpath d='M50 50 H100 V100 H50'/%3E%3C/svg%3E\");background-size:1.25em 1.25em}.filepond--image-bitmap,.filepond--image-vector{position:absolute;left:0;top:0;will-change:transform}.filepond--root[data-style-panel-layout~='integrated'] .filepond--image-preview-wrapper{border-radius:0}.filepond--root[data-style-panel-layout~='integrated'] .filepond--image-preview{height:100%;display:flex;justify-content:center;align-items:center}.filepond--root[data-style-panel-layout~='circle'] .filepond--image-preview-wrapper{border-radius:99999rem}.filepond--root[data-style-panel-layout~='circle'] .filepond--image-preview-overlay{top:auto;bottom:0;-webkit-transform:scaleY(-1);transform:scaleY(-1)}.filepond--root[data-style-panel-layout~='circle'] .filepond--file .filepond--file-action-button[data-align*='bottom']:not([data-align*='center']){margin-bottom:0.325em}.filepond--root[data-style-panel-layout~='circle'] .filepond--file [data-align*='left']{left:calc(50% - 3em)}.filepond--root[data-style-panel-layout~='circle'] .filepond--file [data-align*='right']{right:calc(50% - 3em)}.filepond--root[data-style-panel-layout~='circle'] .filepond--progress-indicator[data-align*='bottom'][data-align*='left'],.filepond--root[data-style-panel-layout~='circle'] .filepond--progress-indicator[data-align*='bottom'][data-align*='right']{margin-bottom:calc(0.325em + 0.1875em)}.filepond--root[data-style-panel-layout~='circle'] .filepond--progress-indicator[data-align*='bottom'][data-align*='center']{margin-top:0;margin-bottom:0.1875em;margin-left:0.1875em}/*!\n * FilePondPluginImageEdit 1.6.3\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */.filepond--action-edit-item.filepond--action-edit-item{width:2em;height:2em;padding:0.1875em}.filepond--action-edit-item.filepond--action-edit-item[data-align*='center']{margin-left:-0.1875em}.filepond--action-edit-item.filepond--action-edit-item[data-align*='bottom']{margin-bottom:-0.1875em}.filepond--action-edit-item-alt{border:none;line-height:inherit;background:transparent;font-family:inherit;color:inherit;outline:none;padding:0;margin:0 0 0 0.25em;pointer-events:all;position:absolute}.filepond--action-edit-item-alt svg{width:1.3125em;height:1.3125em}.filepond--action-edit-item-alt span{font-size:0;opacity:0}.filepond--root[data-style-panel-layout~='circle'] .filepond--action-edit-item{opacity:1 !important;visibility:visible !important}.s-file-upload-wrapper .filepond--file-info-main{-webkit-line-clamp:1;display:-webkit-box;-webkit-box-orient:vertical}";

const SallaFileUpload = class {
    /**
     * Lazy load FilePond and all plugins
     * This reduces initial bundle size by ~200-250KB
     */
    async loadFilePond() {
        if (this.filePondLoaded)
            return;
        try {
            const [FilePondModule, FilePondPluginFileValidateSize, FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageEdit, FilePondPluginFileValidateType, FilePondPluginFilePoster] = await Promise.all([
                import('./filepond-U0ZLYqIx.js').then(function (n) { return n.f; }),
                import('./filepond-plugin-file-validate-size-Dvi3pvzQ.js').then(function (n) { return n.f; }),
                import('./filepond-plugin-image-exif-orientation-BvISmjH_.js').then(function (n) { return n.f; }),
                import('./filepond-plugin-image-preview-BCKrsf9H.js').then(function (n) { return n.f; }),
                import('./filepond-plugin-image-edit-DjoeTrI6.js').then(function (n) { return n.f; }),
                import('./filepond-plugin-file-validate-type-B01LNHct.js').then(function (n) { return n.f; }),
                import('./filepond-plugin-file-poster-iP50zFtW.js').then(function (n) { return n.f; })
            ]);
            this.FilePond = FilePondModule;
            // Register plugins
            this.FilePond.registerPlugin(FilePondPluginImagePreview.default, FilePondPluginImageExifOrientation.default, FilePondPluginFileValidateSize.default, FilePondPluginImageEdit.default, FilePondPluginFileValidateType.default, FilePondPluginFilePoster.default);
            this.filePondLoaded = true;
        }
        catch (error) {
            console.error('Failed to load FilePond:', error);
            salla.notify?.error?.('Failed to load file uploader. Please refresh the page.');
            throw error;
        }
    }
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.added = createEvent(this, "added");
        this.invalidInput = createEvent(this, "invalidInput");
        this.uploaded = createEvent(this, "uploaded");
        this.removed = createEvent(this, "removed");
        this.filePondLoaded = false;
        this.max_images_count = (count) => salla.lang.get('common.uploader.max_images_count', { count });
        this.max_count_hint = (count) => salla.lang.get('common.uploader.max_count_hint', { count });
        this.uploadedFiles = [];
        this.isListScrollerListenerAdded = false;
        this.showMaxCountHint = false;
        /**
         * Set the component to be profile image uploader with a preview and a circular shape
         */
        this.profileImage = false;
        /**
         * Accepted file types
         */
        this.accept = "image/png, image/jpeg, image/jpg, image/gif";
        /**
         * The submit request method.
         */
        this.method = 'POST';
        /**
         * json formData to be injected in the submit request
         */
        this.formData = "{}";
        /**
         * Enable or disable drag n' drop
         */
        this.allowDrop = true;
        /**
         * Enable or disable file browser
         */
        this.allowBrowse = true;
        /**
         * Allow drop to replace a file, only works when allowMultiple is false
         */
        this.allowReplace = true;
        /**
         * Enable or disable the revert processing button
         */
        this.allowRevert = true;
        /**
         * When set to false the remove button is hidden and disabled
         */
        this.allowRemove = true;
        /**
         * Enable or disable preview mode
         */
        this.allowImagePreview = true;
        /**
         * Fixed image preview height, overrides min and max preview height
         */
        this.imagePreviewHeight = null;
        /**
         * Fixed image poster height, overrides min and max preview height
         */
        this.filePosterHeight = null;
        /**
         * The maximum number of files that the pond can handle
         */
        this.maxFilesCount = 1;
        /**
         * The maxmimum number of files that can be uploaded in parallel
         */
        this.maxParallelUploads = 3;
        /**
         * Set to 'after' to add files to end of list (when dropped at the top of the list or added using browse or paste),
         * set to 'before' to add files at start of list.
         * Set to a compare function to automatically sort items when added
         */
        this.itemInsertLocation = 'after';
        /**
         * The interval to use before showing each item being added to the list
         */
        this.itemInsertInterval = 75;
        /**
         * Require drop on the FilePond element itself to catch the file.
         */
        this.dropOnElement = true;
        /**
         * Ignored file names when handling dropped directories. Dropping directories is not supported on all browsers.
         */
        this.ignoredFiles = ['.ds_store', 'thumbs.db', 'desktop.ini'];
        /**
         * The size of a chunk in bytes
         */
        this.chunkSize = 5000000;
        /**
         * Amount of times, and delayes, between retried uploading of a chunk
         */
        this.chunkRetryDelays = [500, 1000, 3000];
        /// Labels Props
        /**
         * The decimal separator used to render numbers. By default this is determined automatically.
         */
        this.labelDecimalSeparator = undefined;
        /**
         * The thousdands separator used to render numbers. By default this is determined automatically.
         */
        this.labelThousandsSeparator = undefined;
        /// SVG Icons
        /**
         * The icon used for remove actions
         */
        this.iconRemove = '<svg>...</svg>';
        /**
         * The icon used for process actions
         */
        this.iconProcess = '<svg>...</svg>';
        /**
         * The icon used for retry actions
         */
        this.iconRetry = '<svg>...</svg>';
        /**
         * The icon used for undo actions
         */
        this.iconUndo = '<svg>...</svg>';
        this.openFileBrowser = () => {
            this.filepond.browse();
        };
        //if cartItemIdIsPassed, we need to set the url
        if (!this.url && this.cartItemId) {
            this.url = salla.cart.getUploadImageEndpoint();
            this.instantUpload = true;
        }
        if (!this.url && this.profileImage) {
            this.url = salla.url.api('profile/update');
            this.instantUpload = true;
            this.host.hasAttribute('name') || (this.name = 'avatar');
        }
        if (!this.name) {
            this.name = 'file';
        }
        salla.lang.onLoaded(() => {
            this.host.querySelectorAll('.filepond--drop-label>label').forEach(label => label.innerHTML = this.getLabel());
            if (this.filepond) {
                this.filepond.labelFileTypeNotAllowed = salla.lang.get('common.uploader.invalid_type');
                this.filepond.labelMaxFileSizeExceeded = salla.lang.get('common.uploader.too_large');
                this.filepond.labelFileSizeNotAvailable = salla.lang.get('common.uploader.size_not_available');
                this.filepond.labelFileLoading = salla.lang.get('common.elements.loading');
                this.filepond.labelFileLoadError = salla.lang.get('common.uploader.failed_to_load');
                this.filepond.labelFileProcessingAborted = salla.lang.get('common.uploader.upload_cancelled');
                this.filepond.labelTapToCancel = salla.lang.get("common.elements.cancel");
                this.filepond.labelTapToRetry = salla.lang.get("common.elements.retry");
                this.filepond.labelButtonRemoveItem = salla.lang.get("common.elements.remove");
                this.filepond.labelButtonUndoItemProcessing = salla.lang.get("common.elements.undo");
                this.filepond.labelButtonProcessItem = salla.lang.get("common.uploader.upload");
                this.filepond.labelFileProcessingComplete = salla.lang.get('common.uploader.file_processing_complete'),
                    this.filepond.labelTapToUndo = salla.lang.get('common.uploader.tap_to_undo'),
                    this.filepond.labelFileProcessing = salla.lang.get('common.uploader.file_processing'),
                    this.filepond.labelFileProcessingError = salla.lang.get('common.uploader.file_processing_error');
            }
            const setNestedAsync = (lang, key, value) => {
                return new Promise((resolve) => {
                    salla.helpers.setNested(salla.lang.messages[lang], key, value);
                    resolve(true);
                });
            };
            const setTranslations = async () => {
                await setNestedAsync('ar.trans', 'common.uploader.max_images_count', '.ÿ£ÿ∂ŸÅ :count ÿµŸàÿ± ŸÉÿ≠ÿØ ÿ£ŸÇÿµŸâ');
                await setNestedAsync('en.trans', 'common.uploader.max_images_count', 'Add up to :count images maximum.');
                await setNestedAsync('ar.trans', 'common.uploader.max_count_hint', 'ŸäŸÖŸÉŸÜŸÉ ÿ±ŸÅÿπ ÿ≠ÿ™Ÿâ :count ÿµŸàÿ±');
                await setNestedAsync('en.trans', 'common.uploader.max_count_hint', 'You can upload up to :count images.');
            };
            this.max_count_hint = (count) => salla.lang.get('common.uploader.max_count_hint', { count });
            this.max_images_count = (count) => salla.lang.get('common.uploader.max_images_count', { count });
            setTranslations();
        });
    }
    addedHandler(error, file) {
        this.added.emit({ error: error, file: file });
        //if the file passed on initiate will not have type
        this.host.querySelector('.filepond--root').classList.remove('s-file-upload-has-error');
        if (error || !file.file.type) {
            this.host.querySelector('.filepond--root').classList.add('s-file-upload-has-error');
            return;
        }
        let container = new DataTransfer;
        let fileInput = this.getFormDataFileInput();
        // @ts-ignore
        container.items.add(file.file);
        fileInput.type = 'file';
        fileInput.files = container.files;
        fileInput.dispatchEvent(new window.Event('change', { bubbles: true }));
    }
    uploadedHandler() {
        let fileInput = this.getFormDataFileInput();
        fileInput.type = 'hidden';
        fileInput.value = this.value;
        this.hiddenInput.value = this.value;
        fileInput.dispatchEvent(new window.Event('change', { bubbles: true }));
        return this.uploaded.emit(this.value);
    }
    removedHandler(deletedFile) {
        let fileInput = this.getFormDataFileInput();
        fileInput.type = 'hidden';
        fileInput.value = '';
        this.host.closest('.s-product-options-option')?.removeAttribute('data-has-value');
        if (salla.url.is_page("cart") && deletedFile.getMetadata('id')) {
            salla.cart.api.deleteImage(deletedFile.getMetadata('id'));
        }
        if (this.height) {
            setTimeout(() => this.host.querySelector('.filepond--root').style.height = this.height, 1000);
        }
        this.hiddenInput.value = '';
        fileInput.dispatchEvent(new window.Event('change', { bubbles: true }));
        let toDelete = this.allowMultiple ? deletedFile.getMetadata('id') : deletedFile;
        return this.removed.emit(toDelete);
    }
    /**
     *  Method to set option for filepond
     * */
    async setOption(key, value) {
        this.filepond[key] = value;
    }
    getLabel() {
        if (this.labelIdle) {
            //some times we are passing label before translations is loaded, so here we will make sure that all translations are translated
            return this.labelIdle
                .replace('common.uploader.drag_and_drop', salla.lang.get('common.uploader.drag_and_drop'))
                .replace('common.uploader.browse', salla.lang.get('common.uploader.browse'));
        }
        return `${salla.lang.get('common.uploader.drag_and_drop')}<span class="filepond--label-action"> ${salla.lang.get('common.uploader.browse')} </span>`;
    }
    /**
     *
     * This method will fire head request to get the file size, it's head request,so it will be too fast.
     */
    getFileSize(url) {
        let http = new XMLHttpRequest();
        http.open('HEAD', url, false); // false = Synchronous
        http.send(null); // it will stop here until this http request is complete
        return http.status === 200 ? http.getResponseHeader('content-length') : '';
    }
    getFormDataFileInput() {
        return this.host.querySelector('.filepond--data input');
    }
    getFiles() {
        if (!this.value && !this.files) {
            return [];
        }
        try {
            let files = this.files
                ? typeof this.files === 'string' ? JSON.parse(this.files) : this.files
                : this.value.split(',').map(file => ({ url: file }));
            if (files.length) {
                this.host.closest('.s-product-options-option')?.setAttribute('data-has-value', 'true');
            }
            return files.map(file => ({
                source: file.id ? `${file.id}` : file.url,
                options: {
                    type: 'local',
                    file: {
                        name: file.url.substring(file.url.lastIndexOf('/') + 1),
                        size: this.getFileSize(file.url)
                    },
                    metadata: { poster: file.url, name: file.url, id: file.id },
                },
            }));
        }
        catch (e) {
            salla.log('failed To get files from: ' + (this.files || this.value));
        }
        return [];
    }
    async componentWillLoad() {
        // Load FilePond before component renders (reduces initial bundle by ~200-250KB)
        await this.loadFilePond();
        if (!this.labelIdle) {
            this.labelIdle = this.host.innerHTML;
            this.host.innerHTML = '';
        }
    }
    render() {
        return (h(Host, { key: '0023b56c4e837cf95514b430a6ecf7c4c287f6ca', class: {
                "s-file-upload": true,
                "s-file-upload-profile-image": this.profileImage,
                "s-file-upload-multiple": this.allowMultiple,
            } }, h("input", { key: '985c6e1e643e2d4d6ac8f3fbbdba57fa5461582a', type: "file", name: this.name, value: this.value, ref: ele => this.fileUploader = ele, required: this.required, class: "s-file-upload-wrapper s-file-upload-input", accept: this.accept }), this.allowMultiple && this.showMaxCountHint ? h("div", { class: "s-file-upload-hint s-hidden" }, this.max_count_hint(this.maxFilesCount)) : '', h("input", { key: 'a500ae487c1a29e5b6ac815d85c5f520391587d3', class: "s-hidden", name: 'hidden-' + this.name, required: this.required, value: this.value, ref: input => this.hiddenInput = input })));
    }
    componentDidLoad() {
        let files = this.getFiles();
        this.filepond = this.FilePond.create(this.fileUploader, {
            name: this.payloadName || this.name,
            //@ts-ignore
            files: files,
            required: this.required,
            disabled: this.disabled,
            allowDrop: this.allowDrop,
            allowBrowse: this.allowBrowse,
            allowPaste: this.allowPaste,
            allowMultiple: this.allowMultiple, //||files.length,
            allowReplace: this.allowReplace,
            allowRevert: this.allowRevert,
            allowProcess: this.allowProcess,
            allowReorder: this.allowReorder,
            storeAsFile: this.storeAsFile,
            forceRevert: this.forceRevert,
            maxFiles: this.maxFilesCount,
            imagePreviewHeight: this.imagePreviewHeight,
            filePosterHeight: this.filePosterHeight,
            allowImagePreview: this.allowImagePreview,
            maxParallelUploads: this.maxParallelUploads,
            checkValidity: this.checkValidity,
            itemInsertLocation: this.itemInsertLocation,
            itemInsertInterval: this.itemInsertInterval,
            credits: this.credits,
            dropOnPage: this.dropOnPage,
            dropOnElement: this.dropOnElement,
            dropValidation: this.dropValidation,
            ignoredFiles: this.ignoredFiles,
            onaddfile: (error, file) => this.addedHandler(error, file),
            onwarning: (error, _file, _status) => {
                if (error.body === "Max files") {
                    salla.notify.error(this.max_images_count(this.maxFilesCount));
                }
            },
            onprocessfile: (error, file) => {
                if (this.allowMultiple && !error) {
                    const lastUploadedFile = this.uploadedFiles[this.uploadedFiles.length - 1];
                    if (lastUploadedFile) {
                        file.setMetadata('id', lastUploadedFile.id, true);
                        file.setMetadata('url', lastUploadedFile.url, true);
                    }
                }
            },
            onupdatefiles: (fileItems) => {
                const dropLabel = this.host.querySelector('.filepond--drop-label');
                const listScroller = this.host.querySelector('.filepond--list-scroller');
                if (this.allowMultiple) {
                    if (fileItems.length > 0) {
                        dropLabel.classList.add('s-hidden');
                        if (!this.isListScrollerListenerAdded && fileItems.length < this.maxFilesCount) {
                            this.showMaxCountHint = true;
                            listScroller.addEventListener('click', this.openFileBrowser);
                            this.isListScrollerListenerAdded = true;
                        }
                    }
                    else {
                        dropLabel.classList.remove('s-hidden');
                        if (this.isListScrollerListenerAdded) {
                            listScroller.removeEventListener('click', this.openFileBrowser);
                            this.isListScrollerListenerAdded = false;
                        }
                    }
                    // Check if fileItems length equals maxFilesCount and remove event listener
                    if (fileItems.length === this.maxFilesCount && this.isListScrollerListenerAdded) {
                        listScroller.removeEventListener('click', this.openFileBrowser);
                        this.isListScrollerListenerAdded = false;
                        this.showMaxCountHint = false;
                    }
                }
            },
            server: {
                url: this.url,
                method: this.method,
                revert: null,
                // @ts-ignore
                process: {
                    onload: (response) => {
                        let responseData = JSON.parse(response).data;
                        if (this.allowMultiple && Array.isArray(responseData) && responseData.length > 0) {
                            const fileId = `${this.host.id}-${Math.floor(100 + Math.random() * 900)}`;
                            this.uploadedFiles.push({
                                id: fileId,
                                url: responseData[0]
                            });
                            this.value = {
                                id: fileId,
                                url: responseData[0]
                            };
                        }
                        else {
                            this.value = responseData.filePath || responseData.url;
                        }
                        this.uploadedHandler();
                        return this.value;
                    },
                    headers: salla.api.getHeaders(),
                    onerror: response => {
                        try {
                            let field = JSON.parse(response).error.fields;
                            field = field[this.payloadName || this.name];
                            return (field && field[0]) || salla.lang.get('common.errors.error_occurred');
                        }
                        catch (e) {
                            salla.log('FileUpload:: Error', e);
                            return salla.lang.get('common.errors.error_occurred');
                        }
                    },
                    ondata: formData => {
                        if (this.allowMultiple) {
                            const newFormData = new FormData();
                            // ? This line suppose to send all files in one request but its not working properly
                            // const filesArray = this.filepond.getFiles().map(file => file.file);
                            formData.forEach((value) => {
                                newFormData.append(`files[]`, value);
                            });
                            newFormData.append("type", this.type);
                            return newFormData;
                        }
                        if (this.payloadName && this.payloadName != this.name && !this.allowMultiple) {
                            formData.append(this.payloadName, this.filepond.getFile(0).file);
                            formData.delete(this.name);
                        }
                        if (this.cartItemId) {
                            formData.append('cart_item_id', this.cartItemId);
                        }
                        try {
                            Object.entries(JSON.parse(this.formData)).forEach((value) => value[1] && formData.append(value[0], value[1]));
                        }
                        catch (e) {
                            salla.log('Error to inject formData', e);
                        }
                        return formData;
                    }
                },
            },
            instantUpload: this.instantUpload,
            chunkUploads: this.chunkUploads,
            chunkForce: this.chunkForce,
            chunkSize: this.chunkSize,
            chunkRetryDelays: this.chunkRetryDelays,
            labelDecimalSeparator: this.labelDecimalSeparator,
            labelThousandsSeparator: this.labelThousandsSeparator,
            labelIdle: this.getLabel(),
            acceptedFileTypes: this.accept.replace(/\s+/g, '').split(','),
            labelFileTypeNotAllowed: salla.lang.get('common.uploader.invalid_type'),
            labelFileProcessingComplete: salla.lang.get('common.uploader.file_processing_complete'),
            labelTapToUndo: salla.lang.get('common.uploader.tap_to_undo'),
            labelFileProcessing: salla.lang.get('common.uploader.file_processing'),
            labelFileProcessingError: salla.lang.get('common.uploader.file_processing_error'),
            fileValidateTypeLabelExpectedTypes: '{allButLastType}, {lastType}',
            labelMaxFileSizeExceeded: salla.lang.get('common.uploader.too_large'),
            labelMaxFileSize: '{filesize}',
            maxFileSize: `${salla.config.get('store.settings.upload_size')}KB` || this.maxFileSize,
            beforeRemoveFile: (deletedFile) => new Promise((resolve) => {
                this.removedHandler(deletedFile);
                resolve(true);
            }),
        });
        this.hiddenInput.addEventListener('invalid', e => {
            this.invalidInput.emit(e);
        });
        this.hiddenInput.addEventListener('change', () => {
            this.hiddenInput.setCustomValidity('');
            this.hiddenInput.reportValidity();
        });
    }
    get host() { return getElement(this); }
};
SallaFileUpload.style = sallaFileUploadCss;

var Images = `<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>images</title>
<path d="M22.667 29.333h-13.333c-3.676 0-6.667-2.991-6.667-6.667v-13.333c0-0.737-0.597-1.333-1.333-1.333s-1.333 0.596-1.333 1.333v13.333c0 5.145 4.187 9.333 9.333 9.333h13.333c0.736 0 1.333-0.596 1.333-1.333s-0.597-1.333-1.333-1.333zM22.667 5.333c-2.205 0-4 1.795-4 4s1.795 4 4 4 4-1.795 4-4-1.795-4-4-4zM22.667 10.667c-0.735 0-1.333-0.597-1.333-1.333s0.599-1.333 1.333-1.333 1.333 0.597 1.333 1.333-0.599 1.333-1.333 1.333zM25.333 0h-13.333c-3.676 0-6.667 2.991-6.667 6.667v13.333c0 1.055 0.268 2.040 0.707 2.927 0.039 0.099 0.088 0.188 0.151 0.277 1.137 2.053 3.301 3.463 5.809 3.463h13.333c3.676 0 6.667-2.991 6.667-6.667v-13.333c0-3.676-2.991-6.667-6.667-6.667zM12 24c-1.244 0-2.344-0.583-3.077-1.476l5.721-7.047 6.629 8.523zM29.333 20c0 2.205-1.795 4-4 4h-0.68l-8.933-11.485c-0.251-0.32-0.633-0.511-1.039-0.515h-0.015c-0.401 0-0.781 0.181-1.035 0.492l-5.632 6.935v-12.76c0-2.205 1.795-4 4-4h13.333c2.205 0 4 1.795 4 4z"></path>
</svg>
`;

var GiftSharing = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>gift-sharing</title>
<path d="M5 32h-4c-0.552 0-1-0.448-1-1v0-14c0-0.552 0.448-1 1-1v0h4c0.552 0 1 0.448 1 1v0 14c0 0.552-0.448 1-1 1v0zM2 30h2v-12h-2zM19.32 30h-14.32v-2h14.32c0.693-0.005 1.329-0.242 1.837-0.637l-0.007 0.005 8.45-6.568c0.216-0.16 0.365-0.402 0.399-0.679l0-0.005c0.005-0.036 0.007-0.077 0.007-0.119 0-0.226-0.078-0.434-0.209-0.599l0.002 0.002c-0.16-0.216-0.401-0.364-0.677-0.399l-0.005-0.001c-0.034-0.004-0.073-0.007-0.113-0.007-0.227 0-0.436 0.078-0.601 0.208l0.002-0.002-7.126 5.526c-1.003 0.793-2.285 1.273-3.68 1.274h-6.6v-2h6.6c0.926-0.001 1.777-0.32 2.45-0.852l-0.008 0.006 7.126-5.526c0.492-0.39 1.122-0.625 1.807-0.625 0.135 0 0.268 0.009 0.398 0.027l-0.015-0.002c0.824 0.102 1.534 0.524 2.011 1.137l0.005 0.007c0.39 0.494 0.625 1.127 0.625 1.814 0 0.136-0.009 0.27-0.027 0.402l0.002-0.015c-0.106 0.819-0.529 1.523-1.141 1.995l-0.007 0.005-8.458 6.578c-0.834 0.649-1.894 1.043-3.047 1.050h-0.002zM11 26c-0.552 0-1-0.448-1-1s0.448-1 1-1v0c2.406-0.004 4.415-1.703 4.894-3.967l0.006-0.033h-10.9c-0.552 0-1-0.448-1-1s0.448-1 1-1v0h12c0.552 0 1 0.448 1 1v0c0 3.866-3.134 7-7 7v0zM24 12h-16c-1.105 0-2-0.895-2-2v0-2c0-1.105 0.895-2 2-2v0h16c1.105 0 2 0.895 2 2v0 2c0 1.105-0.895 2-2 2v0zM24 10v0zM8 8v2h16v-2zM23 18c-0.552 0-1-0.448-1-1v0-6c0-0.552 0.448-1 1-1s1 0.448 1 1v0 6c0 0.552-0.448 1-1 1v0zM9 16c-0.552 0-1-0.448-1-1v0-4c0-0.552 0.448-1 1-1s1 0.448 1 1v0 4c0 0.552-0.448 1-1 1v0zM16 16c-0.552 0-1-0.448-1-1v0-8c0-0.552 0.448-1 1-1s1 0.448 1 1v0 8c0 0.552-0.448 1-1 1v0zM16 8c-0.552-0-1-0.448-1-1 0-0.077 0.009-0.151 0.025-0.223l-0.001 0.007c0.314-1.849 0.963-3.5 1.887-4.961l-0.033 0.055c0.539-0.521 1.274-0.842 2.084-0.842 1.657 0 3 1.343 3 3 0 0.81-0.321 1.545-0.843 2.085l0.001-0.001c-1.405 0.891-3.056 1.541-4.824 1.845l-0.080 0.011c-0.065 0.015-0.139 0.024-0.216 0.024h-0zM19 3c-0.001 0-0.001 0-0.002 0-0.276 0-0.525 0.112-0.706 0.292l0-0c-0.391 0.669-0.703 1.444-0.897 2.264l-0.011 0.058c0.878-0.205 1.653-0.517 2.363-0.93l-0.041 0.022c0.18-0.181 0.292-0.43 0.292-0.706 0-0.551-0.446-0.999-0.998-1h-0zM16 8c-0.077-0-0.151-0.009-0.223-0.025l0.007 0.001c-1.848-0.315-3.499-0.965-4.959-1.888l0.055 0.032c-0.521-0.539-0.842-1.274-0.842-2.084 0-1.657 1.343-3 3-3 0.81 0 1.545 0.321 2.085 0.843l-0.001-0.001c0.891 1.405 1.541 3.056 1.845 4.824l0.011 0.080c0.015 0.066 0.024 0.141 0.024 0.218 0 0.552-0.448 1-1 1-0.001 0-0.001 0-0.002 0h0zM13 3c-0.001 0-0.001 0-0.002 0-0.552 0-1 0.448-1 1 0 0.277 0.112 0.527 0.294 0.708l0 0c0.669 0.391 1.444 0.703 2.264 0.897l0.058 0.011c-0.205-0.878-0.517-1.653-0.93-2.363l0.022 0.041c-0.181-0.181-0.43-0.293-0.706-0.294h-0z"></path>
</svg>
`;

var Alert = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>alert</title>
<path d="M16 13.333c-0.736 0-1.333 0.597-1.333 1.333v8c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-8c0-0.736-0.597-1.333-1.333-1.333zM16 9.327c-0.736 0-1.333 0.604-1.333 1.34s0.597 1.333 1.333 1.333 1.333-0.597 1.333-1.333v-0.013c0-0.736-0.597-1.327-1.333-1.327zM27.313 4.687c-6.237-6.237-16.389-6.239-22.628 0-6.237 6.239-6.237 16.389 0 22.628 3.119 3.119 7.216 4.679 11.313 4.679s8.195-1.559 11.313-4.679c6.24-6.239 6.24-16.391 0.001-22.628zM25.428 25.428c-5.199 5.197-13.657 5.197-18.857 0-5.197-5.199-5.197-13.659 0-18.857 5.199-5.197 13.659-5.197 18.857 0 5.199 5.2 5.199 13.659 0 18.857z"></path>
</svg>
`;

const sallaGiftingCss = ".s-gifting-steps-wrapper{transition:0.2s cubic-bezier(0.55, 0, 0.1, 1) 0s}.s-gifting-select{background-image:url(\"data:image/svg+xml;utf8,<svg version='1.1' fill='gray' xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'><title>keyboard_arrow_down</title><path d='M9.875 11.104l6.125 6.125 6.125-6.125 1.875 1.875-8 8-8-8z'></path></svg>\");background-size:24px;background-repeat:no-repeat;background-position:99%;appearance:none}[dir=rtl] .s-gifting-select{background-position:5px}.s-gifting-widget-vertical .s-list-tile-item [slot=title]{display:flex;align-items:center;gap:1.5rem}.s-gifting-widget-vertical .s-list-tile-item-content{width:100%}";

const SallaGifting = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.defaultEvent = "gifting:open";
        this.selectImageForYourGift = salla.lang.get('blocks.buy_as_gift.select_image_or_upload');
        this.currentStep = 1;
        this.showCalendar = false;
        this.showGiftText = false;
        this.currentLang = '';
        this.parentClass = "is-current-step-1";
        this.errors = {};
        this.gift = undefined;
        this.selectedGiftTextOption = undefined;
        this.selectedCountryId = undefined;
        this.selectedCountryCode = undefined;
        this.loadingCities = false;
        this.showTextArea = false;
        /// Gift Form Data
        this.selectedImage = undefined;
        this.uploadedImage = undefined;
        this.selectedText = undefined;
        this.hasError = false;
        this.timeZone = null;
        this.hostId = `salla-gifting-${Math.random().toString(36).slice(2, 10)}`;
        /**
         * The form selector to be used to get the form data
         */
        this.formSelector = 'form.product-form, form.form--product-options';
        salla.lang.onLoaded(() => {
            this.selectImageOrUpload = salla.lang.get('blocks.buy_as_gift.select_image_or_upload');
            this.selectImageForYourGift = salla.lang.get('blocks.buy_as_gift.select_image_for_your_gift');
            this.sectionTitle = salla.lang.get('blocks.buy_as_gift.gift_the_one_you_love');
            this.sectionSubtitle = salla.lang.get('blocks.buy_as_gift.gift_the_one_you_love_message');
            this.sectionBtnText = salla.lang.get('blocks.buy_as_gift.send_as_a_gift');
            this.giftDetails = salla.lang.get('blocks.buy_as_gift.gift_details');
            this.selectGiftMessage = salla.lang.get('blocks.buy_as_gift.select_gift_message');
            this.giftCustomText = salla.lang.get('blocks.buy_as_gift.gift_custom_text');
            this.textId = salla.lang.get('blocks.buy_as_gift.text_id');
            this.incorrectGiftText = salla.lang.get('blocks.buy_as_gift.incorrect_gift_text');
            this.nextStep = salla.lang.get('blocks.buy_as_gift.next_step');
            this.senderNameLabel = salla.lang.get('blocks.buy_as_gift.sender_name');
            this.receiverNameFieldLabel = salla.lang.get('blocks.buy_as_gift.receiver_name');
            this.receiverMobileFieldLabel = salla.lang.get('blocks.buy_as_gift.receiver_mobile');
            this.receiverCountryFieldLabel = salla.lang.get('blocks.buy_as_gift.receiver_country');
            this.ksa = salla.lang.get('pages.checkout.ksa');
            this.selectCity = salla.lang.get('pages.checkout.select_city');
            this.selectCountry = salla.lang.get('pages.checkout.select_country');
            this.selectCityInfo = salla.lang.get('blocks.buy_as_gift.city_info');
            this.receiverCityFieldLabel = salla.lang.get('blocks.buy_as_gift.receiver_city');
            this.receiverEmailFieldLabel = salla.lang.get('blocks.buy_as_gift.receiver_email');
            this.emailPlaceholder = salla.lang.get('common.elements.email_placeholder');
            this.sendLater = salla.lang.get('blocks.buy_as_gift.send_later');
            this.selectSendDateAndTime = salla.lang.get('blocks.buy_as_gift.select_send_date_and_time');
            this.canNotEditOrderAfterSelectDate = salla.lang.get('blocks.buy_as_gift.can_not_edit_order_after_select_date');
            this.sendGift = salla.lang.get('blocks.buy_as_gift.send_gift');
            this.donationRequired = salla.lang.get('pages.products.donation_amount_required');
            this.currentLang = salla.lang.locale;
        });
        salla.event.on(this.defaultEvent, () => {
            this.open();
        });
    }
    componentDidLoad() {
        salla.event.product.onPriceUpdated(() => {
            const quantityInput = document.querySelector(`.s-quantity-input-input`);
            // @ts-ignore
            this.quantity = quantityInput?.value;
        });
    }
    getFormDataFromForm() {
        if (!this.formSelector)
            return null;
        const form = document.querySelector(this.formSelector);
        if (!form)
            return null;
        return new FormData(form);
    }
    mergeObjectToFormData(obj, formData, namespace) {
        for (let property in obj) {
            if (!obj.hasOwnProperty(property) || obj[property] === undefined || obj[property] === null)
                continue;
            const formKey = namespace ? `${namespace}[${property}]` : property;
            if (typeof obj[property] === 'object' && obj[property] !== null && !(obj[property] instanceof File)) {
                this.mergeObjectToFormData(obj[property], formData, formKey);
            }
            else {
                formData.set(formKey, obj[property]);
            }
        }
        return formData;
    }
    /**
     * Show / Open the gifting modal window
    */
    async open() {
        if (salla.config.isGuest()) {
            salla.api.auth.setAfterLoginEvent(this.defaultEvent);
            salla.event.dispatch('login::open', { withoutReload: true });
            return;
        }
        await this.modal.open();
        // Determine the appropriate method to call based on the `physicalProducts` flag
        const giftDetailsMethod = this.productId ? () => salla.product.getGiftProductDetails(this.productId) : () => salla.cart.getGiftCartDetails();
        return await salla.api.withoutNotifier(giftDetailsMethod)
            .then((response) => {
            this.gift = response.data;
            this.senderName = this.gift.sender_name;
        })
            .catch(e => {
            this.hasError = true;
            this.errorMessage = e.response?.data?.error?.message || e.response?.data;
        })
            .finally(() => this.modal.stopLoading());
    }
    /**
     *
     * Hide / close the gifting modal window
    */
    async close() {
        return this.modal.close();
    }
    /**
     * Update the modal height based on the changes on the inner elements height for a specific step OR just a pass a new fixed height
    */
    async setWrapperHeight(asStep = 1, delay = 250, additionSpace = 0, newHeight = 0) {
        let currentStep = document.querySelector(`#${this.hostId} .gift-step-${asStep}`);
        setTimeout(() => {
            let currentStepHeight = currentStep.offsetHeight;
            if (newHeight) {
                this.stepsWrapper.style.height = `${newHeight}px`;
            }
            else {
                this.stepsWrapper.style.height = currentStepHeight + additionSpace + 'px';
            }
        }, delay);
    }
    toggleCalendar() {
        this.showCalendar = !this.showCalendar;
        this.setWrapperHeight(2, 150, 0);
    }
    toggleGiftText(event) {
        this.textSelect?.classList.remove('s-form-has-error');
        let dataID = event.target.children[event.target.selectedIndex].getAttribute('data-id');
        let customID = dataID == "custom";
        this.showGiftText = customID;
        if (dataID) {
            this.selectedGiftTextOption = dataID;
            customID ? this.selectedText = undefined : this.selectedText = event.target.value;
            this.setWrapperHeight(1, 150, 5);
        }
        else {
            // empty textarea value
            this.textArea.value = '';
            this.selectedText = undefined;
            this.selectedGiftTextOption = undefined;
            this.setWrapperHeight(1, 150, -15);
        }
    }
    /**
     *
     * Go to the step 2
     */
    async goToStep2() {
        if (!this.selectedGiftTextOption) {
            this.textSelect.classList.add('s-form-has-error');
            this.customTextArea.classList.remove('s-form-has-error');
            return;
        }
        else if (this.selectedGiftTextOption == 'custom' && !this.selectedText) {
            this.textSelect.classList.remove('s-form-has-error');
            this.customTextArea.classList.add('s-form-has-error');
            return;
        }
        else {
            this.textSelect.classList.remove('s-form-has-error');
            this.customTextArea.classList.remove('s-form-has-error');
        }
        this.setWrapperHeight(2, 600, 0);
        let stepNextAnime = new anime.timeline();
        stepNextAnime.add({
            targets: this.step1Elems.querySelectorAll(`#${this.hostId} .anime-item`),
            opacity: [1, 0],
            translateX: [0, 50],
            delay: anime.stagger(70),
            // easing: 'easeOutExpo',
            duration: 1200,
        })
            .add({
            targets: '.gift-step-2',
            translateX: ['-110%', 0],
            opacity: [0, 1],
        }, '-=1800')
            .add({
            targets: this.step2Elems.querySelectorAll(`#${this.hostId} .anime-item`),
            opacity: [0, 1],
            translateX: [-50, 0],
            delay: anime.stagger(70),
            duration: 1200,
            complete: () => {
                this.step2Elems.querySelectorAll(`#${this.hostId} .anime-item`).forEach(item => {
                    item.classList.remove('opacity-0');
                    item.removeAttribute('style');
                });
            }
        }, '-=1200');
        this.currentStep = 2;
        this.parentClass = `is-current-step-${this.currentStep}`;
    }
    /**
     *
     * Go to the step 1
     */
    goToStep1(e) {
        e.preventDefault();
        let stepBackAnime = new anime.timeline({
            autoplay: false,
        });
        stepBackAnime.add({
            targets: this.step2Elems.querySelectorAll(`#${this.hostId} .anime-item`),
            opacity: [1, 0],
            translateX: [0, -50],
            delay: anime.stagger(70),
            // easing: 'easeOutExpo',
            duration: 1200,
        })
            .add({
            targets: '.gift-step-1',
            translateX: ['110%', 0],
            opacity: [0, 1],
        }, '-=1800')
            .add({
            targets: this.step1Elems.querySelectorAll(`#${this.hostId} .anime-item`),
            opacity: [0, 1],
            translateX: [50, 0],
            delay: anime.stagger(70),
            duration: 1200,
            complete: () => {
                this.step1Elems.querySelectorAll(`#${this.hostId} .anime-item`).forEach(item => {
                    item.classList.remove('opacity-0');
                    item.removeAttribute('style');
                });
            }
        }, '-=1200');
        stepBackAnime.play();
        this.setWrapperHeight(1, 600, 0);
        this.currentStep = 1;
        this.parentClass = `is-current-step-${this.currentStep}`;
    }
    getFilepondPlaceholder() {
        return `<div class="s-gifting-filepond-placeholder"><span class="s-gifting-filepond-placeholder-icon">${Images}</span><p class="s-gifting-filepond-placeholder-text">${this.selectImageOrUpload ? this.selectImageOrUpload : ''}</p></div>`;
    }
    setPreview(image) {
        this.uploader?.classList.add('has-bg');
        var bg = document.querySelector(`#${this.hostId}.filepond-bg`) ? document.querySelector(`#${this.hostId} .filepond-bg`) : document.createElement('div');
        bg.classList.add('filepond-bg');
        bg.classList.remove('s-hidden');
        bg.style.backgroundImage = "url('" + image.url + "')";
        this.uploader?.querySelector('.filepond--root')?.appendChild(bg);
        this.uploadedImage = image.url;
        if (!!this.gift && this.gift.gift_images.length) {
            this.setWrapperHeight(1, 150, 0);
        }
    }
    removePreview() {
        this.uploader.classList.remove('has-bg');
        let bg = document.querySelector(`#${this.hostId} .filepond-bg`);
        bg.removeAttribute('style');
        bg.classList.add('s-hidden');
        this.handleRemoveImage();
    }
    handleTextAreaChange(event) {
        this.selectedText = event.target.value;
        this.customTextArea.classList.remove('s-form-has-error');
    }
    handleSenderName(event) {
        this.senderName = event.target.value;
    }
    handleReceiverName(event) {
        this.receiverName = event.target.value;
    }
    handleReceiverCity(event) {
        this.receiverCity = event.target.value;
    }
    async handleCountryChange(event) {
        const countryId = event.target.value;
        this.selectedCountryId = countryId;
        // Find the selected country and store its country_code
        const selectedCountry = this.gift?.countries?.find(country => country.id == countryId);
        this.selectedCountryCode = selectedCountry?.country_code;
        if (!countryId || this.gift?.countries?.length === 0) {
            this.gift = { ...this.gift, cities: [] };
            this.receiverCity = undefined;
            this.selectedCountryCode = undefined;
            return;
        }
        this.loadingCities = true;
        this.gift = { ...this.gift, cities: [] };
        this.receiverCity = undefined;
        try {
            const response = await salla.api.request(`shipping/cities?for_branch=0&country_id=${countryId}`);
            if (response && response.data) {
                this.gift = { ...this.gift, cities: response.data };
            }
        }
        catch (error) {
            console.error('Error fetching cities:', error);
        }
        finally {
            this.loadingCities = false;
        }
    }
    handleUploadImage(img) {
        this.uploadedImage = img;
        if (!!this.gift && this.gift.gift_images.length) {
            this.setWrapperHeight(1, 150, 0);
        }
    }
    handleRemoveImage() {
        this.uploadedImage = '';
        if (!!this.gift && this.gift.gift_images.length) {
            this.setWrapperHeight(1, 150, 0);
        }
    }
    // private handleReceiverEmail(event) {
    //   this.receiverEmail = event.target.value;
    // }
    handlePhoneInputChange(event) {
        let phone = event.detail;
        this.receiverMobile = phone.number;
        this.receiverCountryCode = phone.country_code;
    }
    handleDateTimePicker(event) {
        this.deliveryDate = event.detail;
    }
    getCalendarClasses() {
        return {
            "s-form-group": true,
            "anime-item": true,
            "s-gifting-calendar": true,
            "shown": this.showCalendar,
            "hide": !this.showCalendar,
            "s-form-has-error": !!this.errors && this.errors['deliver_at']
        };
    }
    async submitForm() {
        // @ts-ignore
        const donatingAmount = (document.querySelector(`#donating-amount`))?.value;
        this.calendarFormGroup.classList.remove('s-form-has-error');
        if (!!this.errors) {
            this.errors = {};
            this.setWrapperHeight(2, 150, 0);
        }
        if (this.showCalendar && !this.deliveryDate) {
            this.calendarFormGroup.classList.add('s-form-has-error');
            return;
        }
        // Validate country selection for physical products
        if (this.physicalProducts && !this.selectedCountryId) {
            if (!this.errors) {
                this.errors = {};
            }
            this.errors['receiver.country'] = salla.lang.get('common.messages.required_field');
            this.setWrapperHeight(2, 150, 0);
            return;
        }
        const giftPayload = {
            text: this.selectedText,
            sender_name: this.senderName,
            quantity: this.quantity,
            deliver_at: this.showCalendar ? this.deliveryDate : null,
            image_url: this.uploadedImage ?? this.selectedImage,
            donation_amount: donatingAmount ? donatingAmount : null,
            receiver: {
                name: this.receiverName,
                country_code: this.selectedCountryCode && this.physicalProducts ? this.selectedCountryCode : this.receiverCountryCode,
                mobile: this.receiverMobile,
                ...(this.receiverCity && this.physicalProducts ? { city_id: this.receiverCity } : {})
            },
            has_apple_pay: salla.helpers.hasApplePay(),
        };
        let formData;
        if (this.productId && this.formSelector) {
            formData = this.getFormDataFromForm() || new FormData();
            formData = this.mergeObjectToFormData(giftPayload, formData);
        }
        const addGiftMethod = this.productId
            ? () => salla.product.addProductGiftToCart(this.productId, formData, true)
            : () => salla.cart.addCartGiftToCart(giftPayload, true);
        return await addGiftMethod()
            .then(() => this.modal.close())
            .catch((e) => {
            if (e.response && e.response.status == 422) {
                this.errors = e.response.data.error.fields;
            }
            else {
                console.log(e);
            }
            this.setWrapperHeight(2, 150, 0);
        });
    }
    generateClass() {
        return {
            "s-gifting-widget": true,
            "s-gifting-widget-vertical": !!this.vertical,
            "s-gifting-widget-horizontal": !this.vertical
        };
    }
    async handleGiftButtonClick() {
        if (!!this.productId && this.formSelector) {
            const form = document.querySelector(this.formSelector);
            if (!form) {
                console.error('SallaGifting:: Form not found in the document!');
                return;
            }
            if (!(form instanceof HTMLFormElement)) {
                console.error('SallaGifting:: The specified selector does not correspond to a form tag!');
                return;
            }
            if (!form.reportValidity()) {
                console.error('SallaGifting:: Form is not valid!');
                salla.error(salla.lang.get('common.messages.required_fields'));
                return;
            }
        }
        const optionsElement = document.querySelector(`salla-product-options[product-id="${this.productId}"]`);
        if (optionsElement && !(await optionsElement.reportValidity())) {
            salla.error(salla.lang.get('common.messages.required_fields'));
            return;
        }
        this.open();
    }
    render() {
        return [
            h("div", { key: 'd16cc7f7023bea25db35841e89affadc64c07750' }, h("salla-list-tile", { key: 'a0bacbee0a60998d7b2b6a04de43e0d840017e8e', class: this.generateClass() }, h("div", { key: 'b23da8bd5bc1c60ee6c9a755b62e398b36900d5d', slot: "title" }, this.vertical ? h("span", { innerHTML: GiftSharing }) : '', h("h3", { key: '87ed11d782fbfb07cf06bd2985d041c28f76f51d' }, !!this.widgetTitle ? this.widgetTitle : this.sectionTitle)), h("div", { key: 'f8894e33e53dd1ed91c0649bfd88962c798cf8c2', slot: "subtitle" }, h("div", { key: '275a03acbd38cd916d86e852affea21c501c0da5' }, !!this.widgetSubtitle ? this.widgetSubtitle : this.sectionSubtitle)), h("div", { key: '45fa9404463409d35fd24b25c0ae650a4679a939', slot: "action" }, h("salla-button", { key: '5c6e5c9d0357721961b0f25139126ad79a8ca099', color: "primary", fill: "outline", width: "wide", class: "s-gifting-widget-action", onClick: () => this.handleGiftButtonClick() }, h("slot", { key: '2a1fb3728692233a9cf87bd0d632610ad020650d', name: "widget-btn-content" }, h("div", { key: '4b7fd08f8f4a35b6d74f63e0547aaf92823ca0f0', class: "s-gifting-widget-action-content" }, h("span", { key: 'b6e15c75159f3485330af5f8fdd247c8dc9c1ce1', innerHTML: GiftSharing }), " \u00A0", h("span", { key: '574c99709d0ecbe73deeed07664951b421976d22' }, this.sectionBtnText)))))), h("salla-modal", { key: '3a73e664ffa20c58792eb1c7865b903fbf5f38f1', id: this.hostId, isLoading: true, class: "s-gifting-modal", width: "sm", ref: modal => this.modal = modal }, h("div", { key: 'eb8b915f53edfd3e7255a6e59a204e5120b56b47', slot: "loading" }, h("div", { key: '1bb51e9f935b10cac4b816bfc062999b16c984c7', class: "s-gifting-skeleton" }, h("div", { key: '4d050d592dbdef6ff4921d2937dedab1ae6d546c', class: "s-gifting-modal-header" }, h("salla-skeleton", { key: '00fa0ba8cd77422bab5ef5c174436843863ffa36', type: 'circle', height: '5rem', width: '5rem' }), h("h2", { key: '11f5e666e3cd59ee0673269edb1120255e36b973', class: "s-gifting-modal-title" }, h("div", { key: 'ef4d1fb59c4f9711ddf923118692d7a302cd0ab9', class: "s-gifting-modal-badge-wrapper" }, h("salla-skeleton", { key: '6d9cf1bf0c9e4df1590e0a575b83fb133482a9b1', height: '15px', width: '150px' })))), h("div", { key: 'f20ac67cfc4ab4f42838906418f5102c6cac01d3', class: "s-gifting-skeleton-content" }, h("salla-skeleton", { key: 'e5cbd9d820468d8233bd13991878741724b52723', height: '10px', width: '150px' }), h("salla-skeleton", { key: '511b9321272203f98520339ac67408e2b11bd7c7', height: '230px' }), h("salla-skeleton", { key: 'b929ad683b8302d29a09a749e603dead646606db', height: '10px', width: '150px' }), h("salla-skeleton", { key: 'bb485d3ccb8dbd35bfe9faca03b1e9fbfa8a67e3', height: '30px' }), h("salla-skeleton", { key: 'c2591d3c074ce82e7047807ed8560c914e99bba5', height: '40px' })))), h("slot", { key: '144dbbe14bc130217c63089aff8cccd1a6739850', name: "header" }), !!this.hasError ?
                h("salla-placeholder", { alignment: "center" }, h("span", { slot: "title" }, this.errorMessage || salla.lang.get('common.errors.empty_results')), h("span", { slot: "description" }, " "))
                :
                    [
                        h("div", { class: "s-gifting-modal-header" }, h("span", { class: "s-gifting-modal-icon" }, h("span", { innerHTML: GiftSharing })), h("h2", { class: "s-gifting-modal-title" }, h("div", { class: "s-gifting-modal-badge-wrapper" }, h("div", { class: "s-gifting-modal-badge" }, h("span", null, h("span", null, this.currentStep), "/2")), h("span", null, this.giftDetails)))),
                        h("div", { class: "s-gifting-steps-wrapper " + this.parentClass, ref: el => this.stepsWrapper = el }, h("div", { class: "s-gifting-step-one gift-step-1", ref: el => this.step1Elems = el }, h("div", { class: "s-gifting-modal-uploader-title anime-item" }, this.selectImageForYourGift), h("div", { class: "s-gifting-modal-uploader anime-item", ref: el => this.uploader = el }, h("span", { class: "s-gifting-remove-preview", onClick: () => this.removePreview(), innerHTML: Cancel }), this.selectImageOrUpload && h("salla-file-upload", { "instant-upload": true, name: "image_url", url: salla.url.api(salla.product.api.getUrl('giftImage')), onUploaded: event => this.handleUploadImage(event.detail), labelIdle: this.getFilepondPlaceholder(), onRemoved: () => this.handleRemoveImage() })), h("div", { class: "anime-item" }, !this.uploadedImage && !!this.gift && !!this.gift.gift_images && this.gift.gift_images.length > 0 ?
                            h("salla-slider", { id: "gifting-slider", loop: false, "controls-outer": true, class: "s-gifting-slider", type: "carousel" }, h("div", { slot: "items" }, this.gift && this.gift.gift_images ?
                                this.gift?.gift_images.map((item) => h("a", { class: "s-gifting-clickable s-gifting-image", onClick: () => this.setPreview(item) }, h("img", { style: { "width": "120px" }, src: item.url, alt: `${item.id}` }))) : ''))
                            : ""), h("div", { class: "anime-item" }, h("div", { class: "s-form-group s-gifting-selectText", ref: el => this.textSelect = el }, h("select", { id: "gift-text-selection", name: "gift-text-selection", class: "s-form-control s-gifting-select", onChange: e => this.toggleGiftText(e) }, h("option", { "data-id": null, selected: true }, this.selectGiftMessage), this.gift && this.gift.gift_texts ?
                            this.gift?.gift_texts.map((txt) => h("option", { "data-id": txt.id, value: txt.text, key: txt.id }, txt.text)) : '', h("option", { "data-id": "custom" }, this.giftCustomText))), h("div", { class: this.showGiftText ? "s-form-group s-gifting-textarea shown" : "s-form-group s-gifting-textarea hide", ref: (el) => this.customTextArea = el }, h("label", { htmlFor: "gift-custom-text", class: "s-form-label" }, this.giftCustomText), h("div", { class: "mt-1" }, h("textarea", { onInput: (event) => this.handleTextAreaChange(event), rows: 4, ref: (el) => this.textArea = el, name: "gift-custom-text", id: "gift-custom-text", class: "s-form-control" })))), h("div", { class: "anime-item" }, h("salla-button", { color: "primary", width: "wide", onClick: () => this.goToStep2() }, h("span", null, this.nextStep)))), h("div", { class: "s-gifting-step-two gift-step-2", ref: el => this.step2Elems = el }, h("div", { class: this.errors && this.errors['sender_name'] ? "s-form-group s-form-has-error anime-item opacity-0" : "s-form-group anime-item opacity-0" }, h("label", { htmlFor: "sender_name", class: "s-form-label" }, this.senderNameLabel), h("input", { type: "text", class: "s-form-control", name: "sender_name", id: "sender_name", value: this.senderName, onInput: (event) => this.handleSenderName(event), placeholder: "" }), this.errors && this.errors['sender_name'] ?
                            h("span", { class: "s-gifting-error" }, this.errors['sender_name']) : ''), h("div", { class: this.errors && this.errors['receiver.name'] ? "s-form-group s-form-has-error anime-item opacity-0" : "s-form-group anime-item opacity-0" }, h("label", { htmlFor: "receiver_name", class: "s-form-label" }, this.receiverNameFieldLabel), h("input", { type: "text", class: "s-form-control", name: "receiver_name", id: "receiver_name", value: "", onInput: (event) => this.handleReceiverName(event), placeholder: "" }), this.errors && this.errors['receiver.name'] ?
                            h("span", { class: "s-gifting-error" }, this.errors['receiver.name']) : ''), h("div", { class: this.errors && this.errors['receiver.mobile'] ? "s-form-group s-form-has-error anime-item opacity-0" : "s-form-group anime-item opacity-0" }, h("label", { class: "s-form-label" }, this.receiverMobileFieldLabel), h("salla-tel-input", { class: "s-gifting-tel-input", phone: this.receiverMobile, countryCode: this.selectedCountryCode || this.receiverCountryCode, key: `tel-input-${this.selectedCountryCode || this.receiverCountryCode || 'default'}`, onPhoneEntered: (e) => this.handlePhoneInputChange(e) }), this.errors && this.errors['receiver.mobile'] ?
                            h("span", { class: "s-gifting-error" }, this.errors['receiver.mobile']) : ''), this.physicalProducts &&
                            h("div", null, h("div", { class: this.errors && this.errors['receiver.country'] ? "s-form-group s-form-has-error anime-item opacity-0" : "s-form-group anime-item opacity-0" }, h("label", { class: "s-form-label" }, this.receiverCountryFieldLabel), h("select", { name: "country", class: "s-form-control", onChange: (event) => this.handleCountryChange(event), required: true }, h("option", { value: "" }, this.selectCountry), this.gift?.countries?.map((country) => (h("option", { value: country.id }, country.name)))), this.errors && this.errors['receiver.country'] ?
                                h("span", { class: "s-gifting-error" }, this.errors['receiver.country']) : ''), h("div", { class: this.errors && this.errors['receiver.city_id'] ? "s-form-group s-form-has-error anime-item opacity-0" : "s-form-group anime-item opacity-0" }, h("label", { class: "s-form-label" }, this.receiverCityFieldLabel), h("select", { name: "city", class: "s-form-control", onChange: (event) => this.handleReceiverCity(event), disabled: this.loadingCities }, h("option", { value: "", selected: true }, this.loadingCities ? salla.lang.get('common.elements.loading') : this.selectCity), this.gift?.cities?.map((city) => (h("option", { value: city.id }, city.name)))), this.errors && this.errors['receiver.city_id'] ?
                                h("span", { class: "s-gifting-error" }, this.errors['receiver.city_id']) : ''), h("div", { class: "s-gifting-info anime-item opacity-0" }, h("span", { innerHTML: Alert }), h("span", null, this.selectCityInfo))), !this.physicalProducts && h("div", { class: "anime-item opacity-0" }, h("label", { class: "s-gifting-schedule s-gifting-clickable", htmlFor: `schedule-${this.hostId}` }, h("input", { type: "checkbox", name: 'schedule', id: `schedule-${this.hostId}`, onChange: () => this.toggleCalendar(), class: "s-checkbox" }), h("span", { class: "s-form-label" }, " ", this.sendLater, " "))), h("div", { class: this.getCalendarClasses(), ref: (el) => this.calendarFormGroup = el }, h("label", { class: "s-form-label" }, this.selectSendDateAndTime), h("salla-datetime-picker", { value: this.deliveryDate, placeholder: this.selectSendDateAndTime, "enable-time": true, "date-format": "Y-m-d h:i K", onPicked: (event) => this.handleDateTimePicker(event) }), h("span", { class: "s-gifting-calendar-hint" }, this.canNotEditOrderAfterSelectDate)), h("div", { class: "s-gifting-step-two-footer anime-item opacity-0" }, h("a", { href: "#!", innerHTML: arrowLeft, onClick: (e) => this.goToStep1(e) }), h("salla-button", { onClick: () => this.submitForm(), color: "primary", width: 'wide' }, h("span", null, this.sendGift)))))
                    ], h("slot", { key: 'd20dc2762318510b53404ece4cd5cdef91bd8099', name: "footer" })))
        ];
    }
};
SallaGifting.style = sallaGiftingCss;

const sallaInfiniteScrollCss = "";

const SallaInfiniteScroll = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Next Page element
         */
        this.nextPage = '';
        /**
         * Is there is need to autoload next page when scroll `next-page-autoload|next-page.autoload`
         */
        this.autoload = false;
        /**
         * Class selector to know the container if it's not the host `<salla-infinite-scroll>`
         */
        this.container = 'salla-infinite-scroll';
        /**
         * Class selector to know list items
         */
        this.item = 'salla-infinite-scroll > *';
        this.status = document.createElement('div');
        this.status.className = 's-infinite-scroll-wrapper';
        this.status.innerHTML = `<div class="s-infinite-scroll-status" style="display:none">
        <p class="s-infinite-scroll-last infinite-scroll-last"></p>
        <p class="s-infinite-scroll-error infinite-scroll-error"></p>
      </div>
      <a href="${this.nextPage}" class="s-infinite-scroll-btn s-button-btn s-button-primary">
        <span class="s-button-text s-infinite-scroll-btn-text">${this.loadMoreText ? this.loadMoreText : salla.lang.get('common.elements.load_more')}</span>
        <span class="s-button-loader s-button-loader-center s-infinite-scroll-btn-loader" style="display: none"></span>
      </a>`;
        this.btnLoader = this.status.querySelector('.s-button-loader');
        salla.lang.onLoaded(() => {
            this.status.querySelector('.s-button-text').innerHTML = this.loadMoreText ? this.loadMoreText : salla.lang.get('common.elements.load_more');
            this.status.querySelector('.s-infinite-scroll-last').innerHTML = salla.lang.get('common.elements.end_of_content');
            this.status.querySelector('.s-infinite-scroll-error').innerHTML = salla.lang.get('common.elements.failed_to_load_more');
        });
    }
    loading(isLoading = true) {
        let btnText = this.status.querySelector('.s-button-text');
        Helper.toggleElementClassIf(btnText, 's-button-hide', 's-button-show', () => isLoading);
        this.btnLoader.style.display = isLoading ? 'inherit' : 'none';
    }
    render() {
        return this.nextPage.length > 1 ?
            h(Host, { class: "s-infinite-scroll-container" }, h("slot", null)) : '';
    }
    componentDidLoad() {
        if (this.nextPage.length === 0) {
            return;
        }
        this.host.insertAdjacentElement('afterend', this.status);
        let that = this;
        let infScroll = salla.infiniteScroll.initiate(this.container, {
            history: this.autoload ? 'push' : false,
            scrollThreshold: this.autoload ? 400 : false,
            nextPage: this.nextPage,
            checkLastPage: 'salla-infinite-scroll[next-page*=":"],salla-infinite-scroll[next-page*="."]',
            status: '.s-infinite-scroll-status',
            button: this.status.querySelector('.s-button-btn'),
            append: this.item,
            path: function () {
                return that.nextPage.replace(/page\=(\d)/g, 'page=' + (this.loadCount + 2));
            },
        })
            .on('request', () => this.loading())
            .on('load', () => {
            this.loading(false);
            if (infScroll.pageIndex == 2) {
                infScroll.option({ loadOnScroll: false });
            }
            if (infScroll.pageIndex == 3) {
                infScroll.option({ loadOnScroll: true });
            }
        })
            .on('error', () => this.loading(false));
    }
    get host() { return getElement(this); }
};
SallaInfiniteScroll.style = sallaInfiniteScrollCss;

const sallaListTileCss = "";

const SallaListTile = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Designates the component as anchor and applies the `href` attribute.
         */
        this.href = undefined;
        /**
         * Designates the target attribute. This should only be applied when using the `href` prop.
         */
        this.target = "_self";
    }
    generateClass() {
        return {
            "s-list-tile-item": true,
            "s-list-tile-item-href": !!this.href
        };
    }
    render() {
        return (h(Host, { key: 'ba44695aed1223972f89af7c586a40930b02bf2c' }, h("a", { key: '07372f90536259e785765fd52518d662da064310', class: this.generateClass(), href: this.href || "#", target: this.target, "aria-label": "List Tile Link" }, h("div", { key: '1146861c80badb189b2cee76c1641b6b24cdc81f', class: "s-list-tile-item-icon" }, h("slot", { key: 'e3f28cb3fc224a11345f79dbcc63abda6a5749f2', name: 'icon' })), h("div", { key: '2538211d32d19b14feb87324499402fa86591734', class: "s-list-tile-item-content" }, h("div", { key: 'c099dbf9985c97cf7580ae155f12310033f82d94', class: "s-list-tile-item-title" }, h("slot", { key: 'cbd58b99730b27cc90b2897a82049a0b132a68aa', name: 'title' })), h("div", { key: '9a5d9bde89507382c84910da72baac5b18a0180d', class: "s-list-tile-item-subtitle" }, h("slot", { key: 'b0c042dfece6f5b337cc32892dd10bd4f7705ce0', name: "subtitle" }))), h("div", { key: '500a9175dd419a186e4d8e76d2578183b70d9d88', class: "s-list-tile-item-action" }, h("slot", { key: '6b8eaf7115a0304f7e50aafe251aec0325146a80', name: 'action' })))));
    }
};
SallaListTile.style = sallaListTileCss;

const sallaLoadingCss = ".s-loading{animation:spin 1s linear infinite;fill:var(--color-primary)}.s-loading-container{display:flex;justify-content:center;align-items:center}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}";

const SallaLoading = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Sets the diameter of the circle in pixels, Defaults to `32`
         */
        this.size = 32;
        /**
         * Sets the stroke of the circle (border) in pixels, Defaults to `4`
         */
        this.width = 2;
        /**
         * Spinner content color.
         */
        this.color = undefined; // TODO: Should be replaced with primary color (variable)
        /**
        * Spinner background color.
        */
        this.bgColor = "#e5e7eb";
    }
    render() {
        return (h(Host, { key: '8320fc3660a218e25417a93bf887971c5e8419c3', class: "s-loading-container" }, h("svg", { key: 'b70926bc9f4735a041bc15941f3455f739ca92ca', "aria-hidden": "true", style: { width: `${this.size}px`, height: `${this.size}px`, fill: this.color, color: this.bgColor }, class: "s-loading", viewBox: "0 0 100 101", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("path", { key: '08022da39248d500da894209a321feda18f4c1ac', d: "M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z", fill: "currentColor" }), h("path", { key: 'df3d357458fd338246941a78993ffe8cf06f0d8b', d: "M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z", fill: "currentFill" }))));
    }
};
SallaLoading.style = sallaLoadingCss;

const sallaLocalizationModalCss = ".s-localization-modal-select{background-image:url(\"data:image/svg+xml;utf8,<svg fill='gray' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>\")}.iti__flag{width:20px}.iti__flag.iti__be{width:18px}.iti__flag.iti__ch{width:15px}.iti__flag.iti__mc{width:19px}.iti__flag.iti__ne{width:18px}.iti__flag.iti__np{width:13px}.iti__flag.iti__va{width:15px}@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi){.iti__flag{background-size:5652px 15px}}.iti__flag.iti__ac{height:10px;background-position:0px 0px}.iti__flag.iti__ad{height:14px;background-position:-22px 0px}.iti__flag.iti__ae{height:10px;background-position:-44px 0px}.iti__flag.iti__af{height:14px;background-position:-66px 0px}.iti__flag.iti__ag{height:14px;background-position:-88px 0px}.iti__flag.iti__ai{height:10px;background-position:-110px 0px}.iti__flag.iti__al{height:15px;background-position:-132px 0px}.iti__flag.iti__am{height:10px;background-position:-154px 0px}.iti__flag.iti__ao{height:14px;background-position:-176px 0px}.iti__flag.iti__aq{height:14px;background-position:-198px 0px}.iti__flag.iti__ar{height:13px;background-position:-220px 0px}.iti__flag.iti__as{height:10px;background-position:-242px 0px}.iti__flag.iti__at{height:14px;background-position:-264px 0px}.iti__flag.iti__au{height:10px;background-position:-286px 0px}.iti__flag.iti__aw{height:14px;background-position:-308px 0px}.iti__flag.iti__ax{height:13px;background-position:-330px 0px}.iti__flag.iti__az{height:10px;background-position:-352px 0px}.iti__flag.iti__ba{height:10px;background-position:-374px 0px}.iti__flag.iti__bb{height:14px;background-position:-396px 0px}.iti__flag.iti__bd{height:12px;background-position:-418px 0px}.iti__flag.iti__be{height:15px;background-position:-440px 0px}.iti__flag.iti__bf{height:14px;background-position:-460px 0px}.iti__flag.iti__bg{height:12px;background-position:-482px 0px}.iti__flag.iti__bh{height:12px;background-position:-504px 0px}.iti__flag.iti__bi{height:12px;background-position:-526px 0px}.iti__flag.iti__bj{height:14px;background-position:-548px 0px}.iti__flag.iti__bl{height:14px;background-position:-570px 0px}.iti__flag.iti__bm{height:10px;background-position:-592px 0px}.iti__flag.iti__bn{height:10px;background-position:-614px 0px}.iti__flag.iti__bo{height:14px;background-position:-636px 0px}.iti__flag.iti__bq{height:14px;background-position:-658px 0px}.iti__flag.iti__br{height:14px;background-position:-680px 0px}.iti__flag.iti__bs{height:10px;background-position:-702px 0px}.iti__flag.iti__bt{height:14px;background-position:-724px 0px}.iti__flag.iti__bv{height:15px;background-position:-746px 0px}.iti__flag.iti__bw{height:14px;background-position:-768px 0px}.iti__flag.iti__by{height:10px;background-position:-790px 0px}.iti__flag.iti__bz{height:14px;background-position:-812px 0px}.iti__flag.iti__ca{height:10px;background-position:-834px 0px}.iti__flag.iti__cc{height:10px;background-position:-856px 0px}.iti__flag.iti__cd{height:15px;background-position:-878px 0px}.iti__flag.iti__cf{height:14px;background-position:-900px 0px}.iti__flag.iti__cg{height:14px;background-position:-922px 0px}.iti__flag.iti__ch{height:15px;background-position:-944px 0px}.iti__flag.iti__ci{height:14px;background-position:-961px 0px}.iti__flag.iti__ck{height:10px;background-position:-983px 0px}.iti__flag.iti__cl{height:14px;background-position:-1005px 0px}.iti__flag.iti__cm{height:14px;background-position:-1027px 0px}.iti__flag.iti__cn{height:14px;background-position:-1049px 0px}.iti__flag.iti__co{height:14px;background-position:-1071px 0px}.iti__flag.iti__cp{height:14px;background-position:-1093px 0px}.iti__flag.iti__cr{height:12px;background-position:-1115px 0px}.iti__flag.iti__cu{height:10px;background-position:-1137px 0px}.iti__flag.iti__cv{height:12px;background-position:-1159px 0px}.iti__flag.iti__cw{height:14px;background-position:-1181px 0px}.iti__flag.iti__cx{height:10px;background-position:-1203px 0px}.iti__flag.iti__cy{height:14px;background-position:-1225px 0px}.iti__flag.iti__cz{height:14px;background-position:-1247px 0px}.iti__flag.iti__de{height:12px;background-position:-1269px 0px}.iti__flag.iti__dg{height:10px;background-position:-1291px 0px}.iti__flag.iti__dj{height:14px;background-position:-1313px 0px}.iti__flag.iti__dk{height:15px;background-position:-1335px 0px}.iti__flag.iti__dm{height:10px;background-position:-1357px 0px}.iti__flag.iti__do{height:14px;background-position:-1379px 0px}.iti__flag.iti__dz{height:14px;background-position:-1401px 0px}.iti__flag.iti__ea{height:14px;background-position:-1423px 0px}.iti__flag.iti__ec{height:14px;background-position:-1445px 0px}.iti__flag.iti__ee{height:13px;background-position:-1467px 0px}.iti__flag.iti__eg{height:14px;background-position:-1489px 0px}.iti__flag.iti__eh{height:10px;background-position:-1511px 0px}.iti__flag.iti__er{height:10px;background-position:-1533px 0px}.iti__flag.iti__es{height:14px;background-position:-1555px 0px}.iti__flag.iti__et{height:10px;background-position:-1577px 0px}.iti__flag.iti__eu{height:14px;background-position:-1599px 0px}.iti__flag.iti__fi{height:12px;background-position:-1621px 0px}.iti__flag.iti__fj{height:10px;background-position:-1643px 0px}.iti__flag.iti__fk{height:10px;background-position:-1665px 0px}.iti__flag.iti__fm{height:11px;background-position:-1687px 0px}.iti__flag.iti__fo{height:15px;background-position:-1709px 0px}.iti__flag.iti__fr{height:14px;background-position:-1731px 0px}.iti__flag.iti__ga{height:15px;background-position:-1753px 0px}.iti__flag.iti__gb{height:10px;background-position:-1775px 0px}.iti__flag.iti__gd{height:12px;background-position:-1797px 0px}.iti__flag.iti__ge{height:14px;background-position:-1819px 0px}.iti__flag.iti__gf{height:14px;background-position:-1841px 0px}.iti__flag.iti__gg{height:14px;background-position:-1863px 0px}.iti__flag.iti__gh{height:14px;background-position:-1885px 0px}.iti__flag.iti__gi{height:10px;background-position:-1907px 0px}.iti__flag.iti__gl{height:14px;background-position:-1929px 0px}.iti__flag.iti__gm{height:14px;background-position:-1951px 0px}.iti__flag.iti__gn{height:14px;background-position:-1973px 0px}.iti__flag.iti__gp{height:14px;background-position:-1995px 0px}.iti__flag.iti__gq{height:14px;background-position:-2017px 0px}.iti__flag.iti__gr{height:14px;background-position:-2039px 0px}.iti__flag.iti__gs{height:10px;background-position:-2061px 0px}.iti__flag.iti__gt{height:13px;background-position:-2083px 0px}.iti__flag.iti__gu{height:11px;background-position:-2105px 0px}.iti__flag.iti__gw{height:10px;background-position:-2127px 0px}.iti__flag.iti__gy{height:12px;background-position:-2149px 0px}.iti__flag.iti__hk{height:14px;background-position:-2171px 0px}.iti__flag.iti__hm{height:10px;background-position:-2193px 0px}.iti__flag.iti__hn{height:10px;background-position:-2215px 0px}.iti__flag.iti__hr{height:10px;background-position:-2237px 0px}.iti__flag.iti__ht{height:12px;background-position:-2259px 0px}.iti__flag.iti__hu{height:10px;background-position:-2281px 0px}.iti__flag.iti__ic{height:14px;background-position:-2303px 0px}.iti__flag.iti__id{height:14px;background-position:-2325px 0px}.iti__flag.iti__ie{height:10px;background-position:-2347px 0px}.iti__flag.iti__il{height:15px;background-position:-2369px 0px}.iti__flag.iti__im{height:10px;background-position:-2391px 0px}.iti__flag.iti__in{height:14px;background-position:-2413px 0px}.iti__flag.iti__io{height:10px;background-position:-2435px 0px}.iti__flag.iti__iq{height:14px;background-position:-2457px 0px}.iti__flag.iti__ir{height:12px;background-position:-2479px 0px}.iti__flag.iti__is{height:15px;background-position:-2501px 0px}.iti__flag.iti__it{height:14px;background-position:-2523px 0px}.iti__flag.iti__je{height:12px;background-position:-2545px 0px}.iti__flag.iti__jm{height:10px;background-position:-2567px 0px}.iti__flag.iti__jo{height:10px;background-position:-2589px 0px}.iti__flag.iti__jp{height:14px;background-position:-2611px 0px}.iti__flag.iti__ke{height:14px;background-position:-2633px 0px}.iti__flag.iti__kg{height:12px;background-position:-2655px 0px}.iti__flag.iti__kh{height:13px;background-position:-2677px 0px}.iti__flag.iti__ki{height:10px;background-position:-2699px 0px}.iti__flag.iti__km{height:12px;background-position:-2721px 0px}.iti__flag.iti__kn{height:14px;background-position:-2743px 0px}.iti__flag.iti__kp{height:10px;background-position:-2765px 0px}.iti__flag.iti__kr{height:14px;background-position:-2787px 0px}.iti__flag.iti__kw{height:10px;background-position:-2809px 0px}.iti__flag.iti__ky{height:10px;background-position:-2831px 0px}.iti__flag.iti__kz{height:10px;background-position:-2853px 0px}.iti__flag.iti__la{height:14px;background-position:-2875px 0px}.iti__flag.iti__lb{height:14px;background-position:-2897px 0px}.iti__flag.iti__lc{height:10px;background-position:-2919px 0px}.iti__flag.iti__li{height:12px;background-position:-2941px 0px}.iti__flag.iti__lk{height:10px;background-position:-2963px 0px}.iti__flag.iti__lr{height:11px;background-position:-2985px 0px}.iti__flag.iti__ls{height:14px;background-position:-3007px 0px}.iti__flag.iti__lt{height:12px;background-position:-3029px 0px}.iti__flag.iti__lu{height:12px;background-position:-3051px 0px}.iti__flag.iti__lv{height:10px;background-position:-3073px 0px}.iti__flag.iti__ly{height:10px;background-position:-3095px 0px}.iti__flag.iti__ma{height:14px;background-position:-3117px 0px}.iti__flag.iti__mc{height:15px;background-position:-3139px 0px}.iti__flag.iti__md{height:10px;background-position:-3160px 0px}.iti__flag.iti__me{height:10px;background-position:-3182px 0px}.iti__flag.iti__mf{height:14px;background-position:-3204px 0px}.iti__flag.iti__mg{height:14px;background-position:-3226px 0px}.iti__flag.iti__mh{height:11px;background-position:-3248px 0px}.iti__flag.iti__mk{height:10px;background-position:-3270px 0px}.iti__flag.iti__ml{height:14px;background-position:-3292px 0px}.iti__flag.iti__mm{height:14px;background-position:-3314px 0px}.iti__flag.iti__mn{height:10px;background-position:-3336px 0px}.iti__flag.iti__mo{height:14px;background-position:-3358px 0px}.iti__flag.iti__mp{height:10px;background-position:-3380px 0px}.iti__flag.iti__mq{height:14px;background-position:-3402px 0px}.iti__flag.iti__mr{height:14px;background-position:-3424px 0px}.iti__flag.iti__ms{height:10px;background-position:-3446px 0px}.iti__flag.iti__mt{height:14px;background-position:-3468px 0px}.iti__flag.iti__mu{height:14px;background-position:-3490px 0px}.iti__flag.iti__mv{height:14px;background-position:-3512px 0px}.iti__flag.iti__mw{height:14px;background-position:-3534px 0px}.iti__flag.iti__mx{height:12px;background-position:-3556px 0px}.iti__flag.iti__my{height:10px;background-position:-3578px 0px}.iti__flag.iti__mz{height:14px;background-position:-3600px 0px}.iti__flag.iti__na{height:14px;background-position:-3622px 0px}.iti__flag.iti__nc{height:10px;background-position:-3644px 0px}.iti__flag.iti__ne{height:15px;background-position:-3666px 0px}.iti__flag.iti__nf{height:10px;background-position:-3686px 0px}.iti__flag.iti__ng{height:10px;background-position:-3708px 0px}.iti__flag.iti__ni{height:12px;background-position:-3730px 0px}.iti__flag.iti__nl{height:14px;background-position:-3752px 0px}.iti__flag.iti__no{height:15px;background-position:-3774px 0px}.iti__flag.iti__np{height:15px;background-position:-3796px 0px}.iti__flag.iti__nr{height:10px;background-position:-3811px 0px}.iti__flag.iti__nu{height:10px;background-position:-3833px 0px}.iti__flag.iti__nz{height:10px;background-position:-3855px 0px}.iti__flag.iti__om{height:10px;background-position:-3877px 0px}.iti__flag.iti__pa{height:14px;background-position:-3899px 0px}.iti__flag.iti__pe{height:14px;background-position:-3921px 0px}.iti__flag.iti__pf{height:14px;background-position:-3943px 0px}.iti__flag.iti__pg{height:15px;background-position:-3965px 0px}.iti__flag.iti__ph{height:10px;background-position:-3987px 0px}.iti__flag.iti__pk{height:14px;background-position:-4009px 0px}.iti__flag.iti__pl{height:13px;background-position:-4031px 0px}.iti__flag.iti__pm{height:14px;background-position:-4053px 0px}.iti__flag.iti__pn{height:10px;background-position:-4075px 0px}.iti__flag.iti__pr{height:14px;background-position:-4097px 0px}.iti__flag.iti__ps{height:10px;background-position:-4119px 0px}.iti__flag.iti__pt{height:14px;background-position:-4141px 0px}.iti__flag.iti__pw{height:13px;background-position:-4163px 0px}.iti__flag.iti__py{height:11px;background-position:-4185px 0px}.iti__flag.iti__qa{height:8px;background-position:-4207px 0px}.iti__flag.iti__re{height:14px;background-position:-4229px 0px}.iti__flag.iti__ro{height:14px;background-position:-4251px 0px}.iti__flag.iti__rs{height:14px;background-position:-4273px 0px}.iti__flag.iti__ru{height:14px;background-position:-4295px 0px}.iti__flag.iti__rw{height:14px;background-position:-4317px 0px}.iti__flag.iti__sa{height:14px;background-position:-4339px 0px}.iti__flag.iti__sb{height:10px;background-position:-4361px 0px}.iti__flag.iti__sc{height:10px;background-position:-4383px 0px}.iti__flag.iti__sd{height:10px;background-position:-4405px 0px}.iti__flag.iti__se{height:13px;background-position:-4427px 0px}.iti__flag.iti__sg{height:14px;background-position:-4449px 0px}.iti__flag.iti__sh{height:10px;background-position:-4471px 0px}.iti__flag.iti__si{height:10px;background-position:-4493px 0px}.iti__flag.iti__sj{height:15px;background-position:-4515px 0px}.iti__flag.iti__sk{height:14px;background-position:-4537px 0px}.iti__flag.iti__sl{height:14px;background-position:-4559px 0px}.iti__flag.iti__sm{height:15px;background-position:-4581px 0px}.iti__flag.iti__sn{height:14px;background-position:-4603px 0px}.iti__flag.iti__so{height:14px;background-position:-4625px 0px}.iti__flag.iti__sr{height:14px;background-position:-4647px 0px}.iti__flag.iti__ss{height:10px;background-position:-4669px 0px}.iti__flag.iti__st{height:10px;background-position:-4691px 0px}.iti__flag.iti__sv{height:12px;background-position:-4713px 0px}.iti__flag.iti__sx{height:14px;background-position:-4735px 0px}.iti__flag.iti__sy{height:14px;background-position:-4757px 0px}.iti__flag.iti__sz{height:14px;background-position:-4779px 0px}.iti__flag.iti__ta{height:10px;background-position:-4801px 0px}.iti__flag.iti__tc{height:10px;background-position:-4823px 0px}.iti__flag.iti__td{height:14px;background-position:-4845px 0px}.iti__flag.iti__tf{height:14px;background-position:-4867px 0px}.iti__flag.iti__tg{height:13px;background-position:-4889px 0px}.iti__flag.iti__th{height:14px;background-position:-4911px 0px}.iti__flag.iti__tj{height:10px;background-position:-4933px 0px}.iti__flag.iti__tk{height:10px;background-position:-4955px 0px}.iti__flag.iti__tl{height:10px;background-position:-4977px 0px}.iti__flag.iti__tm{height:14px;background-position:-4999px 0px}.iti__flag.iti__tn{height:14px;background-position:-5021px 0px}.iti__flag.iti__to{height:10px;background-position:-5043px 0px}.iti__flag.iti__tr{height:14px;background-position:-5065px 0px}.iti__flag.iti__tt{height:12px;background-position:-5087px 0px}.iti__flag.iti__tv{height:10px;background-position:-5109px 0px}.iti__flag.iti__tw{height:14px;background-position:-5131px 0px}.iti__flag.iti__tz{height:14px;background-position:-5153px 0px}.iti__flag.iti__ua{height:14px;background-position:-5175px 0px}.iti__flag.iti__ug{height:14px;background-position:-5197px 0px}.iti__flag.iti__um{height:11px;background-position:-5219px 0px}.iti__flag.iti__un{height:14px;background-position:-5241px 0px}.iti__flag.iti__us{height:11px;background-position:-5263px 0px}.iti__flag.iti__uy{height:14px;background-position:-5285px 0px}.iti__flag.iti__uz{height:10px;background-position:-5307px 0px}.iti__flag.iti__va{height:15px;background-position:-5329px 0px}.iti__flag.iti__vc{height:14px;background-position:-5346px 0px}.iti__flag.iti__ve{height:14px;background-position:-5368px 0px}.iti__flag.iti__vg{height:10px;background-position:-5390px 0px}.iti__flag.iti__vi{height:14px;background-position:-5412px 0px}.iti__flag.iti__vn{height:14px;background-position:-5434px 0px}.iti__flag.iti__vu{height:12px;background-position:-5456px 0px}.iti__flag.iti__wf{height:14px;background-position:-5478px 0px}.iti__flag.iti__ws{height:10px;background-position:-5500px 0px}.iti__flag.iti__xk{height:15px;background-position:-5522px 0px}.iti__flag.iti__ye{height:14px;background-position:-5544px 0px}.iti__flag.iti__yt{height:14px;background-position:-5566px 0px}.iti__flag.iti__za{height:14px;background-position:-5588px 0px}.iti__flag.iti__zm{height:14px;background-position:-5610px 0px}.iti__flag.iti__zw{height:10px;background-position:-5632px 0px}.iti__flag{height:15px;box-shadow:0px 0px 1px 0px #888;background-image:url(\"https://cdn.salla.network/images/flags.png\");background-repeat:no-repeat;background-color:#f5f7f9;background-position:20px 0}@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi){.iti__flag{background-image:url(\"https://cdn.salla.network/images/flags@2x.png\")}}.iti__flag.iti__np{background-color:transparent}";

const SallaLocalizationModal = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.translationLoaded = false;
        this.languages = [];
        this.currencies = [];
        this.hasError = false;
        /**
         * Current language (existing or newly selected)
         */
        this.language = salla.config.get('user.language_code');
        /**
         * Current currency (existing or newly selected)
         */
        this.currency = salla.config.get('user.currency_code');
        salla.event.on('localization::open', () => this.open());
        salla.lang.onLoaded(() => {
            this.translationLoaded = true;
        });
        /**
         * letting developer to insert his own slot like:
         * <salla-localization>
         *   <div slot="language">...{name}....</div>
         *   <div slot="currency">...{name}....</div>
         * </salla-localization>
         * Because scoped templates not supported in stencil );
         * we made a workaround to pass language & currency attributes, then replace names in rendering
         */
        this.languageSlot = this.host.querySelector('[slot="language"]')?.innerHTML || '<label class="s-localization-modal-label" for="lang-{code}"><span>{name}</span><div class="s-localization-modal-flag flag iti__flag iti__{country_code}"></div></label>';
        this.currencySlot = this.host.querySelector('[slot="currency"]')?.innerHTML || '<label class="s-localization-modal-label" for="currency-{code}"><span>{name}</span><small class="s-localization-modal-currency">{code}</small></label>';
    }
    /**
     * open the component
     */
    async open() {
        this.modal.open();
        return await salla.api.withoutNotifier(() => this.getLanguages())
            .then(() => this.getCurrencies())
            .then(() => {
            if (this.languages.length < 2 && this.currencies.length < 2) {
                this.modal.close();
            }
        })
            .catch(e => {
            console.log(e);
            this.hasError = true;
            this.errorMessage = e.response?.data?.error?.message || e.response?.data;
        })
            .finally(() => this.modal.stopLoading());
    }
    /**
     * Hide the component
     */
    async close() {
        return this.modal.close();
    }
    async getLanguages() {
        this.language = this.language || salla.config.get('user.language_code');
        return this.languages.length > 1 ? null : await salla.config.languages().then(data => this.languages = data);
    }
    async getCurrencies() {
        this.currency = this.currency || salla.config.get('user.currency_code');
        return this.currencies.length > 1 ? null : await salla.config.currencies().then(data => this.currencies = Object.values(data || {}));
    }
    onChangeCurrency(event) {
        this.currency = event.target.value;
    }
    onChangeLanguage(event) {
        this.language = event.target.value;
    }
    /**
     * Change currency and language to the selected ones.
     */
    async submit() {
        let url;
        this.btn.load()
            .then(() => {
            if (!this.currency) {
                salla.log('There is no currency!');
                return;
            }
            if (this.currency === salla.config.get('user.currency_code', 'SAR')) {
                return;
            }
            url = window.location.href;
            return salla.currency.api.change(this.currency);
        })
            .then(() => {
            if (this.language !== salla.config.get('user.language_code', 'ar')) {
                url = salla.helpers.addParamToUrl('lang', this.language);
            }
        })
            .then(() => this.btn.stop())
            .then(() => this.close())
            .then(() => {
            if (url) {
                window.location.href = url.replace(`/${salla.config.get('user.language_code')}/`, `/${this.language}/`);
            }
        });
    }
    render() {
        return (h("salla-modal", { key: '7217465dd0a549765d84237a79a3d40d09b8ba19', isLoading: true, class: "s-hidden", ref: modal => this.modal = modal, width: "xs" }, h("div", { key: '1c7d641df3d795578b8f703deddd2deab0a0f0f3', slot: 'loading' }, h("div", { key: '9f3f99f0cb3fc0edf69a0b5672c985f037f77e99', class: "s-localization-modal-skeleton" }, h("salla-skeleton", { key: '744fd8f82a4675205a6f5fe0ed7f41ecfff73286', width: '25%', height: '15px' }), h("div", { key: '615e09c738ff315c72e4b46f0a97925b6ba43121', class: "s-localization-modal-skeleton-content" }, [...Array(4)].map(() => h("div", { class: "s-localization-modal-skeleton-item" }, h("div", { class: "s-localization-modal-skeleton-item-flex" }, h("salla-skeleton", { type: 'circle', height: '16px', width: '16px' }), h("salla-skeleton", { height: '10px', width: '100px' })), h("salla-skeleton", { height: '15px', width: '20px' })))), h("salla-skeleton", { key: '1d968a79a37d4012a9eef552bcd4f93006abcbe4', width: '25%', height: '15px' }), h("div", { key: '3a64d7c5f038f681ee58a457ba42e2ad70bf3f06', class: "s-localization-modal-skeleton-content" }, [...Array(4)].map(() => h("div", { class: "s-localization-modal-skeleton-item" }, h("div", { class: "s-localization-modal-skeleton-item-flex" }, h("salla-skeleton", { type: 'circle', height: '16px', width: '16px' }), h("salla-skeleton", { height: '10px', width: '100px' })), h("salla-skeleton", { height: '15px', width: '20px' })))), h("salla-skeleton", { key: '696cc5d9dcd7c9dd1f4a17f7bf904c836595ddcf', height: '40px', width: '100%' }))), !!this.hasError ?
            h("salla-placeholder", { alignment: "center" }, h("span", { slot: "description" }, this.errorMessage)) :
            h("div", { class: "s-localization-modal-inner" }, this.languages.length > 1 ?
                h("div", { class: "s-localization-modal-section" }, h("label", { class: "s-localization-modal-title" }, salla.lang.get('common.titles.language')), h("div", { class: "s-localization-modal-section-inner" }, this.languages.length < 6 ?
                    this.languages.map(lang => h("div", { class: "s-localization-modal-item" }, h("input", { class: "s-localization-modal-input", type: "radio", checked: this.language == lang.iso_code, onChange: () => this.language = lang.iso_code, name: "language", id: 'lang-' + lang.code.toLowerCase(), value: lang.code }), h("div", { class: "s-localization-modal-label-slot", id: "language-slot", innerHTML: this.languageSlot
                            .replace(/\{name\}/g, lang.name)
                            .replace(/\{code\}/g, lang.code)
                            .replace(/\{country_code\}/g, lang.country_code) }))) :
                    h("select", { class: "s-localization-modal-select", name: "language", onChange: e => this.onChangeLanguage(e) }, this.languages.map(lang => h("option", { value: lang.code, selected: this.language == lang.code }, lang.name)))))
                : '', this.currencies.length > 1 ?
                h("div", { class: "s-localization-modal-section" }, h("label", { class: "s-localization-modal-title" }, salla.lang.get('common.titles.currency')), h("div", { class: "s-localization-modal-section-inner" }, this.currencies.length < 6 ?
                    this.currencies.map(currency => h("div", { class: "s-localization-modal-item" }, h("input", { class: "s-localization-modal-input", type: "radio", name: "currency", checked: this.currency == currency.code, onChange: () => this.currency = currency.code, id: 'currency-' + currency.code, value: currency.code }), h("div", { class: "s-localization-modal-label-slot", id: "currency-slot", innerHTML: this.currencySlot
                            .replace(/\{name\}/g, currency.name)
                            .replace(/\{code\}/g, currency.code)
                            .replace(/\{country_code\}/g, currency.country_code) }))) :
                    h("select", { class: "s-localization-modal-select", name: "currency", onChange: e => this.onChangeCurrency(e) }, this.currencies.map(currency => h("option", { value: currency.code, selected: this.currency == currency.code }, currency.name)))))
                : '', h("salla-button", { width: "wide", ref: btn => this.btn = btn, onClick: () => this.submit() }, salla.lang.get('common.elements.ok')))));
    }
    /**
     * to reduce dom levels we will move slot data into the parent dom
     */
    componentDidRender() {
        this.host.querySelectorAll('#currency-slot').forEach(el => el.replaceWith(el.firstChild));
        this.host.querySelectorAll('#language-slot').forEach(el => el.replaceWith(el.firstChild));
    }
    get host() { return getElement(this); }
};
SallaLocalizationModal.style = sallaLocalizationModalCss;

const sallaLoginModalCss = "iframe{-moz-transition:height 0.3s;-ms-transition:height 0.3s;-o-transition:height 0.3s;-webkit-transition:height 0.3s;transition:height 0.3s;width:100%}";

const SallaLoginModal = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Does the merchant/current location for visitor allow to login using mobile, By default outside KSA is `false`
         */
        this.isMobileAllowed = true;
        /**
         * Does the merchant require registration with email & mobile
         */
        this.isEmailRequired = false;
        /**
         * Once the api verify success, it will be login the customer in web pages
         */
        this.supportWebAuth = true;
        /**
         * Reload after a successful login
         */
        this.withoutReload = false;
        /**
         * The source of opening login modal
         */
        this.source = '';
        this.htmlElement = document.documentElement;
        this.messages = [];
        this.isClosable = true;
        this.iframeLoaded = false;
        this.scrolling = 'no';
        this.direction = document.dir;
        this.canRenderIframe = false;
        salla.event.on('login::open', (data) => {
            if (!this.isEmailAllowed && !this.isMobileAllowed) {
                salla.logger.warn('Please enable atleast one login type to use this component.');
                return;
            }
            this.source = data?.source ?? false;
            this.withoutReload = data?.withoutReload ?? this.withoutReload;
            this.open(data);
            this.openModal();
        });
        salla.event.on('modal::close', (data) => {
            if (this.iframe)
                this.sendMessageToIframe({
                    source: 'login',
                    type: 'modal_closed',
                    data,
                });
        });
        salla.onReady(() => {
            this.api = salla.config.get('store.api');
            this.storeId = salla.config.get('store.id');
        });
    }
    componentDidLoad() {
        window.addEventListener('message', (event) => {
            if (event.data.source != "login") {
                return;
            }
            if (!this.inline && !this.canRenderIframe) {
                return;
            }
            salla.log(`salla-account:: recived an event`, event.data);
            let action = event.data?.type?.replace('iframe::', '');
            let value = event.data.message;
            //if we need skip some events
            // if (action === 'dispatchEvent' && [].includes(value.event)) {
            //     return;
            // }
            // if (action == "dispatchEvent") {
            //   return this.host.dispatchEvent(new CustomEvent(value.name, {
            //     cancelable: true,
            //     bubbles: true,
            //     detail: value.payload
            //   }));
            // }
            if (action == 'ready') {
                if (value.isPasskeyPage) {
                    this.createPassKey.postMessage({ source: "login", type: "init_passkey_page", data: {
                            token: salla.storage.get('token'),
                            store_id: salla.config.get('store.id'),
                            locale: salla.config.get('user.language_code'),
                            redirect: salla.config.get('store.url')
                        } }, salla.config.get('login.url'));
                    return;
                }
                this.handleIframeReadyAction();
                return;
            }
            if (action == 'height') {
                return (this.iframe.height = value?.height + 'px');
            }
            //share the iframe storage, so login too
            if (action == "storage") {
                return this.handleIframeStorageAction(value);
            }
            // if (action == "success") {
            //   this.isClosable = true;
            //   confetti.startConfetti(1200, 50, 150);
            // }
            if (action == "scrolling") {
                this.scrolling = value;
                this.isClosable = false;
                return;
            }
            if (action == "direction") {
                return document.dir = this.direction = value ? "rtl" : "ltr";
            }
            if (action == 'notify') {
                return salla.notify[value.type](value.message);
            }
            // temporary condition until we handle both cases separately
            if (action == 'authenticated' || action == 'authenticated_web_auth') {
                !value?.withoutClose && this.close();
                return salla.auth.api.handlAfterAuthenticatedResponse(value, this.supportWebAuth)
                    .then(() => !(value?.withoutReload || this.withoutReload) && setTimeout(() => window.location.reload(), 1000));
            }
            if (action == 'dispatchEvent' && value.event == 'auth::verified') {
                salla.log('Ignored dispatchEvent `auth::verified` from iframe');
                //we don't need to fire this event because it have listeners for it, and already it's fired/firing from `salla.auth.api.handlAfterAuthenticatedResponse` already we are handling it
                return;
            }
            if (action == 'dispatchEvent') {
                return salla.event.emit(value.event, ...value.payload);
            }
            if (action == 'reload') {
                if (value?.withClose)
                    this.modal.close();
                return window.location.reload();
            }
            if (action === 'open_page') {
                return window.location.href = value.url;
            }
            if (action === 'open_passkey_page') {
                this.createPassKey = window.open(`${salla.config.get('login.url')}/create-passkey`);
                return;
            }
            if (action === 'guest-checkout') {
                return this.handleGuestCheckout();
            }
            if (action == "close") {
                this.close();
            }
        });
        this.observeDarkModeChanges();
        setTimeout(() => Salla.event.emit('salla-login::ready'), 1);
    }
    /**
     * Open login component
     */
    async open(_event = null) {
        /**
         * This is a workaround until we remove all the user objet from twig files
         * When the user is already login, let's reload the page
         */
        if (!salla.config.isGuest()) {
            if (!this.withoutReload) {
                return location.reload();
            }
            // Fire an event if withoutReload is true
            return;
        }
        return this.modal.open();
    }
    close() {
        Salla.event.emit('salla-login::closing');
        this.modal.close();
        this.iframeLoaded = false;
        this.canRenderIframe = false;
        this.host.dispatchEvent(new CustomEvent('salla-login:closed', {
            cancelable: true,
            bubbles: true,
            detail: null
        }));
        Salla.event.emit('salla-login::closed');
    }
    handleIframeReadyAction() {
        this.sendInitMessage();
        this.sendMessageToIframe({
            source: 'login',
            type: 'width',
            data: document.body.clientWidth,
        });
    }
    observeDarkModeChanges() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.attributeName === 'class') {
                    this.sendMessageToIframe({
                        source: 'login',
                        type: 'darkMode',
                        data: { isDark: this.htmlElement.classList.contains('dark') ? true : false },
                    });
                }
            });
        });
        // observing the HTML element for attribute changes
        observer.observe(this.htmlElement, { attributes: true });
    }
    async handleIframeStorageAction(value) {
        let token, cartUserId = salla.storage.get('cart.user_id');
        let withCartReset = false;
        Object.entries(value).filter(item => !Salla.storage.get(item[0]))
            .forEach(([key, value]) => {
            salla.log('Shared storage from accounts domain', key, value);
            let cleanedValue = (typeof value === 'string') ? value?.replace(/^"|"$/g, '') : value;
            salla.storage.set(key, cleanedValue);
            if (key === 'token') {
                token = cleanedValue;
            }
            if (key === 'user' && cartUserId && (cleanedValue.id !== cartUserId)) {
                withCartReset = true;
            }
        });
        if (token) {
            this.modal.close();
            Salla.auth.event.tokenFetched(token);
            try {
                await Salla.cart.api.assign();
            }
            catch (error) {
                Salla.log('Error on assign');
            }
            withCartReset && Salla.cart.reset();
            !Salla.auth.api.isSessionless() && await Salla.auth.api.request('auth/jwt');
            setTimeout(() => window.location.reload(), 100);
            return;
        }
        withCartReset && Salla.cart.reset();
    }
    sendMessageToIframe(message) {
        if (!this.iframe)
            return;
        return this.iframe.contentWindow.postMessage(message, '*');
    }
    sendInitMessage() {
        let headers = this.headers;
        try {
            headers = typeof headers === 'string' ? JSON.parse(headers) : headers;
        }
        catch (error) {
            console.error('Failed to parse headers!', this.headers, error);
            headers = undefined;
        }
        const storageObject = {
            user: salla.storage.get('user'),
            s_translations: salla.storage.get('s_translations'),
            token: salla.storage.get('token'),
        };
        storageObject.user || (delete storageObject.user);
        storageObject.s_translations || (delete storageObject.s_translations);
        storageObject.token || (delete storageObject.token);
        this.sendMessageToIframe({
            source: "login",
            type: "init",
            data: {
                id: this.storeId,
                lang: salla.lang.locale,
                isDark: this.htmlElement.classList.contains('dark') ? true : false,
                apiUrl: this.api?.replace(/\/+$/, ''),
                supportWebAuth: this.supportWebAuth,
                withoutReload: this.withoutReload,
                inline: this.inline,
                settings: salla.config.all(),
                headers: headers,
                storage: storageObject,
            }
        });
    }
    async handleGuestCheckout() {
        this.modal.close();
        if (salla.config.isGuest()) {
            await salla.api.cart.syncGuestCart();
            return salla.cart.submit(true);
        }
    }
    openModal() {
        if (!this.canRenderIframe) {
            this.canRenderIframe = true;
        }
        this.modal.open();
    }
    render() {
        if (this.inline) {
            return this.getLoginDom();
        }
        return (h("salla-modal", { class: "s-login-modal", ref: modal => this.modal = modal, width: "xs" }, this.getLoginDom()));
    }
    getLoginDom() {
        if (!this.canRenderIframe) {
            return;
        }
        return h(Fragment, null, h("iframe", { src: `${salla.config.get('login.url', 'https://accounts.salla.com')}?src=${this.source}`, title: "Salla Login", class: "hide-scroll", loading: 'lazy', ref: iframe => { this.iframe = iframe; }, allow: "publickey-credentials-get; publickey-credentials-create", scrolling: this.scrolling, frameborder: "0", width: "100%" }));
    }
    get host() { return getElement(this); }
};
SallaLoginModal.style = sallaLoginModalCss;

var Rate = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="30" height="32" viewBox="0 0 30 32">
<title>star2</title>
<path d="M29.714 11.839c0 0.321-0.232 0.625-0.464 0.857l-6.482 6.321 1.536 8.929c0.018 0.125 0.018 0.232 0.018 0.357 0 0.464-0.214 0.893-0.732 0.893-0.25 0-0.5-0.089-0.714-0.214l-8.018-4.214-8.018 4.214c-0.232 0.125-0.464 0.214-0.714 0.214-0.518 0-0.75-0.429-0.75-0.893 0-0.125 0.018-0.232 0.036-0.357l1.536-8.929-6.5-6.321c-0.214-0.232-0.446-0.536-0.446-0.857 0-0.536 0.554-0.75 1-0.821l8.964-1.304 4.018-8.125c0.161-0.339 0.464-0.732 0.875-0.732s0.714 0.393 0.875 0.732l4.018 8.125 8.964 1.304c0.429 0.071 1 0.286 1 0.821z"></path>
</svg>
`;

var Star3 = `<svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 80 80">
<title>star3</title>
  <defs>
    <style>
      .a {
        fill: none !important;
      }

      .b {
        fill: #ff9e01;
      }

      .c {
        fill: #fff;
        opacity: 0.1;
      }

    </style>
  </defs>
  <g transform="translate(-683 -269)">
    <rect class="a" width="80" height="80" transform="translate(683 269)" />
    <g transform="translate(684.539 261.216)">
      <path class="b"
        d="M110.117,37.062,90.024,35.2,82.043,16.665a1.61,1.61,0,0,0-2.958,0L71.1,35.2,51.011,37.062a1.61,1.61,0,0,0-.914,2.813l15.16,13.318L60.821,72.878a1.61,1.61,0,0,0,2.393,1.739l17.351-10.3,17.351,10.3a1.61,1.61,0,0,0,2.393-1.739L95.871,53.192l15.16-13.318A1.61,1.61,0,0,0,110.117,37.062Z"
        transform="translate(-42.104 -4.011)" />
      <g transform="translate(0 10.971)">
        <path class="b"
          d="M93.54,12.016c1.024,1.423,3.915,7.533,5.568,11.094a.559.559,0,0,1-.891.641c-2.853-2.7-7.73-7.377-8.754-8.8a2.512,2.512,0,0,1,4.077-2.935Z"
          transform="translate(-75.621 -10.971)" />
        <path class="b"
          d="M360.909,12.016c-1.024,1.423-3.915,7.533-5.568,11.094a.559.559,0,0,0,.891.641c2.853-2.7,7.73-7.377,8.754-8.8a2.512,2.512,0,0,0-4.077-2.935Z"
          transform="translate(-301.908 -10.971)" />
        <path class="b"
          d="M427.538,284.659c-1.667-.543-8.366-1.441-12.261-1.934a.559.559,0,0,0-.34,1.044c3.436,1.9,9.377,5.123,11.044,5.666a2.512,2.512,0,0,0,1.558-4.776Z"
          transform="translate(-352.351 -241.894)" />
        <path class="b"
          d="M1.734,284.659c1.667-.543,8.366-1.441,12.261-1.934a.559.559,0,0,1,.34,1.044c-3.436,1.9-9.377,5.123-11.044,5.666a2.512,2.512,0,0,1-1.558-4.776Z"
          transform="translate(0 -241.894)" />
        <path class="b"
          d="M239.794,412.414c0-1.753,1.224-8.4,1.963-12.257a.559.559,0,0,1,1.1,0c.739,3.855,1.963,10.5,1.963,12.257a2.512,2.512,0,0,1-5.023,0Z"
          transform="translate(-203.768 -341.301)" />
      </g>
      <path class="c"
        d="M84.945,23.4l-2.9-6.74a1.61,1.61,0,0,0-2.958,0L71.1,35.2,51.011,37.062a1.61,1.61,0,0,0-.914,2.813l15.16,13.318L60.821,72.878a1.61,1.61,0,0,0,2.393,1.739l2.309-1.371A125,125,0,0,1,84.945,23.4Z"
        transform="translate(-42.104 -4.011)" />
    </g>
  </g>
</svg>
`;

var GiftImg = `<svg xmlns="http://www.w3.org/2000/svg" width="54.079" height="53.191" viewBox="0 0 54.079 53.191"><defs><style>.a{fill:#ee9d0d;}.b{fill:#c7830b;}.c{fill:#ea2b2d;}.d{fill:#cb2527;}.e{fill:#6699ce;}.f{fill:#faa6b2;}.g{fill:#a6deff;}.h{fill:#eeb436;}.i{fill:#f72d2f;}</style></defs><path class="a" d="M40,248H77.3v25.88a2.1,2.1,0,0,1-2.1,2.1H42.1a2.1,2.1,0,0,1-2.1-2.1Z" transform="translate(-38.135 -222.787)"/><path class="b" d="M250.632,248.711v12.755L236.2,248h13.67Z" transform="translate(-211.463 -222.787)"/><path class="b" d="M333.957,336v3.207L330.52,336Z" transform="translate(-294.787 -300.528)"/><path class="c" d="M226.194,32.048l-.5.185a5.035,5.035,0,0,0-3.072,3.292l-.468,1.585-.759.414a5.035,5.035,0,0,0-2.422,3l8.865,8.271,5.09-5.456.262-6.205a5.191,5.191,0,0,0-7-5.083Z" transform="translate(-196.246 -31.722)"/><path class="c" d="M358.628,175.48l-.15.509a5.034,5.034,0,0,1-3.072,3.292l-1.55.577-.359.785a5.034,5.034,0,0,1-2.822,2.624L341.81,175l5.09-5.455,6.172-.69a5.191,5.191,0,0,1,5.555,6.629Z" transform="translate(-304.761 -152.837)"/><path class="d" d="M168,248h7.461v27.978H168Z" transform="translate(-151.213 -222.787)"/><path class="c" d="M40,336H77.3v7.461H40Z" transform="translate(-38.135 -300.528)"/><path class="d" d="M333.957,336v3.207L330.52,336Z" transform="translate(-294.787 -300.528)"/><path class="a" d="M2.1,0H40.8a2.1,2.1,0,0,1,2.1,2.1V9.326H0V2.1A2.1,2.1,0,0,1,2.1,0Z" transform="matrix(0.731, 0.682, -0.682, 0.731, 18.641, 4.976)"/><path class="d" d="M0,0H9.326V9.326H0Z" transform="matrix(0.731, 0.682, -0.682, 0.731, 30.912, 16.424)"/><path class="d" d="M286.857,79.389a.931.931,0,0,1-.74-.365l-.615-.8a12.516,12.516,0,0,1-2.528-9,.933.933,0,0,1,1.855.2,10.66,10.66,0,0,0,2.153,7.667l.615.8a.933.933,0,0,1-.739,1.5Z" transform="translate(-252.718 -64.113)"/><path class="c" d="M185.485,178.151l-.039.014a30.78,30.78,0,0,1-12.034,1.906l-2.381-.1,4.092,3.817-1.181,4,3.728-1.206a30.775,30.775,0,0,0,9.833-5.315l.71-.572Z" transform="translate(-153.891 -161.081)"/><path class="d" d="M363.834,194.779a12.51,12.51,0,0,1-6.93-2.1l-.843-.559a.933.933,0,1,1,1.031-1.554l.842.558a10.659,10.659,0,0,0,7.8,1.618.933.933,0,1,1,.328,1.836A12.663,12.663,0,0,1,363.834,194.779Z" transform="translate(-316.982 -171.914)"/><path class="c" d="M275,202.524l-.012.04a30.776,30.776,0,0,0-1.069,12.137l.265,2.369-4.092-3.817-3.909,1.455.945-3.8a30.776,30.776,0,0,1,4.622-10.177l.521-.748Z" transform="translate(-237.949 -180.364)"/><circle class="e" cx="1.865" cy="1.865" r="1.865" transform="translate(10.259 0.032)"/><circle class="f" cx="1.865" cy="1.865" r="1.865" transform="translate(0 21.482)"/><path class="g" d="M36.663,36.663a.933.933,0,0,1-.885-.638l-.048-.143a2.946,2.946,0,0,0-2.8-2.017.933.933,0,1,1,0-1.865A4.808,4.808,0,0,1,37.5,35.292l.048.143a.933.933,0,0,1-.885,1.228Z" transform="translate(-31.067 -31.968)"/><path class="g" d="M79.493,194.438a.929.929,0,0,1-.506-.15l-.185-.12a2.074,2.074,0,0,0-2.192-.047.933.933,0,0,1-.947-1.607,3.929,3.929,0,0,1,4.153.088l.185.12a.933.933,0,0,1-.508,1.716Z" transform="translate(-69.235 -173.283)"/><path class="h" d="M27.751,85.141l2.88,2.644,3.811-.874-1.624,3.556,2.008,3.354-3.884-.446-2.569,2.946L27.6,92.49,24,90.957l3.4-1.922Z" transform="translate(-24 -78.914)"/><path class="h" d="M82.174,227.375l-.959,3.772,2.564,2.928-3.884.254L77.9,237.673l-1.442-3.615-3.8-.862,2.993-2.488-.353-3.876,3.291,2.078Z" transform="translate(-66.992 -204.086)"/><path class="i" d="M300.471,141.9l-5.455-5.09,5.09-5.456a8.342,8.342,0,0,1,5.455,5.09Z" transform="translate(-263.422 -119.737)"/></svg>`;

const sallaLoyaltyCss = "";

const SallaLoyalty = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.selectedItem = undefined;
        /**
         * Does the merchant allow to login using email
         */
        this.allowEmail = true;
        /**
         * Does the merchant/current location for visitor allow to login using mobile, By default outside KSA is `false`
         */
        this.allowMobile = true;
        /**
         * Does the merchant require registration with email & mobile
         */
        this.requireEmail = false;
        salla.event.on('loyalty::open', () => this.open());
        salla.auth.event.onLoggedIn(() => {
            this.is_loggedin = true;
        });
        salla.onReady(() => {
            this.is_loggedin = salla.config.isUser();
        });
        salla.lang.onLoaded(() => {
            this.guestMessage = salla.lang.get('pages.loyalty_program.guest_message');
            this.translationLoaded = true;
        });
        salla.cart.event.onUpdated(cart => {
            this.prizePoints = cart.loyalty.prize?.points;
            this.prizeTitle = cart.loyalty.prize?.title;
            this.customerPoints = cart.loyalty.customer_points || this.customerPoints;
        });
    }
    setSelectedPrizeItem(item) {
        if (!this.selectedItem || this.selectedItem?.id != item.id) {
            this.selectedItem = item;
        }
        else {
            this.selectedItem = undefined;
        }
    }
    handleLongText(text) {
        if (text.length > 150) {
            return text.substring(0, 150) + '...';
        }
        return text;
    }
    prizeItem(item) {
        let klass = {
            's-loyalty-prize-item-selected': !!this.selectedItem && this.selectedItem?.id == item.id,
            "s-loyalty-prize-item": true
        };
        return h("div", { onClick: () => this.setSelectedPrizeItem(item), class: klass }, h("img", { class: "s-loyalty-prize-item-image", src: item.image, alt: item.name }), h("div", { class: "s-loyalty-prize-item-title" }, item.name), h("div", { class: "s-loyalty-prize-item-subtitle" }, this.handleLongText(item.description)), h("div", { class: "s-loyalty-prize-item-points" }, item.cost_points, " ", salla.lang.get('pages.loyalty_program.point'), h("div", { class: "s-loyalty-prize-item-check" }, h("div", null))));
    }
    getConfirmationModal() {
        return [
            h("salla-placeholder", { alignment: "center", icon: Star3, class: "s-loyalty-confirmation-modal-content" }, h("div", { slot: "title", class: "s-loyalty-confirmation-title" }, salla.lang.get('pages.loyalty_program.exchange_points')), h("div", { slot: "description" }, salla.lang.get('pages.loyalty_program.are_you_sure_to_exchange'), " ( ", h("strong", null, this.selectedItem?.cost_points), " ", salla.lang.get('pages.loyalty_program.point'), " ) ", salla.lang.get('pages.loyalty_program.for'), " ( ", h("strong", null, this.selectedItem?.name), " )")),
            h("div", { class: "s-loyalty-confirmation-actions" }, h("salla-button", { fill: 'outline', width: "wide", onClick: () => this.cancelProcess() }, salla.lang.get('pages.loyalty_program.cancellation')), h("salla-button", { loading: this.buttonLoading, width: "wide", onClick: () => this.exchangeLoyaltyPoint() }, salla.lang.get('pages.loyalty_program.confirm')))
        ];
    }
    getAfterExchangeUI() {
        return h("slot", { name: 'points-applied-widget' }, h("salla-list-tile", { class: "s-loyalty-after-exchange" }, h("div", { slot: "title", class: "s-loyalty-after-exchange-title" }, this.prizeTitle, " \u00A0 - \u00A0 ", this.prizePoints, " ", salla.lang.get('pages.loyalty_program.point')), h("div", { slot: 'action', class: "s-loyalty-after-exchange-action" }, h("salla-button", { class: "s-loyalty-after-exchange-reset", shape: "icon", fill: 'outline', color: "danger", size: "small", onClick: () => this.resetExchange() }, h("span", { innerHTML: Cancel })))));
    }
    /**
     * Show loyalty modal
     */
    async open() {
        if (!this.is_loggedin)
            return salla.event.dispatch('login::open');
        this.modal?.open();
        return await salla.loyalty.getProgram()
            .then(response => {
            this.loyaltyProgram = response.data;
        })
            .catch(e => {
            this.hasError = true;
            this.errorMessage = e.response?.data?.error?.message || e.response?.data;
        })
            .finally(() => this.modal?.stopLoading());
    }
    /**
     *
     * Hide loyalty modal
     */
    async close() {
        return this.modal.close();
    }
    /**
     *
     * Cancel Exchanged prizes
     */
    async resetExchange() {
        return await salla.loyalty.reset();
    }
    /**
     * Open Confirmation modal
     */
    async openConfirmation() {
        return await this.modal.close()
            .then(() => this.confirmationModal?.open())
            .catch(e => console.log(e));
    }
    /**
     * Cancel process
     */
    async cancelProcess() {
        return await this.confirmationModal.close()
            .then(() => this.selectedItem = null)
            .catch(e => console.log(e));
    }
    /**
     * Exchange loyalty points with the selected prize item
     * @param {number} loyalty_prize_id
     *
     */
    async exchangeLoyaltyPoint() {
        this.buttonLoading = true;
        return await salla.loyalty.exchange(this.selectedItem?.id)
            .then(() => this.selectedItem.key == "FREE_PRODUCT" && salla.url.is_page('cart') && window.location.reload())
            .finally(() => {
            this.buttonLoading = false;
            this.cancelProcess();
        });
    }
    render() {
        // A. when the exchange is done, and we have the final prize points to show it in cart page
        if (this.prizePoints) {
            return this.getAfterExchangeUI();
        }
        //todo:: change all translations to states
        return [
            h("slot", { name: 'widget' }, this.customerPoints ?
                h("salla-list-tile", { class: 's-loyalty-widget' }, h("div", { slot: "icon", class: "s-loyalty-widget-icon", innerHTML: Rate }), h("div", { slot: "subtitle" }, this.customerPoints ? salla.lang.get('pages.loyalty_program.cart_total_point_summary', { "balance": this.customerPoints }) : this.guestMessage, h("salla-button", { shape: "link", color: "primary", onClick: () => salla.event.dispatch("loyalty::open") }, this.customerPoints ? salla.lang.get('pages.loyalty_program.cart_point_exchange_now') : salla.lang.get('blocks.header.login')))) :
                ''),
            h("salla-modal", { noPadding: true, width: "sm", ref: modal => this.confirmationModal = modal }, this.getConfirmationModal()),
            h("salla-modal", { isLoading: true, "has-skeleton": true, width: "md", ref: modal => this.modal = modal }, h("div", { slot: "loading" }, h("div", { class: "s-loyalty-skeleton" }, h("salla-list-tile", { class: "s-loyalty-header" }, h("div", { slot: "icon", class: "s-loyalty-header-icon" }, h("salla-skeleton", { type: "circle", height: '6rem', width: '6rem' })), h("div", { slot: "title", class: "s-loyalty-header-title mb-5" }, h("salla-skeleton", { height: '15px', width: '50%' })), h("div", { slot: "subtitle", class: "s-loyalty-header-subtitle" }, h("salla-skeleton", { height: '10px' }), h("salla-skeleton", { height: '10px', width: '75%' }))), h("div", { class: "s-loyalty-skeleton-cards" }, [...Array(3)].map(() => h("div", { class: "s-loyalty-prize-item swiper-slide" }, h("salla-skeleton", { height: '9rem' }), h("div", { class: "s-loyalty-prize-item-title" }, h("salla-skeleton", { height: '15px', width: '75%' })), h("div", { class: "s-loyalty-prize-item-subtitle" }, h("salla-skeleton", { height: '10px', width: '50%' }), h("salla-skeleton", { height: '10px', width: '25%' })), h("div", { class: "s-loyalty-prize-item-points" }, h("salla-skeleton", { height: '15px', width: '100px' }), h("div", { class: "s-loyalty-prize-item-check" }, h("salla-skeleton", { height: '1rem', width: '1rem', type: 'circle' })))))))), !this.hasError && !!this.loyaltyProgram ?
                [
                    h("salla-list-tile", { id: 's-loyalty-header', class: "s-loyalty-header" }, h("div", { slot: "icon", class: "s-loyalty-header-icon", innerHTML: GiftImg }), h("div", { slot: "title", class: "s-loyalty-header-title" }, this.loyaltyProgram.prize_promotion_title), h("div", { slot: "subtitle", class: "s-loyalty-header-subtitle" }, this.loyaltyProgram.prize_promotion_description)),
                    h("salla-tabs", null, this.loyaltyProgram.prizes.map((prize) => h("salla-tab-header", { slot: "header", name: prize.title }, h("span", null, prize.title))), this.loyaltyProgram.prizes.map((prize, index) => h("salla-tab-content", { slot: "content", name: prize.title }, h("salla-slider", { class: "s-loyalty-slider", loop: false, "controls-outer": true, id: 'loyalty-popup-slider-' + index, type: "carousel" }, h("div", { slot: 'items' }, prize.items.map((item) => this.prizeItem(item))))))),
                    h("salla-button", { disabled: !this.selectedItem, width: "wide", class: "s-loyalty-program-redeem-btn", onClick: () => this.openConfirmation() }, salla.lang.get('pages.loyalty_program.exchange_points')),
                ]
                : h("salla-placeholder", { class: "s-loyalty-placeholder", alignment: "center" }, !!this.errorMessage ? h("span", { slot: "description" }, this.errorMessage) : '')),
        ];
    }
};
SallaLoyalty.style = sallaLoyaltyCss;

const sallaMaintenanceAlertCss = ".s-maintenance-alert-wrapper{display:flex;min-height:40px;width:100%;flex-direction:row;align-items:center;justify-content:center;--tw-bg-opacity:1;background-color:rgba(26, 38, 61, var(--tw-bg-opacity));padding:0.25rem 0.5rem;--tw-text-opacity:1;color:rgba(255, 255, 255, var(--tw-text-opacity))}.s-maintenance-alert-wrapper a{transition:0.35s cubic-bezier(0.2, 1, 0.3, 1)}.s-maintenance-alert-wrapper *{color:inherit}@media (min-width: 640px){.s-maintenance-alert-wrapper{padding-left:2rem;padding-right:2rem}}.s-maintenance-alert-content{margin-top:1rem;margin-bottom:1rem;display:flex;width:100%;align-items:center;justify-content:space-between}@media (min-width: 640px){.s-maintenance-alert-content{padding-left:2rem;padding-right:2rem}}.s-maintenance-alert-container{display:flex;align-items:center}.s-maintenance-alert-icon{margin-right:1.25rem;display:none}@media (min-width: 640px){.s-maintenance-alert-icon{display:block}}.s-maintenance-alert-text h2{margin-bottom:0.5rem;font-size:0.875rem;font-weight:700;line-height:1.4}@media (min-width: 640px){.s-maintenance-alert-text h2{font-size:1.5rem;line-height:2rem}}.s-maintenance-alert-text p{margin:0px;text-align:right;font-size:10px;line-height:1.2}@media (min-width: 640px){.s-maintenance-alert-text p{text-align:center;font-size:0.75rem;line-height:1}}.s-maintenance-alert-btn{position:relative;margin-left:4px;margin-right:4px;display:inline-block;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;white-space:nowrap;border-radius:0.125rem;border-width:1px;--tw-border-opacity:1;border-color:rgba(93, 213, 196, var(--tw-border-opacity));--tw-bg-opacity:1;background-color:rgba(93, 213, 196, var(--tw-bg-opacity));padding:0.5rem;text-align:center;vertical-align:middle;font-size:0.875rem;font-weight:400;line-height:1.4;--tw-text-opacity:1;color:rgba(255, 255, 255, var(--tw-text-opacity))}.s-maintenance-alert-btn:hover{--tw-bg-opacity:1;background-color:rgba(53, 203, 181, var(--tw-bg-opacity))}.s-maintenance-alert-btn *{pointer-events:none}[dir=rtl] .s-maintenance-alert-btn{margin-left:1.25rem;margin-right:0}@media (min-width: 640px){.s-maintenance-alert-btn{padding:0.5rem 1rem}}";

const SallaMaintenanceAlert = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    componentWillLoad() {
        this.title = salla.config.get('maintenance_details.title');
        this.message = salla.config.get('maintenance_details.message');
        this.buttonTitle = window.innerWidth <= 768 ? salla.config.get('maintenance_details.button_title') : salla.config.get('maintenance_details.button_full_title');
    }
    closeAlert() {
        salla.storage.set('hide_salla-maintenance-alert_at', Date.now());
        this.host.style.display = 'none';
    }
    render() {
        return (h(Host, { key: 'fa4c58fe7ee2db9123f5ea0e481b9c974df489d0', class: "s-maintenance-alert-wrapper" }, h("button", { key: '9c1df10f48abd76cef72163cca33614a1b2a286e', class: "s-maintenance-alert-close", innerHTML: Cancel, onClick: () => this.closeAlert() }), h("div", { key: '48744b89d954927eb079ad9533cd52bc6149dbe8', class: "s-maintenance-alert-content" }, h("div", { key: 'a0df971610bbb0b6dba99955c40a89760f8b6f35', class: "s-maintenance-alert-container" }, h("div", { key: 'b15d5b9ba9d6e327cbd9706ba03e66459f3d752e', class: "s-maintenance-alert-icon" }, h("img", { key: '27a34719b58bc0afd30e55eeb51549f7ee468ac9', src: salla.url.cdn('images/alert.png'), alt: "Alert" })), h("div", { key: 'c9373d6db047da4d678005fe2397aa0ad14345e0', class: "s-maintenance-alert-text" }, h("h2", { key: '2202bc87b20c2d864fac8d925f7585b19e50a9d2' }, this.title), h("p", { key: 'cd2c5e6d2ef3098cf654357dca2031a494d4926a' }, this.message))), h("div", { key: '60983d470feb85bc72e40a37cb769bcf3121f2c9' }, h("a", { key: 'ac397f2c66c4e1e677200fb711d1c4b858d91f6c', class: "s-maintenance-alert-btn", href: salla.config.get('maintenance_details.button_url') }, this.buttonTitle)))));
    }
    componentDidLoad() {
        //auto-hide the alert if close button is clicked before one hour
        let hidden_at = salla.storage.get('hide_salla-maintenance-alert_at');
        if (hidden_at && ((Date.now() - hidden_at) / 1000 / 60) < 60) {
            this.closeAlert();
        }
    }
    get host() { return getElement(this); }
};
SallaMaintenanceAlert.style = sallaMaintenanceAlertCss;

var Location = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>location</title>
<path d="M16.001 0c-7.879 0-12.001 6.204-12.001 12.333 0 5.813 9.853 17.833 10.976 19.185 0.253 0.305 0.629 0.481 1.025 0.481s0.772-0.176 1.027-0.481c1.121-1.352 10.972-13.372 10.972-19.185 0-6.129-4.121-12.333-11.999-12.333zM16.001 28.549c-3.32-4.184-9.335-12.527-9.335-16.216 0-4.656 2.92-9.667 9.335-9.667 6.412 0 9.332 5.011 9.332 9.667 0 3.689-6.013 12.032-9.332 16.216zM16 6.667c-2.941 0-5.333 2.392-5.333 5.333s2.392 5.333 5.333 5.333 5.333-2.392 5.333-5.333-2.392-5.333-5.333-5.333zM16 14.667c-1.471 0-2.667-1.196-2.667-2.667s1.196-2.667 2.667-2.667 2.667 1.196 2.667 2.667-1.196 2.667-2.667 2.667z"></path>
</svg>
`;

var Edit = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>edit</title>
<path d="M30.583 1.417c-1.828-1.829-5.019-1.829-6.847 0l-13.396 13.396c-0.161 0.161-0.279 0.361-0.341 0.581l-1.949 6.911c-0.131 0.464 0 0.964 0.341 1.305 0.253 0.252 0.593 0.389 0.943 0.389 0.121 0 0.243-0.016 0.361-0.051l6.911-1.949c0.22-0.061 0.419-0.179 0.581-0.34l10.455-10.453s0 0 0 0l2.941-2.941c1.887-1.888 1.887-4.96 0-6.848zM15.547 19.528l-4.284 1.208 1.208-4.284 9.265-9.265 3.076 3.076zM28.696 6.38l-1.999 1.999-3.076-3.076 1.999-1.999c0.849-0.848 2.227-0.848 3.076 0 0.848 0.848 0.848 2.227 0 3.076zM24 20c-0.737 0-1.333 0.597-1.333 1.333v4c0 2.205-1.795 4-4 4h-12c-2.205 0-4-1.795-4-4v-12c0-2.205 1.795-4 4-4h4c0.737 0 1.333-0.597 1.333-1.333s-0.596-1.333-1.333-1.333h-4c-3.676 0-6.667 2.991-6.667 6.667v12c0 3.676 2.991 6.667 6.667 6.667h12c3.676 0 6.667-2.991 6.667-6.667v-4c0-0.736-0.596-1.333-1.333-1.333z"></path>
</svg>
`;

var CurrentLocation = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>location-target</title>
<path d="M16 9.333c-3.676 0-6.667 2.991-6.667 6.667s2.991 6.667 6.667 6.667 6.667-2.991 6.667-6.667-2.991-6.667-6.667-6.667zM16 20c-2.205 0-4-1.795-4-4s1.795-4 4-4 4 1.795 4 4-1.795 4-4 4zM30.667 14.667h-1.401c-0.627-6.289-5.643-11.305-11.932-11.932v-1.401c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333v1.401c-6.289 0.627-11.305 5.643-11.932 11.932h-1.401c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333h1.401c0.628 6.289 5.643 11.305 11.932 11.932v1.401c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-1.401c6.289-0.628 11.305-5.643 11.932-11.932h1.401c0.736 0 1.333-0.597 1.333-1.333s-0.597-1.333-1.333-1.333zM16 26.667c-5.881 0-10.667-4.785-10.667-10.667s4.785-10.667 10.667-10.667 10.667 4.785 10.667 10.667-4.785 10.667-10.667 10.667z"></path>
</svg>
`;

var LocationMarker = `<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="36" height="36" rx="18" fill="#5CD5C4"/>
<path d="M18 10C17.0104 10 16.1458 10.1771 15.4062 10.5312C14.6562 10.8854 14.026 11.3542 13.5156 11.9375C13.0156 12.5104 12.6406 13.1667 12.3906 13.9062C12.1302 14.6458 12 15.401 12 16.1719C12 16.8906 12.2604 17.7656 12.7812 18.7969C13.3021 19.8281 13.8854 20.8333 14.5312 21.8125C15.1875 22.7812 15.8073 23.6406 16.3906 24.3906C16.9844 25.1302 17.349 25.5885 17.4844 25.7656C17.5469 25.8385 17.625 25.8958 17.7188 25.9375C17.8125 25.9792 17.9062 26 18 26C18.1042 26 18.1979 25.9792 18.2812 25.9375C18.375 25.8958 18.4531 25.8385 18.5156 25.7656C18.651 25.5885 19.0156 25.1302 19.6094 24.3906C20.1927 23.6406 20.8073 22.7812 21.4531 21.8125C22.1094 20.8333 22.6979 19.8281 23.2188 18.7969C23.7396 17.7656 24 16.8906 24 16.1719C24 15.401 23.8698 14.6458 23.6094 13.9062C23.3594 13.1667 22.9792 12.5104 22.4688 11.9375C21.9688 11.3542 21.3438 10.8854 20.5938 10.5312C19.8542 10.1771 18.9896 10 18 10ZM18 24.2812C17.5833 23.75 17.1094 23.1198 16.5781 22.3906C16.0365 21.651 15.526 20.901 15.0469 20.1406C14.5677 19.3698 14.1615 18.6302 13.8281 17.9219C13.4948 17.2135 13.3281 16.6302 13.3281 16.1719C13.3281 15.5885 13.4219 15.0052 13.6094 14.4219C13.7969 13.849 14.0781 13.3333 14.4531 12.875C14.8385 12.4167 15.3281 12.0469 15.9219 11.7656C16.5052 11.474 17.1979 11.3281 18 11.3281C18.8021 11.3281 19.4948 11.474 20.0781 11.7656C20.6719 12.0469 21.1562 12.4167 21.5312 12.875C21.9167 13.3333 22.2031 13.849 22.3906 14.4219C22.5781 15.0052 22.6719 15.5885 22.6719 16.1719C22.6719 16.6302 22.5052 17.2135 22.1719 17.9219C21.8385 18.6302 21.4323 19.3698 20.9531 20.1406C20.474 20.901 19.9688 21.651 19.4375 22.3906C18.8958 23.1198 18.4167 23.75 18 24.2812ZM18 13.3281C17.2604 13.3281 16.6302 13.5885 16.1094 14.1094C15.5885 14.6302 15.3281 15.2604 15.3281 16C15.3281 16.7396 15.5885 17.3698 16.1094 17.8906C16.6302 18.4115 17.2604 18.6719 18 18.6719C18.7396 18.6719 19.3698 18.4115 19.8906 17.8906C20.4115 17.3698 20.6719 16.7396 20.6719 16C20.6719 15.2604 20.4115 14.6302 19.8906 14.1094C19.3698 13.5885 18.7396 13.3281 18 13.3281ZM18 17.3281C17.6354 17.3281 17.3229 17.1979 17.0625 16.9375C16.8021 16.6771 16.6719 16.3646 16.6719 16C16.6719 15.6354 16.8021 15.3229 17.0625 15.0625C17.3229 14.8021 17.6354 14.6719 18 14.6719C18.3646 14.6719 18.6771 14.8021 18.9375 15.0625C19.1979 15.3229 19.3281 15.6354 19.3281 16C19.3281 16.3646 19.1979 16.6771 18.9375 16.9375C18.6771 17.1979 18.3646 17.3281 18 17.3281Z" fill="white"/>
</svg>
`;

// export json
const light = [
    {
        featureType: 'water',
        elementType: 'geometry',
        stylers: [
            {
                color: '#e9e9e9',
            },
            {
                lightness: 17,
            },
        ],
    },
    {
        featureType: 'landscape',
        elementType: 'geometry',
        stylers: [
            {
                color: '#f5f5f5',
            },
            {
                lightness: 20,
            },
        ],
    },
    {
        featureType: 'road.highway',
        elementType: 'geometry.fill',
        stylers: [
            {
                color: '#ffffff',
            },
            {
                lightness: 17,
            },
        ],
    },
    {
        featureType: 'road.highway',
        elementType: 'geometry.stroke',
        stylers: [
            {
                color: '#ffffff',
            },
            {
                lightness: 29,
            },
            {
                weight: 0.2,
            },
        ],
    },
    {
        featureType: 'road.arterial',
        elementType: 'geometry',
        stylers: [
            {
                color: '#ffffff',
            },
            {
                lightness: 18,
            },
        ],
    },
    {
        featureType: 'road.local',
        elementType: 'geometry',
        stylers: [
            {
                color: '#ffffff',
            },
            {
                lightness: 16,
            },
        ],
    },
    {
        featureType: 'poi',
        elementType: 'geometry',
        stylers: [
            {
                color: '#f5f5f5',
            },
            {
                lightness: 21,
            },
        ],
    },
    {
        featureType: 'poi.park',
        elementType: 'geometry',
        stylers: [
            {
                color: '#dedede',
            },
            {
                lightness: 21,
            },
        ],
    },
    {
        elementType: 'labels.text.stroke',
        stylers: [
            {
                visibility: 'on',
            },
            {
                color: '#ffffff',
            },
            {
                lightness: 16,
            },
        ],
    },
    {
        elementType: 'labels.text.fill',
        stylers: [
            {
                saturation: 36,
            },
            {
                color: '#333333',
            },
            {
                lightness: 40,
            },
        ],
    },
    {
        elementType: 'labels.icon',
        stylers: [
            {
                visibility: 'off',
            },
        ],
    },
    {
        featureType: 'transit',
        elementType: 'geometry',
        stylers: [
            {
                color: '#f2f2f2',
            },
            {
                lightness: 19,
            },
        ],
    },
    {
        featureType: 'administrative',
        elementType: 'geometry.fill',
        stylers: [
            {
                color: '#fefefe',
            },
            {
                lightness: 20,
            },
        ],
    },
    {
        featureType: 'administrative',
        elementType: 'geometry.stroke',
        stylers: [
            {
                color: '#fefefe',
            },
            {
                lightness: 17,
            },
            {
                weight: 1.2,
            },
        ],
    },
];
const dark = [
    {
        elementType: 'geometry',
        stylers: [
            {
                color: '#242f3e',
            },
        ],
    },
    {
        elementType: 'labels.text.fill',
        stylers: [
            {
                color: '#746855',
            },
        ],
    },
    {
        elementType: 'labels.text.stroke',
        stylers: [
            {
                color: '#242f3e',
            },
        ],
    },
    {
        featureType: 'administrative.locality',
        elementType: 'labels.text.fill',
        stylers: [
            {
                color: '#d59563',
            },
        ],
    },
    {
        featureType: 'poi',
        elementType: 'labels.text.fill',
        stylers: [
            {
                color: '#d59563',
            },
        ],
    },
    {
        featureType: 'poi.park',
        elementType: 'geometry',
        stylers: [
            {
                color: '#263c3f',
            },
        ],
    },
    {
        featureType: 'poi.park',
        elementType: 'labels.text.fill',
        stylers: [
            {
                color: '#6b9a76',
            },
        ],
    },
    {
        featureType: 'road',
        elementType: 'geometry',
        stylers: [
            {
                color: '#38414e',
            },
        ],
    },
    {
        featureType: 'road',
        elementType: 'geometry.stroke',
        stylers: [
            {
                color: '#212a37',
            },
        ],
    },
    {
        featureType: 'road',
        elementType: 'labels.text.fill',
        stylers: [
            {
                color: '#9ca5b3',
            },
        ],
    },
    {
        featureType: 'road.highway',
        elementType: 'geometry',
        stylers: [
            {
                color: '#746855',
            },
        ],
    },
    {
        featureType: 'road.highway',
        elementType: 'geometry.stroke',
        stylers: [
            {
                color: '#1f2835',
            },
        ],
    },
    {
        featureType: 'road.highway',
        elementType: 'labels.text.fill',
        stylers: [
            {
                color: '#f3d19c',
            },
        ],
    },
    {
        featureType: 'transit',
        elementType: 'geometry',
        stylers: [
            {
                color: '#2f3948',
            },
        ],
    },
    {
        featureType: 'transit.station',
        elementType: 'labels.text.fill',
        stylers: [
            {
                color: '#d59563',
            },
        ],
    },
    {
        featureType: 'water',
        elementType: 'geometry',
        stylers: [
            {
                color: '#17263c',
            },
        ],
    },
    {
        featureType: 'water',
        elementType: 'labels.text.fill',
        stylers: [
            {
                color: '#515c6d',
            },
        ],
    },
    {
        featureType: 'water',
        elementType: 'labels.text.stroke',
        stylers: [
            {
                color: '#17263c',
            },
        ],
    },
];
var styles = {
    light,
    dark,
};

class Loader {
    constructor(apiKey = null, options = {}) {
        this.apiKey = apiKey;
        this.options = options;
        if (typeof window === 'undefined') {
            throw new Error('google-maps is supported only in browser environment');
        }
    }
    load() {
        if (typeof this.api !== 'undefined') {
            return Promise.resolve(this.api);
        }
        if (typeof this.loader !== 'undefined') {
            return this.loader;
        }
        window[Loader.CALLBACK_NAME] = () => {
            this.api = window['google'];
            if (typeof this.resolve === 'undefined') {
                throw new Error('Should not happen');
            }
            this.resolve(this.api);
        };
        window['gm_authFailure'] = () => {
            if (typeof this.reject === 'undefined') {
                throw new Error('Should not happen');
            }
            this.reject(new Error('google-maps: authentication error'));
        };
        return this.loader = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
            const script = document.createElement('script');
            script.src = this.createUrl();
            script.async = true;
            script.onerror = (e) => reject(e);
            document.head.appendChild(script);
        });
    }
    createUrl() {
        const parameters = [
            `callback=${Loader.CALLBACK_NAME}`,
        ];
        if (this.apiKey) {
            parameters.push(`key=${this.apiKey}`);
        }
        for (let name in this.options) {
            if (this.options.hasOwnProperty(name)) {
                let value = this.options[name];
                if (name === 'version') {
                    name = 'v';
                }
                if (name === 'libraries') {
                    value = value.join(',');
                }
                parameters.push(`${name}=${value}`);
            }
        }
        return `https://maps.googleapis.com/maps/api/js?${parameters.join('&')}`;
    }
}
Loader.CALLBACK_NAME = '_dk_google_maps_loader_cb';

const sallaMapCss = "";

const SallaMap = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.selected = createEvent(this, "selected");
        this.mapClicked = createEvent(this, "mapClicked");
        this.currentLocationChanged = createEvent(this, "currentLocationChanged");
        this.invalidInput = createEvent(this, "invalidInput");
        this.defaultLat = 21.419421; //Mecca üïã
        this.defaultLng = 39.82553; //Mecca üïã
        // state variables
        this.modalActivityTitle = salla.lang.get('pages.checkout.select_your_address_from_map');
        this.confirmButtonTitle = salla.lang.get('pages.checkout.confirm_address');
        this.locateButtonTitle = salla.lang.get('pages.cart.detect_location');
        this.locateButtonEdit = salla.lang.get('common.elements.edit');
        this.searchPlaceholder = salla.lang.get('pages.checkout.search_for_address');
        this.searchInputValue = null;
        this.formattedAddress = '';
        this.geolocationError = false;
        /**
         * File input name for the native formData
         */
        this.name = 'location';
        /**
         * Set if the location input is required or not
         */
        this.required = false;
        /**
         * Disable or enable actions
         */
        this.readonly = false;
        /**
         * Sets the search bar visibility.
         */
        this.searchable = false;
        /**
         * Sets start map zoom.
         */
        this.zoom = 10;
        /**
         * Sets map style.
         */
        this.theme = 'light';
        salla.lang.onLoaded(() => {
            this.modalActivityTitle = salla.lang.get('pages.checkout.select_your_address_from_map');
            this.confirmButtonTitle = salla.lang.get('pages.checkout.confirm_address');
            this.locateButtonTitle = salla.lang.get('pages.cart.detect_location');
            this.locateButtonEdit = salla.lang.get('common.elements.edit');
            this.searchPlaceholder = salla.lang.get('pages.checkout.search_for_address');
        });
        salla.onReady(() => {
            this.apiKey = salla.config.get('store.settings.keys.maps', 'AIzaSyBFgFISAizDP3YVWj0y5rF8JKKNQ2vohdc');
        });
    }
    formatAddress(address) {
        return address.length > 25 ? address.substring(0, 25) + '...' : address;
    }
    getLatLng() {
        return this.selectedLat && this.selectedLng ? `${this.selectedLat}, ${this.selectedLng}` : null;
    }
    getPositionAddress(location, submit = false) {
        // get address and set it to search input
        const Geocoder = new google.maps.Geocoder();
        Geocoder.geocode({
            location,
        }, (results, status) => {
            if (status === google.maps.GeocoderStatus.OK) {
                if (this.searchable) {
                    this.searchInputValue = results[0].formatted_address;
                    this.searchInput.value = results[0].formatted_address;
                }
                if (submit) {
                    this.formattedAddress = results[0].formatted_address;
                }
            }
        });
    }
    initGoogleMaps(options, mapDOM) {
        const loader = new Loader(this.apiKey, options);
        loader.load().then(google => {
            this.map = new google.maps.Map(mapDOM, {
                center: (this.lat || this.lng) ? {
                    lat: this.lat,
                    lng: this.lng,
                } : {
                    lat: this.defaultLat,
                    lng: this.defaultLng,
                },
                zoom: this.zoom,
                zoomControl: true,
                mapTypeControl: false,
                scaleControl: false,
                streetViewControl: false,
                rotateControl: false,
                fullscreenControl: false,
                disableDefaultUI: false,
            });
            this.map.setOptions({
                styles: this.theme === 'light' ? styles.light : styles.dark,
            });
            this.marker = new google.maps.Marker({
                position: this.map.getCenter(),
                map: this.map,
                icon: {
                    url: 'data:image/svg+xml;utf8,' + encodeURIComponent(LocationMarker),
                    scaledSize: new google.maps.Size(30, 30),
                },
            });
            if (this.searchable) {
                const searchBox = new google.maps.places.SearchBox(this.searchInput);
                google.maps.event.addListener(searchBox, 'places_changed', () => {
                    const places = searchBox.getPlaces();
                    // goto first place
                    if (places.length > 0 && this.map) {
                        this.map.setCenter(places[0].geometry.location);
                        this.lat = places[0].geometry.location.lat();
                        this.lng = places[0].geometry.location.lng();
                        // set marker
                        this.marker.setPosition(places[0].geometry.location);
                        this.searchInputValue = places[0].formatted_address;
                        this.formattedAddress = places[0].formatted_address;
                    }
                });
            }
            // add listener to map
            google.maps.event.addListener(this.map, 'click', e => {
                if (this.readonly)
                    return;
                this.marker.setPosition(e.latLng);
                this.lat = e.latLng.lat();
                this.lng = e.latLng.lng();
                this.getPositionAddress(e.latLng);
                this.mapClicked.emit({
                    lat: e.latLng.lat(),
                    lng: e.latLng.lng(),
                    address: this.formattedAddress ? this.formattedAddress : null,
                });
            });
            if (!this.lat && !this.lng) {
                this.getCurrentLocation();
                if (this.geolocationError) {
                    this.map.setCenter({
                        lat: this.lat,
                        lng: this.lng,
                    });
                    this.marker.setPosition({
                        lat: this.lat,
                        lng: this.lng,
                    });
                }
            }
        });
    }
    getCurrentLocation() {
        if (navigator.geolocation && this.map) {
            navigator.geolocation.getCurrentPosition(position => {
                // set map to this location
                const mapOptions = {
                    center: new google.maps.LatLng(position.coords.latitude, position.coords.longitude),
                    zoom: 15,
                };
                this.map.setOptions(mapOptions);
                // set marker
                this.marker.setPosition(mapOptions.center);
                this.getPositionAddress(mapOptions.center);
                this.lat = position.coords.latitude;
                this.lng = position.coords.longitude;
                this.currentLocationChanged.emit({
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                    address: this.formattedAddress ? this.formattedAddress : null,
                });
            }, this.handleLocationError.bind(this));
        }
        else {
            salla.log('Geolocation is not supported by this browser.');
            this.geolocationError = true;
        }
    }
    handleLocationError(error) {
        this.geolocationError = true;
        switch (error.code) {
            case error.PERMISSION_DENIED:
                salla.log('User denied the request for Geolocation.');
                break;
            case error.POSITION_UNAVAILABLE:
                salla.log('Location information is unavailable.');
                break;
            case error.TIMEOUT:
                salla.log('The request to get user location timed out.');
                break;
            case error.UNKNOWN_ERROR:
                salla.log('An unknown error occurred.');
                break;
        }
    }
    componentDidLoad() {
        // if lat and lng provided then get the formatted address
        if (this.lat && this.lng) {
            // get address
            fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${this.lat},${this.lng}&key=${this.apiKey}&language=${salla.config.get('user.language_code') ||
                document.documentElement.lang ||
                'ar'}`)
                .then(res => res.json())
                .then(res => {
                if (res.status === 'OK') {
                    this.formattedAddress = res.results[0].formatted_address;
                    this.searchInputValue = res.results[0].formatted_address;
                    this.searchInput.value = res.results[0].formatted_address;
                    this.selectedLng = this.lng;
                    this.selectedLat = this.lat;
                }
            });
        }
        this.mapInput.addEventListener('invalid', e => {
            this.invalidInput.emit(e);
        });
        this.mapInput.addEventListener('input', () => {
            this.mapInput.setCustomValidity('');
            this.mapInput.reportValidity();
        });
    }
    /**
     * Open location component
     */
    async open() {
        // only init google maps on modal open :) to save resources
        if (!this.map)
            this.initGoogleMaps({
                libraries: this.searchable ? ['places', 'search'] : [],
                language: salla.config.get('user.language_code') ||
                    document.documentElement.lang ||
                    'ar',
            }, this.mapElement);
        return await this.locationModal.open();
    }
    // rendering functions
    getLocationModal() {
        return (h("div", null, h("div", { class: "s-map-modal-title" }, !!this.modalTitle ? this.modalTitle : this.modalActivityTitle), h("div", { class: "s-map-modal-body" }, h("div", { class: "s-map-element", ref: el => (this.mapElement = el) }), this.readonly ? "" :
            [
                this.searchable && (h("div", { class: "s-map-search-wrapper" }, h("input", { class: "s-map-search-input", ref: el => (this.searchInput = el), placeholder: this.searchPlaceholder }))),
                h("salla-button", { class: "s-map-my-location-button", onClick: () => {
                        this.getCurrentLocation();
                    }, shape: "icon", color: "primary" }, h("span", { innerHTML: CurrentLocation })),
                h("salla-button", { class: "s-map-submit-button", color: "primary", width: "wide", onClick: () => {
                        let points = {
                            lat: this.lat,
                            lng: this.lng,
                            address: this.formattedAddress ? this.formattedAddress : null,
                        };
                        salla.event.emit('salla-map::selected', points);
                        this.selected.emit(points);
                        this.selectedLat = points.lat;
                        this.selectedLng = points.lng;
                        this.getPositionAddress(new google.maps.LatLng(points.lat, points.lng), true);
                        if (!this.selectedLat || !this.selectedLng) {
                            this.mapInput.value = null;
                        }
                        else {
                            this.mapInput.value = `${this.selectedLat}, ${this.selectedLng}`;
                        }
                        this.mapInput.dispatchEvent(new window.Event('change', { bubbles: true }));
                        this.locationModal.close();
                    } }, this.confirmButtonTitle)
            ])));
    }
    // render
    render() {
        return (h(Host, { key: 'afb065dd5c9db0994f1cfaf1562db28425ffd65a', class: "s-map-wrapper" }, h("salla-modal", { key: 'adbf3aec5fe3a53c08a4310dfa5fc3593f88b242', class: "s-map-modal-wrapper", noPadding: true, ref: modal => {
                this.locationModal = modal;
            } }, this.getLocationModal()), h("slot", { key: '8469c362605c896c27e6c9453c80e1455e681588', name: "button" }, h("salla-button", { key: 'baac0f4417a36ce4f6c8f02a6667752f5d93ebd1', onClick: () => {
                this.open();
            }, color: "primary", class: "s-map-location-button" }, h("span", { key: 'bea891a7ac14bcb50704133e9c1eb8b3c34a8377', class: "s-map-location-icon", innerHTML: this.formattedAddress ? Edit : Location }), this.formattedAddress ? (h("div", null, this.locateButtonEdit, " | ", this.formatAddress(this.formattedAddress))) : (this.locateButtonTitle))), h("input", { key: 'dbc5226461f9ad7a9501bec12e8bad794dec00e6', class: "s-hidden", name: this.name, required: this.required, value: this.getLatLng(), ref: color => this.mapInput = color })));
    }
    get host() { return getElement(this); }
};
SallaMap.style = sallaMapCss;

const sallaMenuCss = ":host{display:block}";

const SallaMenu = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * The source of the menu, specifying whether it is a header or footer menu.
         */
        this.source = "header";
        /**
         * Boolean indicating whether to use React Link elements for menu links.
         */
        this.useReactLink = false;
        this.menus = [];
    }
    async componentWillLoad() {
        return salla.onReady(() => {
            this.displayAllText = salla.lang.get('blocks.home.display_all');
            if (this.sourceValue && this.source === 'json') {
                this.menus = typeof this.sourceValue === 'string' ? JSON.parse(this.sourceValue) : this.sourceValue || [];
            }
            else {
                return this.getMenuItems();
            }
        });
    }
    getMenuItems() {
        /**
          * Avoid saving the menu to localStorage (default) when in the development environment
          * or when modifying the theme in the dashboard
          */
        // const isPreview = salla.config.isDebug() || salla.helpers.isPreview()
        // const cacheKey = `${this.source}_menus_${salla.lang.locale}`
        // const cachedMenus = salla.storage.getWithTTL(cacheKey, [])
        // if (cachedMenus.length > 0 && !isPreview) {
        //   this.menus = cachedMenus
        //   return;
        // }
        return salla.api.component.getMenus(this.source).then(({ data }) => {
            this.menus = data;
            // !isPreview && salla.storage.setWithTTL(cacheKey, this.menus)
        }).catch((error) => {
            salla.logger.error('salla-menu::Error fetching menus', error);
        });
    }
    hasChildren(menu) {
        return menu?.children?.length > 0;
    }
    hasProducts(menu) {
        return menu?.products?.length > 0;
    }
    /**
    * Get the classes for desktop menu
    * @param {Object} menu
    * @param {Boolean} isRootMenu
    * @returns {String}
    */
    getDesktopClasses(menu, isRootMenu) {
        return `!hidden lg:!block ${isRootMenu ? 'root-level lg:!inline-block' : 'relative'} ${menu.products ? ' mega-menu' : ''}
    ${this.hasChildren(menu) ? 'has-children' : ''}`;
    }
    getAttributes(attrs) {
        return attrs.trim().split(' ').reduce((result, attr) => {
            let [key, value] = attr.split('=');
            result[key] = value.replace(/"/g, '');
            return result;
        }, {});
    }
    /**
       * Get the mobile menu
       * @param {Object} menu
       * @param {String} displayAllText
       * @returns {String}
       */
    getMobileMenu(menu, displayAllText) {
        const menuImage = menu.image ? h("img", { src: menu.image, class: "rounded-full", width: "48", height: "48", alt: menu.title }) : null;
        return (h("li", { class: "lg:hidden text-sm font-bold", ...this.getAttributes(menu.attrs) }, !this.hasChildren(menu) ?
            h("a", { href: menu.url, "aria-label": menu.title || 'category', class: `text-gray-500 ${menu.image ? '!py-3' : ''}`, ...this.getAttributes(menu.link_attrs) }, menuImage, h("span", null, menu.title || ''))
            :
                h(Fragment, null, h("span", { class: menu.image ? '!py-3' : '' }, menuImage, menu.title), h("ul", null, h("li", { class: "text-sm font-bold" }, h("a", { href: menu.url, class: "text-gray-500" }, displayAllText)), menu.children.map((subMenu) => this.getMobileMenu(subMenu, displayAllText))))));
    }
    /**
       * Get the desktop menu
       * @param {Object} menu
       * @param {Boolean} isRootMenu
       * @returns {String}
       */
    getDesktopMenu(menu, isRootMenu) {
        return h("li", { class: this.getDesktopClasses(menu, isRootMenu), ...this.getAttributes(menu.attrs) }, h("a", { href: menu.url, "aria-label": menu.title || 'category', ...this.getAttributes(menu.link_attrs) }, h("span", null, menu.title)), this.hasChildren(menu) ?
            h("div", { class: `sub-menu shadow-default ${this.hasProducts(menu) ? 'w-full left-0 flex' : 'w-56'}` }, h("ul", { class: this.hasProducts(menu) ? 'w-56 shrink-0 m-8 rtl:ml-0 ltr:mr-0' : '' }, menu.children.map((subMenu) => this.getDesktopMenu(subMenu, false))), this.hasProducts(menu) ?
                h("salla-products-list", { source: "selected", "shadow-on-hover": true, "source-value": `[${menu.products}]` }) : null) : null);
    }
    /**
       * Get the footer menu
       * @param {Array} menus
       */
    getFooterMenu(menus) {
        const Menuitems = (this.topnav || this.limit) ? menus.slice(0, this.limit || 3) : menus;
        return h("div", null, h("div", { class: {
                "s-menu-footer-list": !this.topnav,
                "s-menu-topnav-list": this.topnav
            } }, Menuitems.map((menu) => {
            return h("a", { key: menu.id, href: menu.url, target: menu.target, class: {
                    "s-menu-footer-item": !this.topnav,
                    "s-menu-topnav-item topnav-link-item right-side": this.topnav
                } }, menu.title);
        })));
    }
    /**
  * Get the menus
  * @param {Array} menus
  * @returns {String}
  */
    getHeaderMenu(menus) {
        return menus.map((menu) => [
            this.getMobileMenu(menu, this.displayAllText),
            this.getDesktopMenu(menu, true)
        ]);
    }
    render() {
        return this.source === "footer" ?
            this.getFooterMenu(this.menus)
            :
                [
                    h("nav", { key: "main-nav", id: "mobile-menu", class: "mobile-menu" }, h("ul", { class: "main-menu" }, this.getHeaderMenu(this.menus)), h("button", { class: "btn--close close-mobile-menu sicon-cancel lg:hidden" })),
                    h("button", { key: "close-btn", class: "btn--close-sm close-mobile-menu sicon-cancel hidden" })
                ];
    }
};
SallaMenu.style = sallaMenuCss;

const sallaModalCss = "@media screen and (max-width: 470px){.modal-is-open{position:fixed;width:100%}}";

const SallaModal = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.modalVisibilityChanged = createEvent(this, "modalVisibilityChanged");
        /**
         * Sets the modal to be closable. Defaults to `true`
         */
        this.isClosable = true; //todo::rename unclude. Suggestion => persistent
        /**
         * The size of the modal
         */
        this.width = 'md';
        /**
         * The position of the modal
         */
        this.position = 'middle';
        /**
         * open the modal on rendering
         */
        this.visible = false;
        /**
         * open the modal on rendering
         */
        this.hasSkeleton = false;
        /**
         * Show loading in the middle
         */
        this.isLoading = false;
        /**
         * Show subtitle before the title or not, defaults to `false` (after the title)
         */
        this.subTitleFirst = false; //todo:: choose better name
        /**
         * Avoid padding in the modal body or not, defaults to `false`
         */
        this.noPadding = false; //todo:: choose better name
        /**
         * Set modal sub title.
         */
        this.subTitle = '';
        /**
         * Align modal content to center, defaults to `false`
         */
        this.centered = false;
        /**
         * Set the style of the header icon.
         */
        this.iconStyle = undefined;
        salla.event.on('modal::open', target => target == this.host.id && this.open());
        salla.event.on('modal::close', target => target == this.host.id && this.close());
        this.modalTitle = this.host.getAttribute('modal-title');
    }
    handleVisible(newValue) {
        if (!newValue) {
            this.modalVisibilityChanged.emit(false);
            this.toggleModal(false);
            return;
        }
        this.modalVisibilityChanged.emit(true);
        this.host.classList.remove('s-hidden');
        setTimeout(() => this.toggleModal(true)); //small amont of time to running toggle After adding hidden
    }
    handleKeyUp(ev) {
        if (ev.key === "KeyUp") {
            this.closeModal();
        }
    }
    /**
     * Open the modal
     */
    async open() {
        this.host.setAttribute('visible', '');
        this.handleAutoFocus();
        return this.host;
    }
    /**
     * close the modal
     */
    async close() {
        this.host.removeAttribute('visible');
        return this.host;
    }
    /**
     * Change the Modal Title
     * @param {string} modalTitle
     */
    async setTitle(modalTitle) {
        this.modalTitle = modalTitle;
        return this.host;
    }
    /**
     * Start loading
     */
    async loading() {
        this.isLoading = true;
        return this.host;
    }
    /**
     * Stop the loading
     */
    async stopLoading() {
        this.isLoading = false;
        return this.host;
    }
    handleAutoFocus() {
        const firstFocusableElement = this.host.querySelector('input, textarea, select');
        if (!firstFocusableElement) {
            return;
        }
        setTimeout(() => {
            firstFocusableElement.focus();
        }, 100);
    }
    toggleModal(isOpen) {
        const body = this.host.querySelector('.s-modal-body');
        Helper.toggleElementClassIf(body, 's-modal-entering', 's-modal-leaving', () => isOpen)
            .toggleElementClassIf(this.overlay, 's-modal-entering', 's-modal-overlay-leaving', () => isOpen)
            .toggleElementClassIf(document.body, 'modal-is-open', 'modal-is-closed', () => isOpen);
        if (!isOpen) {
            setTimeout(() => this.host.classList.add('s-hidden'), 350);
        }
    }
    closeModal(reason) {
        if (!this.isClosable) {
            return;
        }
        salla.event.dispatch('modal::close', { reason });
        this.host.removeAttribute('visible');
    }
    iconBlockClasses() {
        return {
            's-modal-icon': true,
            's-modal-bg-error': this.iconStyle == 'error',
            's-modal-bg-success': this.iconStyle == 'success',
            's-modal-bg-normal': !this.iconStyle,
            's-modal-bg-primary': this.iconStyle == 'primary'
        };
    }
    getWidth() {
        return this.isLoading ? (this.hasSkeleton ? 'md' : 'xs') : this.width;
    }
    //todo:: pref for each modal
    render() {
        this.host.id = this.host.id || 'salla-modal';
        if (this.isLoading) {
            return (h(Host, { class: 'salla-modal s-modal s-modal-container s-hidden', "aria-modal": "true", role: "dialog", onKeyUp: e => this.handleKeyUp(e) }, h("div", { class: "s-modal-overlay", ref: el => this.overlay = el, onClick: () => this.closeModal("backdropClick") }), h("div", { class: "s-modal-wrapper" }, h("span", { class: 's-modal-spacer s-modal-align-' + this.position }, "\u200B"), h("div", { class: 's-modal-body ' + 's-modal-align-' + this.position + ' s-modal-' + this.getWidth() + (this.noPadding ? ' s-modal-nopadding' : ' s-modal-padding') }, h("slot", { name: "loading" }, h("salla-loading", null)), h("div", { class: "s-hidden" }, h("slot", null))))));
        }
        return (h(Host, { class: 'salla-modal s-modal s-modal-container s-hidden', "aria-modal": "true", role: "dialog" }, h("div", { class: "s-modal-overlay", ref: el => this.overlay = el, onClick: () => this.closeModal("backdropClick") }), h("div", { class: "s-modal-wrapper" }, h("span", { class: 's-modal-spacer s-modal-align-' + this.position }, "\u200B"), h("div", { class: 's-modal-body ' + 's-modal-align-' + this.position + ' s-modal-' + this.getWidth() + (this.noPadding ? ' s-modal-nopadding' : ' s-modal-padding') }, h("div", { class: { 's-modal-header': true, 's-modal-is-center': this.centered } }, this.isClosable ?
            h("button", { class: "s-modal-close", onClick: () => this.closeModal("closeButtonClick"), type: "button" }, h("span", { innerHTML: Cancel }))
            : '', this.modalTitle || this.subTitle ?
            h("div", { class: "s-modal-header-inner" }, h("slot", { name: 'icon' }, !!this.iconStyle ?
                h("div", { class: this.iconBlockClasses(), innerHTML: this.iconStyle == 'error' ? AlertEngineIcon : CheckCircle2 })
                : ''), h("div", { class: "s-modal-header-content" }, this.modalTitle ? h("div", { class: { 's-modal-title': true, 's-modal-title-below': this.subTitleFirst }, innerHTML: this.modalTitle }) : '', this.subTitle ? h("p", { class: { 's-modal-sub-title': true }, innerHTML: this.subTitle }) : ''))
            : ''), h("slot", null), h("slot", { name: "footer" })))));
    }
    //move the modal as root dom, because we need the model to be outside the forms
    componentDidLoad() {
        document.body.append(this.host);
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "visible": ["handleVisible"]
    }; }
};
SallaModal.style = sallaModalCss;

const sallaMultipleBundleProductCss = ":host{display:block}";

const SallaMultipleBundleProduct = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.parsedSections = [];
    }
    parseProducts(newValue) {
        let sections = [];
        if (typeof newValue === 'string') {
            try {
                const parsed = JSON.parse(newValue);
                sections = this.extractSections(parsed);
            }
            catch (e) {
                console.error('Invalid JSON passed to bundleSections prop:', newValue);
                sections = [];
            }
        }
        else if (newValue) {
            sections = this.extractSections(newValue);
        }
        this.parsedSections = sections;
    }
    extractSections(data) {
        // Handle new nested structure: data.bundle.sections
        if (data.bundle && data.bundle.sections && Array.isArray(data.bundle.sections)) {
            return data.bundle.sections;
        }
        // Handle old flat structure: data is directly an array of sections
        if (Array.isArray(data)) {
            return data;
        }
        // Handle case where data.sections exists at root level
        if (data.sections && Array.isArray(data.sections)) {
            return data.sections;
        }
        console.warn('No valid sections found in data:', data);
        return [];
    }
    isCartPage() {
        return salla.url.is_page('cart');
    }
    renderCartPage() {
        return h("salla-multiple-bundle-product-cart", { sections: this.parsedSections });
    }
    renderDetailsPage() {
        return h("salla-multiple-bundle-product-details", { sections: this.parsedSections });
    }
    componentWillLoad() {
        this.parseProducts(this.bundleSections);
    }
    render() {
        return (h(Host, { key: '6f9e20c6db0c7d79f84ba197f015f43c1b0a79fc', class: "s-multiple-bundle-product-wrapper" }, this.isCartPage() ? this.renderCartPage() : this.renderDetailsPage()));
    }
    static get watchers() { return {
        "bundleSections": ["parseProducts"]
    }; }
};
SallaMultipleBundleProduct.style = sallaMultipleBundleProductCss;

const sallaMultipleBundleProductCartCss = "";

const SallaMultipleBundleProductCart = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.sections = [];
        this.itemNumber = '';
    }
    deleteItem(sectionId, product) {
        const form = this.host.closest('form');
        if (form) {
            const formId = form.getAttribute('id');
            if (formId && typeof formId === 'string') {
                const itemNumber = formId.match(/item-(\d+)/)?.[1];
                this.itemNumber = itemNumber || '';
                const selectedAccordion = this.host.querySelector(`#accordion-${product.id}`);
                salla.cart
                    .deleteItem(`${this.itemNumber}?product_id=${product.id}&section_id=${sectionId}`)
                    .then(() => selectedAccordion?.remove());
            }
        }
    }
    renderRemoveButton(sectionId, product, isText = false) {
        return (h("salla-button", { type: "button", shape: isText ? 'btn' : 'icon', fill: isText ? 'outline' : 'solid', size: "small", color: "danger", "aria-label": "Remove from the cart", onClick: () => this.deleteItem(sectionId, product) }, isText ? salla.lang.get('common.elements.delete') : h("i", { class: "sicon-cancel" })));
    }
    renderAccordionHeader(sectionId, product) {
        const hasOptions = product?.options && product?.options?.length > 0; // undefined or empty array
        return (h("div", { slot: "html", class: "s-multiple-bundle-product-cart-header-wrapper" }, h("div", { class: `s-multiple-bundle-product-cart-header ${hasOptions ? '' : 's-multiple-bundle-product-cart-header-no-options'}` }, h("div", { class: "s-multiple-bundle-product-cart-header-content" }, h("a", { href: product?.url, class: "s-multiple-bundle-product-cart-header-image-wrapper" }, h("img", { src: product?.image?.url, alt: product?.image?.alt || product?.name, class: "s-multiple-bundle-product-cart-header-image" })), h("div", { class: "s-multiple-bundle-product-cart-header-content-details" }, h("h2", { class: "s-multiple-bundle-product-cart-header-content-details-title" }, h("a", { href: product?.url, class: "s-multiple-bundle-product-cart-header-content-details-title-link" }, product?.name)), h("div", { class: "s-multiple-bundle-product-cart-header-content-details-price" }, h("span", { class: "s-multiple-bundle-product-cart-header-content-details-price-regular" }, h("span", { innerHTML: product?.price ? salla.money(product?.price) : '' })), product?.sale_price > 0 && (h("span", { class: "s-multiple-bundle-product-cart-header-content-details-price-sale" }, h("span", { innerHTML: salla.money(product?.sale_price) })))), product?.quantity_in_group > 0 && product?.quantity !== 0 && (h("p", { class: "s-multiple-bundle-product-cart-header-content-details-quantity" }, h("span", null, salla.lang.get('pages.products.number_of_pieces')), h("span", null, product?.quantity_in_group))))), !hasOptions && (h("div", { class: "s-multiple-bundle-product-cart-header-remove-button" }, this.renderRemoveButton(sectionId, product, false))))));
    }
    render() {
        return (h(Host, { key: 'b9542b8e0cc7705e6bbd9dc17db8284c11d27846', class: "s-multiple-bundle-product-wrapper" }, h("div", { key: '44bfe630604e8d45aa1218eebcdf026b47f9fd99', class: "s-multiple-bundle-product-wrapper-sections" }, this.sections.map((section, sectionIndex) => {
            return section.products.map(product => {
                const bundleContext = {
                    sectionId: section.id,
                    sectionIndex: sectionIndex,
                    productId: product.id,
                };
                return (h("salla-accordion", { key: product.id, collapsed: false, bordered: true, collapsible: product.options && product.options.length > 0 ? true : false, size: "sm", id: `accordion-${product.id}` }, h("salla-accordion-head", null, this.renderAccordionHeader(String(section.id), product)), product.options && product.options.length > 0 && (h("salla-accordion-body", null, h("salla-product-options", { options: JSON.stringify(product.options), key: `${product.id}-persistent`, "product-id": product.id, "bundle-context": JSON.stringify(bundleContext) }), h("div", { class: "s-multiple-bundle-product-cart-body-remove-button" }, this.renderRemoveButton(String(section.id), product, true))))));
            });
        }))));
    }
    get host() { return getElement(this); }
};
SallaMultipleBundleProductCart.style = sallaMultipleBundleProductCartCss;

const sallaMultipleBundleProductDetailsCss = "";

const SallaMultipleBundleProductDetails = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.sections = [];
        // store selected product IDs per section (can be string or number)
        this.selectedProducts = {};
        // Event handler reference for cleanup
        this.productSelectedHandler = null;
        // handle selecting a product (toggle)
        this.onSelectProduct = (sectionId, product) => {
            this.selectedProducts = {
                ...this.selectedProducts,
                [sectionId]: new Set(this.selectedProducts[sectionId] || []),
            };
            const productId = product.id;
            const wasSelected = this.selectedProducts[sectionId].has(productId);
            if (wasSelected) {
                // Product is being deselected
                this.selectedProducts[sectionId].delete(productId);
                // Clear form data and modal options for this product in this specific section
                this.clearProductFormData(productId, sectionId);
                this.clearProductModalOptions(productId);
            }
            else {
                // Product is being selected
                this.selectedProducts[sectionId].add(productId);
            }
            // force re-render
            this.selectedProducts = { ...this.selectedProducts };
            // still dispatch event
            salla.event.dispatch('on-bundle-product-selected', {
                id: product.id,
                name: product.name,
                options: product.options,
                wasSelected: wasSelected,
                isSelected: !wasSelected,
            });
        };
        // ensure product is selected (only add if not already selected)
        this.ensureProductSelected = (sectionId, product) => {
            this.selectedProducts = {
                ...this.selectedProducts,
                [sectionId]: new Set(this.selectedProducts[sectionId] || []),
            };
            const productId = product.id;
            // Only add if not already selected
            if (!this.selectedProducts[sectionId].has(productId)) {
                this.selectedProducts[sectionId].add(productId);
                // force re-render
                this.selectedProducts = { ...this.selectedProducts };
                // dispatch event
                salla.event.dispatch('on-bundle-product-selected', {
                    id: product.id,
                    name: product.name,
                    options: product.options,
                });
            }
        };
        // open product options modal
        this.onSelectProductOptions = (product, sectionId) => {
            // Find the section index from the sectionId
            const sectionIndex = this.sections.findIndex(section => section.id == sectionId);
            // Find the product index within the section
            const section = this.sections.find(section => section.id == sectionId);
            const productIndex = section?.products?.findIndex(p => p.id == product.id) ?? 0;
            salla.event.dispatch('multiple-bundle-product-modal::open', {
                product,
                sectionId,
                sectionIndex,
                productIndex,
            });
        };
        // Event handlers for bundle slider component
        this.handleBundleSliderProductSelected = (event) => {
            const { product, sectionId } = event.detail;
            this.onSelectProduct(sectionId, product);
        };
        this.handleBundleSliderProductOptionsSelected = (event) => {
            const { product, sectionId } = event.detail;
            this.onSelectProductOptions(product, sectionId);
        };
    }
    // Clear form data for a specific product in specific section
    clearProductFormData(productId, sectionId) {
        const form = this.host.closest('form');
        if (sectionId) {
            // Remove inputs for specific section/productIndex combination
            const productInputPattern = `bundle[${sectionId}][`;
            const inputsToRemove = Array.from(form.querySelectorAll('input')).filter((input) => input.getAttribute('data-product-id') === String(productId) &&
                input.name &&
                input.name.startsWith(productInputPattern));
            inputsToRemove.forEach(input => input.remove());
        }
        else {
            // Fallback: Remove all hidden inputs related to this product (legacy behavior)
            const inputsToRemove = form.querySelectorAll(`[data-product-id="${productId}"]`);
            inputsToRemove.forEach(input => input.remove());
        }
    }
    // Clear modal options state for a specific product
    clearProductModalOptions(productId) {
        // Emit event to notify modal to reset its state for this product
        salla.event.dispatch('multiple-bundle-product-modal::clear-options', {
            productId,
        });
    }
    renderAccordionHeader(section, selectedCount) {
        return (h(Fragment, null, h("h2", { slot: "title" }, section?.name), section?.obligatory_products && (h("span", { slot: "note" }, salla.lang.get('pages.products.obligatory_products', {
            count: section?.obligatory_products || 0,
        }))), h("span", { slot: "progress" }, selectedCount, "/", section?.products?.length || 0)));
    }
    componentDidLoad() {
        // Listen for product selected event from modal
        const modal = this.host.querySelector('salla-multiple-bundle-product-options-modal');
        if (modal) {
            this.productSelectedHandler = (e) => {
                const { productId, sectionId, product, fromModal } = e.detail;
                if (fromModal) {
                    // When called from modal, only add to selection if not already selected
                    this.ensureProductSelected(sectionId, product || { id: productId });
                }
                else {
                    // Normal toggle behavior
                    this.onSelectProduct(sectionId, product || { id: productId });
                }
            };
            modal.addEventListener('productSelected', this.productSelectedHandler);
        }
    }
    disconnectedCallback() {
        // Clean up event listener to prevent memory leaks
        if (this.productSelectedHandler) {
            const modal = this.host.querySelector('salla-multiple-bundle-product-options-modal');
            if (modal) {
                modal.removeEventListener('productSelected', this.productSelectedHandler);
            }
            this.productSelectedHandler = null;
        }
    }
    render() {
        return (h(Host, { key: '0a24e2c3ee4bdff3891334a49318a7cfeb668d54', class: "s-multiple-bundle-product-wrapper" }, h("div", { key: '713f1b101aed42cabacd17d662aad49520b89f4b', class: "s-multiple-bundle-product-wrapper-sections" }, this.sections.map((section, index) => {
            const selectedCount = this.selectedProducts[section.id]?.size || 0;
            return (h("salla-accordion", { key: section.id, collapsed: index === 1 ? true : false }, h("salla-accordion-head", null, this.renderAccordionHeader(section, selectedCount)), h("salla-accordion-body", null, h("salla-multiple-bundle-product-slider", { section: section, sectionIndex: index, selectedProducts: this.selectedProducts, onProductSelected: this.handleBundleSliderProductSelected, onProductOptionsSelected: this.handleBundleSliderProductOptionsSelected }))));
        })), h("salla-multiple-bundle-product-options-modal", { key: '2d889aa72a36040f87cd791363f71600d86458e7' })));
    }
    get host() { return getElement(this); }
};
SallaMultipleBundleProductDetails.style = sallaMultipleBundleProductDetailsCss;

const sallaMultipleBundleProductOptionsModalCss = ":host{display:block}";

const SallaMultipleBundleProductOptionsModal = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.optionsSaved = createEvent(this, "optionsSaved");
        this.productSelected = createEvent(this, "productSelected");
        this.product = null;
        this.sectionId = null;
        this.sectionIndex = 0;
        this.productIndex = 0;
        this.selectedOptions = {};
        this.isLoading = false;
        this.hasUnsavedChanges = false;
        this.validationErrors = [];
    }
    /**
     * Generate a unique cache key for selected options using section ID, product index, and product ID
     */
    generateCacheKey(sectionId, productIndex, productId) {
        return `${sectionId || 'unknown'}-${productIndex || 0}-${productId || 'unknown'}`;
    }
    handleProductChange(newValue) {
        // Use setTimeout to ensure modal is ready
        setTimeout(() => {
            if (this.modal && newValue) {
                const title = newValue.name || '';
                this.modal.setTitle(title);
            }
        }, 100);
        // Reset validation errors when product changes
        this.validationErrors = [];
        this.hasUnsavedChanges = false;
    }
    async open() {
        if (!this.modal) {
            requestAnimationFrame(() => this.open());
            return;
        }
        this.isLoading = true;
        // Set the title before opening
        if (this.product?.name) {
            this.modal.setTitle(this.product.name);
        }
        this.modal.open();
        // Initialize selectedOptions with current selections from the component
        setTimeout(async () => {
            if (this.product?.id) {
                await this.initializeSelectedOptions();
            }
            // Set title again after modal is fully loaded
            if (this.product?.name) {
                this.modal.setTitle(this.product.name);
            }
            this.modal.stopLoading();
            this.isLoading = false;
        }, 300);
    }
    async close() {
        if (this.modal) {
            this.modal.close();
        }
    }
    async refreshOptionsState() {
        // Force re-render by updating the component state
        this.selectedOptions = { ...this.selectedOptions };
    }
    componentDidLoad() {
        salla.event.on('multiple-bundle-product-modal::open', (data) => {
            this.product = data.product;
            this.sectionId = data.sectionId || null;
            this.sectionIndex = data.sectionIndex || 0;
            this.productIndex = data.productIndex || 0;
            this.open();
        });
        // Listen for clear-options event when a product is deselected
        salla.event.on('multiple-bundle-product-modal::clear-options', (data) => {
            this.clearProductOptions(data.productId);
        });
        // Create and store the option change listener for proper cleanup
        this.optionChangeListener = (e) => {
            const { productId, option, detail } = e.detail;
            // Convert productId to the same type as our product ID
            const normalizedProductId = this.product?.id ? String(this.product.id) : null;
            const normalizedEventProductId = productId ? String(productId) : null;
            // Only handle events for the current product
            if (normalizedProductId &&
                normalizedEventProductId &&
                normalizedProductId === normalizedEventProductId &&
                option &&
                detail) {
                this.handleOptionChange(Number(normalizedProductId), option, detail);
            }
        };
        salla.event.on('product-options::change', this.optionChangeListener);
        // Create and store the checkbox change listener for proper cleanup
        this.checkboxChangeListener = (e) => {
            const target = e.target;
            // Check if this is a product selection checkbox
            if (target && target.type === 'checkbox' && target.name && target.name.includes('bundle[') && target.name.includes('][id]')) {
                // Extract section info from the checkbox name: bundle[sectionId][productIndex][id]
                const nameMatch = target.name.match(/^bundle\[([^\]]+)\]\[([^\]]+)\]\[id\]$/);
                if (nameMatch && !target.checked) {
                    // Product was deselected, clear its cached options
                    const [, sectionId, productIndex] = nameMatch;
                    const productId = target.value;
                    // Prevent the immediate event to ensure cleanup happens first
                    e.preventDefault();
                    e.stopPropagation();
                    // Ensure the checkbox is actually unchecked
                    target.checked = false;
                    // Generate the same cache key used by the modal
                    const cacheKey = this.generateCacheKey(sectionId, parseInt(productIndex), productId);
                    // Clear the cached options for this product
                    const updatedSelectedOptions = { ...this.selectedOptions };
                    delete updatedSelectedOptions[cacheKey];
                    this.selectedOptions = updatedSelectedOptions;
                    // Force re-render of the modal if it's currently open for this product
                    if (this.product && this.product.id == productId) {
                        this.selectedOptions = { ...this.selectedOptions };
                    }
                    const form = this.host.closest('form');
                    if (form) {
                        const productInputPattern = `bundle[${sectionId}][${productIndex}]`;
                        // Get all form inputs and filter manually
                        const allInputs = Array.from(form.querySelectorAll('input'));
                        const matchingInputs = allInputs.filter(input => input.name && input.name.startsWith(productInputPattern));
                        // Process matching inputs for removal
                        matchingInputs.forEach(el => {
                            // Don't remove the visible checkbox that was just unchecked
                            if (el !== target && (el.type === 'hidden' || el.hasAttribute('data-product-id'))) {
                                el.remove();
                            }
                        });
                        // Method 2: Find inputs by data-product-id BUT only within the same section/productIndex
                        const dataProductInputs = allInputs.filter(input => {
                            // Must have data-product-id matching the productId
                            if (input.getAttribute('data-product-id') !== String(productId)) {
                                return false;
                            }
                            // Must also be within the same section/productIndex pattern
                            return input.name && input.name.startsWith(productInputPattern);
                        });
                        // Process inputs with matching section/productIndex and productId for removal
                        dataProductInputs.forEach(el => {
                            if (el !== target) {
                                el.remove();
                            }
                        });
                        // Method 3: Removed broader search to prevent removing inputs from other products
                        // The cleanup is now more precise and only removes inputs for the specific product
                        // Trigger form change event after cleanup is complete
                        setTimeout(() => {
                            const changeEvent = new window.Event('change', { bubbles: true });
                            form.dispatchEvent(changeEvent);
                        }, 50); // Small delay to ensure cleanup is complete
                    }
                }
            }
        };
        // Listen for product checkbox changes to reset options when product is deselected
        document.addEventListener('change', this.checkboxChangeListener);
    }
    disconnectedCallback() {
        // Clean up event listeners to prevent memory leaks
        if (this.checkboxChangeListener) {
            document.removeEventListener('change', this.checkboxChangeListener);
        }
    }
    generateFormInputName(sectionId, productIndex, optionParentId) {
        return `bundle[${sectionId}][${productIndex}][options][${optionParentId}]`;
    }
    async initializeSelectedOptions() {
        if (!this.product?.id)
            return;
        const productId = this.product.id;
        const cacheKey = this.generateCacheKey(this.sectionId, this.productIndex, productId);
        const optionsEl = document.querySelector(`salla-product-options[product-id="${productId}"]`);
        if (optionsEl) {
            try {
                const selectedOptions = await optionsEl.getSelectedOptions();
                if (selectedOptions && selectedOptions.length > 0) {
                    this.selectedOptions = {
                        ...this.selectedOptions,
                        [cacheKey]: selectedOptions,
                    };
                }
            }
            catch (e) {
                console.warn('Could not initialize selected options:', e);
            }
        }
    }
    // Clear options state for a specific product
    clearProductOptions(productId) {
        // Generate cache key for this specific product in current section context
        const cacheKey = this.generateCacheKey(this.sectionId, this.productIndex, productId);
        // Remove the product from selectedOptions using the cache key
        const updatedSelectedOptions = { ...this.selectedOptions };
        delete updatedSelectedOptions[cacheKey];
        this.selectedOptions = updatedSelectedOptions;
        // Reset validation errors and unsaved changes
        this.validationErrors = [];
        this.hasUnsavedChanges = false;
    }
    async handleOptionChange(productId, option, detail) {
        const cacheKey = this.generateCacheKey(this.sectionId, this.productIndex, productId);
        // Get the current state from the component to ensure we have the latest selections
        const optionsEl = document.querySelector(`salla-product-options[product-id="${productId}"]`);
        let currentComponentSelections = [];
        if (optionsEl) {
            try {
                currentComponentSelections = (await optionsEl.getSelectedOptions()) || [];
            }
            catch (e) {
                console.warn('Could not get current selections from component:', e);
            }
        }
        // If component returns data, use it; otherwise, fall back to manual tracking
        if (currentComponentSelections.length > 0) {
            // Component returned data, use it
            this.selectedOptions = {
                ...this.selectedOptions,
                [cacheKey]: currentComponentSelections,
            };
        }
        else {
            // If we have existing selections in internal state and component returns empty,
            // it might be a deselection, so we should use manual tracking
            if (this.selectedOptions[cacheKey] && this.selectedOptions[cacheKey].length > 0) {
                // Component didn't return data, use manual tracking
                const currentSelected = this.selectedOptions[cacheKey] || [];
                const updatedSelected = [...currentSelected];
                // Find existing selection for this specific option (by option_id)
                const existingIndex = updatedSelected.findIndex(opt => opt.option_id === option.id);
                if (existingIndex > -1) {
                    // Check if this is a deselection (detail might be null or undefined)
                    if (!detail || detail.id === null || detail.id === undefined) {
                        // Remove the option (deselection)
                        updatedSelected.splice(existingIndex, 1);
                    }
                    else {
                        // Replace existing selection for this option
                        updatedSelected[existingIndex] = { ...detail, option_id: option.id };
                    }
                }
                else {
                    // Only add if detail exists (not a deselection)
                    if (detail && detail.id !== null && detail.id !== undefined) {
                        updatedSelected.push({ ...detail, option_id: option.id });
                    }
                }
                this.selectedOptions = {
                    ...this.selectedOptions,
                    [cacheKey]: updatedSelected,
                };
            }
            else {
                // No existing selections, component returned empty, and we're trying to add
                // This might be the first selection, so add it manually
                if (detail && detail.id !== null && detail.id !== undefined) {
                    this.selectedOptions = {
                        ...this.selectedOptions,
                        [cacheKey]: [{ ...detail, option_id: option.id }],
                    };
                }
            }
        }
        this.hasUnsavedChanges = true;
        this.validationErrors = []; // Clear validation errors when user makes changes
    }
    async validateOptions() {
        if (!this.product?.options)
            return true;
        const errors = [];
        const productId = this.product.id;
        const cacheKey = this.generateCacheKey(this.sectionId, this.productIndex, productId);
        // Get the actual selected options from the component
        const optionsEl = document.querySelector(`salla-product-options[product-id="${productId}"]`);
        let currentSelected = [];
        if (optionsEl) {
            try {
                currentSelected = (await optionsEl.getSelectedOptions()) || [];
                // Also check our internal state as fallback
                const internalSelected = this.selectedOptions[cacheKey] || [];
                // Use whichever has more selections, or if component returns empty but internal has data, use internal
                if (internalSelected.length > currentSelected.length ||
                    (currentSelected.length === 0 && internalSelected.length > 0)) {
                    currentSelected = internalSelected;
                }
            }
            catch (e) {
                // Fallback to internal state
                currentSelected = this.selectedOptions[cacheKey] || [];
            }
        }
        else {
            // Fallback to internal state
            currentSelected = this.selectedOptions[cacheKey] || [];
        }
        // Check if any options are selected at all
        if (currentSelected.length === 0) {
            errors.push(salla.lang.get('pages.products.no_options_selected'));
        }
        // Check required options
        this.product.options.forEach(option => {
            if (option.required) {
                const hasSelection = currentSelected.some(selected => {
                    return selected.option_id == option.id; // Use == instead of === for type flexibility
                });
                if (!hasSelection) {
                    errors.push(salla.lang.get('pages.products.required_option_missing', {
                        option: option.name,
                    }));
                }
            }
        });
        this.validationErrors = errors;
        return errors.length === 0;
    }
    async onSave(e) {
        e.preventDefault();
        const productId = this.product?.id;
        if (!productId)
            return;
        const cacheKey = this.generateCacheKey(this.sectionId, this.productIndex, productId);
        // Small delay to ensure component state is updated
        await new Promise(resolve => setTimeout(resolve, 100));
        // Validate options before saving
        const isValid = await this.validateOptions();
        if (!isValid) {
            salla.notify.error(this.validationErrors.join(', '));
            return;
        }
        this.isLoading = true;
        try {
            // please don't change this with this.host.querySelector it will return null
            const optionsEl = document.querySelector(`salla-product-options[product-id="${productId}"]`);
            let selectedOptions = await optionsEl?.getSelectedOptions();
            // If component returns empty but we have internal state, use internal state
            if ((!selectedOptions || selectedOptions.length === 0) &&
                this.selectedOptions[cacheKey]?.length > 0) {
                selectedOptions = this.selectedOptions[cacheKey];
            }
            if (!selectedOptions || selectedOptions.length === 0) {
                this.isLoading = false;
                return;
            }
            // Store the selected options for this product using cache key
            this.selectedOptions = {
                ...this.selectedOptions,
                [cacheKey]: selectedOptions,
            };
            const form = this.host.closest('form');
            if (!form) {
                this.isLoading = false;
                return;
            }
            // remove old inputs for this specific product in this specific section/index only
            const productInputPattern = `bundle[${this.sectionId}][${this.productIndex}]`;
            // Remove only hidden inputs and inputs with data-product-id, but preserve visible checkboxes
            Array.from(form.querySelectorAll(`input[name^="${productInputPattern}"][type="hidden"]`)).forEach(el => el.remove());
            // Also remove any inputs with data-product-id that match this specific pattern
            Array.from(form.querySelectorAll(`[data-product-id="${productId}"][name^="${productInputPattern}"]`)).forEach(el => el.remove());
            // Ensure the actual checkbox in the UI is checked to reflect the selection visually
            const checkboxId = `bundle[${this.sectionId}][${this.productIndex}][id]`;
            const checkbox = document.getElementById(checkboxId);
            if (checkbox) {
                checkbox.checked = true;
                // Don't dispatch change event here to avoid double API calls
            }
            else {
                // If checkbox doesn't exist, create a hidden input as fallback
                const productSelectionInput = document.createElement('input');
                productSelectionInput.type = 'hidden';
                productSelectionInput.name = `bundle[${this.sectionId}][${this.productIndex}][id]`;
                productSelectionInput.value = String(productId);
                productSelectionInput.dataset.productId = String(productId);
                form.appendChild(productSelectionInput);
            }
            // append new hidden inputs for options
            selectedOptions.forEach((option) => {
                // how to get option parent id?
                const optionParentId = option.option_id;
                const hidden = document.createElement('input');
                hidden.type = 'hidden';
                // Use productIndex for the form input name
                hidden.name = this.generateFormInputName(this.sectionId, this.productIndex ?? 0, optionParentId);
                hidden.value = String(option.id);
                hidden.dataset.productId = String(productId);
                form.appendChild(hidden);
            });
            // Trigger single form change event with all updates (product selection + options)
            const changeEvent = new window.Event('change', { bubbles: true });
            form.dispatchEvent(changeEvent);
            // Emit custom event
            this.optionsSaved.emit({
                productId: Number(productId),
                selectedOptions,
            });
            // Emit product selected event to check the card
            if (this.sectionId) {
                this.productSelected.emit({
                    productId: Number(productId),
                    sectionId: this.sectionId,
                    product: this.product,
                    fromModal: true,
                });
            }
            // Show success message
            salla.notify.success(salla.lang.get('pages.products.options_saved'));
            this.hasUnsavedChanges = false;
            this.validationErrors = [];
            // close modal
            this.modal.close();
        }
        catch (error) {
            salla.notify.error(salla.lang.get('pages.products.options_save_error'));
        }
        finally {
            this.isLoading = false;
        }
    }
    // Method to get options with selected state preserved
    getOptionsWithSelectedState() {
        if (!this.product?.options)
            return [];
        const cacheKey = this.generateCacheKey(this.sectionId, this.productIndex, this.product.id);
        const savedOptions = this.selectedOptions[cacheKey] || [];
        return this.product.options.map(option => ({
            ...option,
            details: option.details.map(detail => {
                const isSelected = savedOptions.some(saved => {
                    return saved.id === detail.id;
                });
                return {
                    ...detail,
                    is_selected: isSelected,
                };
            }),
        }));
    }
    render() {
        const productId = this.product?.id;
        const optionsWithSelectedState = this.getOptionsWithSelectedState();
        return (h(Host, { key: '52efc988e52036a0be8c5dfe7d9375aed2072b55' }, h("salla-modal", { key: 'e07dd856effc65a718528c6836884cd82520e94e', isLoading: this.isLoading, ref: el => (this.modal = el), width: "md", centered: false, id: `s-multiple-bundle-product-options-modal-options-${productId}`, class: "s-multiple-bundle-product-options-modal-wrapper" }, h("div", { key: '5365b7d796d48759a8cd0e7bb7e6cd755382afc8', slot: "loading" }, h("salla-skeleton", { key: 'deb66b5f95587584ade5581da3c891a95d3750af', height: "100%", width: "100%" })), this.product?.images && this.product?.images.length > 0 && (h("salla-slider", { key: 'e79b63e49ba9c29ef9d625ca99ffd17bbf282f79', id: `details-slider-${this.product?.id}`, type: "thumbs", loop: false, "auto-height": true, "listen-to-thumbnails-option": true, showThumbsControls: false, controlsOuter: false, showControls: false, class: "s-multiple-bundle-product-options-modal-slider", verticalThumbs: true, thumbsConfig: {
                centeredSlides: true,
                centeredSlidesBounds: true,
                slidesPerView: Math.min(5, Math.max(1, this.product?.images.length)),
                watchOverflow: true,
                watchSlidesVisibility: true,
                watchSlidesProgress: true,
                direction: 'vertical',
                spaceBetween: 10,
            } }, h("div", { key: '3c3f3d2a1de4869a0d2d15583630d04a400097d7', slot: "items" }, this.product?.images &&
            this.product?.images.map((image, index) => (h("div", { key: index, class: "swiper-slide" }, h("img", { src: image.url, alt: image.alt || `${this.product?.name} - Image ${index + 1}`, loading: "lazy", onError: e => {
                    e.target.style.display = 'none';
                } }))))), this.product?.images && this.product?.images.length > 1 && (h("div", { key: '5d0f67677595c442d76f0fb3a42dacb1996e58db', slot: "thumbs" }, this.product?.images &&
            this.product?.images.map((image, index) => (h("div", { key: index, "data-caption": `${this.product?.name} - Image ${index + 1}` }, h("img", { src: image.url, loading: "eager", class: "s-multiple-bundle-product-options-modal-slider-thumb", title: `${this.product?.name} - ${index + 1}`, alt: image.alt || `${this.product?.name} - ${index + 1}`, onError: e => {
                    e.target.style.display = 'none';
                } })))))))), h("salla-product-options", { options: JSON.stringify(optionsWithSelectedState), key: `${this.sectionId}-${this.sectionIndex}-${productId}-persistent`, "product-id": productId }), h("div", { key: '1f166bdaf78a78b99aeecc141e6f99b9fa1e50b1', slot: "footer" }, h("div", { key: 'e4ea869eaf9690ee3aba7319f976a82f8187767e', class: "s-multiple-bundle-product-options-modal-footer" }, h("salla-button", { key: '17e4f97284528019b25bd640ff3843dbbefb5dae', onClick: e => this.onSave(e), loading: this.isLoading, disabled: this.isLoading }, this.isLoading
            ? salla.lang.get('common.elements.saving')
            : salla.lang.get('common.elements.save')))))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "product": ["handleProductChange"]
    }; }
};
SallaMultipleBundleProductOptionsModal.style = sallaMultipleBundleProductOptionsModalCss;

const sallaMultipleBundleProductSliderCss = "";

const SallaMultipleBundleProductSlider = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.productSelected = createEvent(this, "productSelected");
        this.productOptionsSelected = createEvent(this, "productOptionsSelected");
        this.selectedProducts = {};
        this.handleProductClick = (product, productIndex) => {
            // Find the checkbox input for this product
            const checkboxId = this.generateEventName(this.section.id, productIndex);
            const checkbox = document.getElementById(checkboxId);
            if (!checkbox)
                return;
            if (checkbox) {
                // Toggle the checkbox state
                checkbox.checked = !checkbox.checked;
                // Dispatch a change event to trigger form validation/submission
                const changeEvent = new window.Event('change', { bubbles: true });
                checkbox.dispatchEvent(changeEvent);
            }
            this.productSelected.emit({
                product,
                sectionId: this.section.id,
            });
        };
        this.handleOptionsClick = (product) => {
            this.productOptionsSelected.emit({
                product,
                sectionId: this.section.id,
            });
        };
    }
    generateEventName(sectionId, productIndex) {
        return `bundle[${sectionId}][${productIndex}][id]`;
    }
    render() {
        return (h(Host, { key: '8c1d316ceeb7a0833d689695f00569a0da1d642e' }, h("salla-slider", { key: 'ca86cee09dc4f8c48edf14bfb4a26b86982fd84d', type: "carousel", controlsOuter: false, showControls: false, id: "accordion-multiple-bundle-product", pagination: true, class: "s-multiple-bundle-product-wrapper-slider", sliderConfig: {
                spaceBetween: 0,
            } }, h("div", { key: 'b59ac0393f6e826658dcca7eef8c2c21019664d4', slot: "items" }, this?.section?.products?.map((product, productIndex) => {
            const isChecked = this.selectedProducts[this.section.id]?.has(product.id) || false;
            return (h("div", { class: `swiper-slide s-multiple-bundle-product-slide-one-third ${product.quantity == 0
                    ? 's-multiple-bundle-product-slide-one-third-disabled'
                    : ''}`, key: product.id }, h("div", { class: "s-multiple-bundle-product-card" }, h("div", { class: "s-multiple-bundle-product-image-wrapper", onClick: () => this.handleProductClick(product, productIndex) }, h("input", { id: this.generateEventName(this.section.id, productIndex), type: "checkbox", class: "s-multiple-bundle-product-checkbox", checked: isChecked, name: this.generateEventName(this.section.id, productIndex), value: product.id }), h("img", { src: product.image.url || salla.url.cdn('images/s-empty.png'), loading: "lazy", alt: product.image.alt || product.name, class: "s-multiple-bundle-product-image" })), h("div", { class: "s-multiple-bundle-product-content-wrapper" }, h("div", { class: "s-multiple-bundle-product-content" }, h("div", { class: "s-multiple-bundle-product-details" }, h("div", { class: "s-multiple-bundle-product-title-wrapper" }, h("h2", { class: "s-multiple-bundle-product-title" }, product.name)), h("div", { class: "s-multiple-bundle-product-price-wrapper" }, h("span", { class: "s-multiple-bundle-product-price" }, h("span", { innerHTML: salla.money(product.price) })), product.sale_price > 0 && (h("span", { class: "s-multiple-bundle-product-price-discount" }, h("span", { innerHTML: salla.money(product.sale_price) }))))), product.quantity_in_group > 0 && product.quantity !== 0 && (h("span", { class: "s-multiple-bundle-product-badge" }, salla.lang.get('pages.products.pieces'), h("span", null, product.quantity_in_group))), product.quantity === 0 && (h("span", { class: "s-multiple-bundle-product-badge" }, salla.lang.get('pages.products.quantity_in_group_finished')))), product.options?.length > 0 && (h("button", { class: "s-multiple-bundle-product-button", onClick: () => this.handleOptionsClick(product), type: "button" }, salla.lang.get('pages.products.choose_from_options'), h("i", { class: "sicon-keyboard_arrow_left s-multiple-bundle-product-button-icon" })))))));
        })))));
    }
    get host() { return getElement(this); }
};
SallaMultipleBundleProductSlider.style = sallaMultipleBundleProductSliderCss;

var Tag = `<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>tag</title>
<path d="M28 0h-9.344c-1.059 0-2.056 0.411-2.809 1.153l-14.673 14.456c-1.56 1.56-1.561 4.097-0.001 5.657l9.56 9.56c0.755 0.755 1.76 1.172 2.828 1.173h0.003c1.068 0 2.072-0.416 2.833-1.179l14.451-14.668c0.743-0.753 1.153-1.751 1.153-2.809v-9.344c0-2.205-1.795-4-4-4zM29.333 13.344c0 0.353-0.137 0.685-0.385 0.937l-14.444 14.661c-0.252 0.252-0.587 0.391-0.941 0.391-0.001 0-0.001 0-0.001 0-0.356-0.001-0.691-0.139-0.943-0.392l-9.561-9.56c-0.52-0.52-0.52-1.365-0.005-1.88l14.667-14.449c0.253-0.248 0.585-0.385 0.937-0.385h9.344c0.736 0 1.333 0.597 1.333 1.333zM24 6.673c-0.737 0-1.333 0.604-1.333 1.341s0.596 1.333 1.333 1.333 1.333-0.596 1.333-1.333v-0.015c0-0.737-0.596-1.327-1.333-1.327z"></path>
</svg>
`;

var Cart2 = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>cart2</title>
<path d="M6.845 5.333l-1.905-5.333h-3.607c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333v0h1.727l5.72 16.012c0.569 1.56 2.039 2.654 3.765 2.655h12.133c0.001 0 0.002 0 0.003 0 1.825 0 3.364-1.222 3.845-2.892l0.007-0.028 3.161-13.080zM25.96 17.716c-0.167 0.554-0.672 0.951-1.27 0.951-0.002 0-0.005 0-0.007-0h-12.133c-0.575-0-1.065-0.364-1.252-0.875l-0.003-0.009-3.497-9.783h20.508zM13.333 24c-2.209 0-4 1.791-4 4s1.791 4 4 4c2.209 0 4-1.791 4-4v0c0-2.209-1.791-4-4-4v0zM13.333 29.333c-0.736 0-1.333-0.597-1.333-1.333s0.597-1.333 1.333-1.333c0.736 0 1.333 0.597 1.333 1.333v0c0 0.736-0.597 1.333-1.333 1.333v0zM24 24c-2.209 0-4 1.791-4 4s1.791 4 4 4c2.209 0 4-1.791 4-4v0c0-2.209-1.791-4-4-4v0zM24 29.333c-0.736 0-1.333-0.597-1.333-1.333s0.597-1.333 1.333-1.333c0.736 0 1.333 0.597 1.333 1.333v0c0 0.736-0.597 1.333-1.333 1.333v0z"></path>
</svg>
`;

const sallaOfferModalCss = ".s-offer-modal-type-products .s-modal-body{min-height:690px;position:relative}";

const SallaOfferModal = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.offer = null;
        this.hasError = false;
        this.translationLoaded = false;
        this.addToCartLabel = salla.lang.get("pages.cart.add_to_cart");
        salla.event.on('offer-modal::open', product_id => this.open(product_id));
        salla.lang.onLoaded(() => {
            this.addToCartLabel = salla.lang.get("pages.cart.add_to_cart");
            this.translationLoaded = true;
        });
        this.categorySlot = this.host.querySelector('[slot="category"]')?.innerHTML || `<span class="s-offer-modal-badge-icon">{tagIcon}</span><span class="s-offer-modal-badge-text">{name}</span>`;
        // this.productSlot = this.host.querySelector('[slot="product"]')?.innerHTML || this.defaultProductSlot();
        salla.event.on('offer-modal::open', product_id => this.open(product_id));
        salla.product.event.onOfferExisted(offer => {
            if (salla.storage.get('remember-offer-' + offer.id)) {
                salla.log('User selected to don\'t show this offer again.');
                return;
            }
            this.open(offer.product_id);
        });
    }
    /**
 * Emits a promotion viewed event for analytics tracking
 * @param offer - The offer being viewed in the modal
 */
    emitPromotionViewed(offer) {
        if (!offer)
            return;
        salla.event.emit('promotion::viewed', [{
                id: offer.id?.toString(),
                creative: offer.message,
                name: offer.name,
                position: `${this.offer_type}_offer_modal`
            }]);
    }
    /**
     * Emits a promotion clicked event for analytics tracking
     * @param offer - The offer being clicked in the modal
     */
    emitPromotionClicked(offer) {
        if (!offer)
            return;
        salla.event.emit('promotion::clicked', [{
                id: offer.id?.toString(),
                creative: offer.message,
                name: offer.name,
                position: `${this.offer_type}_offer_modal`
            }]);
    }
    /**
     * Show the available offers for the product
     * @param product_id
     */
    async open(product_id) {
        this.productID = product_id;
        //TODO:: make sure there is only one offer
        this.hasError = false;
        this.modal.open();
        return await salla.api.withoutNotifier(() => salla.product.offers(product_id))
            .then(response => this.showOffer(response.data[0]))
            .catch(e => {
            this.hasError = true;
            this.errorMessage = e.response?.data?.error?.message || e.response?.data;
        })
            .finally(() => setTimeout(() => this.modal.stopLoading(), 1000));
    }
    /**
     * Show offer details
     * @param {Offer} offer
     */
    async showOffer(offer) {
        this.offer = offer;
        this.offer_name = offer.name;
        this.offer_message = offer.message;
        if (this.offer.get.discounts_table) {
            this.offer_type = 'discounts-table';
        }
        else if (this.offer.get.products?.length) {
            this.offer_type = 'products';
        }
        else if (this.offer.get.categories?.length) {
            this.offer_type = 'categories';
        }
        this.modal.setTitle(this.offer_name);
        this.emitPromotionViewed(this.offer);
    }
    rememberMe(event) {
        salla.storage.set('remember-offer-' + this.offer.id, event.target.checked);
    }
    addToCart(qty) {
        //todo:: add enhancement, to cover the previous quantity, because if the discount to add two, user already added one before.
        this.emitPromotionClicked(this.offer);
        salla.api.withoutNotifier(() => salla.cart.quickAdd(this.productID, qty, this.offer_type)).then(() => this.modal.close());
    }
    getOfferContent() {
        if (this.offer.get.discounts_table) {
            return h("div", { class: "s-offer-modal-discount-table" }, h("table", null, h("tbody", null, this.offer.get.discounts_table?.map(discount => h("tr", null, h("td", null, discount.text), h("td", { class: "s-offer-modal-discount-table-cell" }, h("salla-button", { fill: "outline", shape: "btn", color: "primary", size: "medium", width: "normal", onClick: () => this.addToCart(discount.quantity) }, this.addToCartLabel)))))));
        }
        else if (this.offer.get.products?.length) {
            return (h("salla-products-slider", { key: (this.offer.get.products?.map(product => product.id) || []).join(","), source: "selected", "source-value": `[${(this.offer.get.products?.map(product => product.id) || []).join(",")}]`, "slider-config": '{"slidesPerView": 1, "spaceBetween": 16, "breakpoints": { "768": { "slidesPerView": 2 }, "1024": { "slidesPerView": 3 } }}' }));
            //   return <salla-slider
            //     type="carousel"
            //     class={{"s-offer-modal-slider-centered": this.offer.get.products?.length <= 2, "s-offer-modal-slider": true}}
            //     id="offer-modal-slider"
            //     controls-outer
            //     show-controls={this.offer.get.products?.length <= 2 ? 'false' : 'true'}>
            //     <div slot='items'>
            //       {
            //         this.offer.get.products?.map(product =>
            //           <div class={{
            //             "s-offer-modal-product": true,
            //             "s-offer-modal-slider-item": true,
            //             "s-offer-modal-not-available": !product.is_available
            //           }} id={'product_' + product.id} innerHTML={this.productSlot
            //             .replace(/\{name\}/g, product.name)
            //             .replace(/\{url\}/g, product.url)
            //             .replace(/\{image\}/g, product.thumbnail)
            //             .replace(/\{price\}/g, product.has_special_price
            //               ? '<span class="s-offer-modal-product-sale-price">' + salla.money(product.price) + '</span><span class="s-offer-modal-product-old-price">' + salla.money(product.regular_price) + '</span>'
            //               : salla.money(product.price))}>
            //             <div class="s-offer-modal-btn-wrap">
            //               <salla-button width="wide" fill='outline' data-id={product.id} disabled={!product.is_available}
            //                 loader-position="center" onClick={this.addItem}>
            //                 {product.is_available ? salla.lang.get('pages.cart.add_to_cart') : salla.lang.get('pages.products.out_of_stock')}
            //               </salla-button>
            //             </div>
            //           </div>)
            //       }
            //    </div>
            //   </salla-slider>
        }
        else if (this.offer.get.categories?.length) {
            return h("salla-slider", { type: "carousel", class: { "s-offer-modal-slider-centered": this.offer.get.categories?.length <= 2, "s-offer-modal-slider": true }, id: "offer-modal-slider", "controls-outer": true, "show-controls": this.offer.get.categories?.length <= 2 ? 'false' : 'true' }, h("div", { slot: 'items' }, this.offer.get.categories.map(category => h("a", { href: category.urls.customer, class: "s-offer-modal-badge s-offer-modal-slider-item s-offer-modal-cat-item", innerHTML: this.categorySlot
                    .replace(/\{tagIcon\}/g, Tag)
                    .replace(/\{name\}/g, category.name)
                    .replace(/\{url\}/g, category.urls.customer) }))));
        }
    }
    //todo:: pass event then use sallaButton from it
    //   private addItem() {
    //     // this here, is sallaButton
    //     this['load']();
    //     return salla.cart.api
    //       .quickAdd(this['dataset'].id)
    //       .finally(() => this['stop']());
    //   }
    //   private defaultProductSlot() {
    //     return '<a href={url} class="s-offer-modal-product-image-wrap"><img class="s-offer-modal-product-image" src="{image}" /></a>' +
    //       '<div class="s-offer-modal-product-info">' +
    //       '   <a href={url} class="s-offer-modal-product-name">{name}</a>' +
    //       '   <div class="s-offer-modal-product-price">{price}</div>' +
    //       '</div>';
    //   }
    render() {
        return h("salla-modal", { key: '6dce27c3f20b031aa33b7e15980c55af84d1c9f6', "has-skeleton": true, "sub-title": this.offer_message, ref: modal => this.modal = modal, isLoading: true, class: `s-offer-modal-type-${this.offer_type ? this.offer_type : ''}` }, h("div", { key: '1f63aa0fd3a95ba54e8ed5168f1439f4cafce036', slot: 'loading' }, h("div", { key: '748de710f2ad5c6c60a9e324d1e1b44672dee28f', class: "s-offer-modal-skeleton" }, h("div", { key: '96d6d1d8edc3e511c87eaa44539617d529e8a3e0', class: "s-offer-modal-skeleton-header" }, h("salla-skeleton", { key: '1abe6ddf5096af877c9ce59dfbcdecb08a263e4b', type: 'circle', height: '80px', width: '80px' }), h("salla-skeleton", { key: '7010a9056b168f4df7168a55dbfde1da2726c913', height: '15px', width: '50%' }), h("salla-skeleton", { key: '4168b53b7a4358240f8f6d4d3b9f9a999992ddcb', height: '10px', width: '30%' })), h("div", { key: 'd019372cebf6d3e4d80842fa48e3ce1433457f06', class: "s-offer-modal-skeleton-items" }, [...Array(3)].map(() => h("div", { class: "s-offer-modal-skeleton-item" }, h("salla-skeleton", { height: '9rem' }), h("div", { class: "s-offer-modal-skeleton-item-title" }, h("salla-skeleton", { height: '15px', width: '100%' })), h("div", { class: "s-offer-modal-skeleton-item-subtitle" }, h("salla-skeleton", { height: '9px', width: '50%' }), h("div", { innerHTML: Cart2 }))))), h("div", { key: '4cbc9f99a98ccc9ea27f41e50fa037ea44d85048', class: "s-offer-modal-skeleton-footer" }, h("salla-skeleton", { key: '467546d4ded93cd95a7be78e6dd39935a20867c8', height: '15px', width: '50%' }), h("salla-skeleton", { key: '399a4a4ebedcc54def70ff428f3c5f24fd98a775', height: '15px', width: '30%' })))), !this.hasError && this.offer !== null
            ? [h("span", { slot: 'icon', class: "s-offer-modal-header-icon", innerHTML: SpecialDiscountIcon }), this.getOfferContent(), h("div", { class: "s-offer-modal-footer", slot: "footer" }, this.offer.formatted_date ?
                    h("p", { class: "s-offer-modal-expiry" }, salla.lang.get('pages.products.offer_expires_in'), " ", this.offer.formatted_date)
                    : '', h("label", { class: "s-offer-modal-remember-label" }, h("input", { type: "checkbox", onChange: e => this.rememberMe(e), class: "s-offer-modal-remember-input" }), "\u00A0 ", salla.lang.get('common.elements.remember_my_choice'))),
            ] :
            h("salla-placeholder", { class: "s-loyalty-placeholder", alignment: "center" }, !!this.errorMessage ? h("span", { slot: "description" }, this.errorMessage) : ''));
    }
    get host() { return getElement(this); }
};
SallaOfferModal.style = sallaOfferModalCss;

var Inbox = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>inbox</title>
<path d="M31.984 19.797l-2.667-17.333c-0.1-0.651-0.659-1.131-1.317-1.131h-24c-0.659 0-1.217 0.48-1.317 1.131l-2.667 17.333c-0.011 0.067-0.016 0.135-0.016 0.203v6.667c0 2.205 1.795 4 4 4h24c2.205 0 4-1.795 4-4v-6.667c0-0.068-0.005-0.136-0.016-0.203zM5.144 4h21.712l2.256 14.667h-9.112c-0.736 0-1.333 0.596-1.333 1.333 0 1.471-1.196 2.667-2.667 2.667s-2.667-1.196-2.667-2.667c0-0.737-0.597-1.333-1.333-1.333h-9.112zM29.333 26.667c0 0.736-0.599 1.333-1.333 1.333h-24c-0.735 0-1.333-0.597-1.333-1.333v-5.333h8.168c0.593 2.299 2.684 4 5.165 4s4.571-1.701 5.165-4h8.168z"></path>
</svg>
`;

const sallaPlaceholderCss = "";

const SallaPlaceholder = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.translationLoaded = false;
        /**
         * Custom icon to display, defaults to [`Inbox`], can be any valid svg icon or inline element with font icon
         */
        this.icon = Inbox;
        /**
         * Defines the alignment of contents. Defaults to [`left`]
         */
        this.alignment = 'left';
        /**
          * The size of the icon. Defaults to [`md`] = 45px for font icon & width/height: 3.5rem for svg icon
          */
        this.iconSize = 'md';
        salla.lang.onLoaded(() => {
            this.translationLoaded = true;
        });
    }
    alignmentClass() {
        return {
            's-placeholder-wrapper': true,
            's-placeholder-align-left': this.alignment == 'left',
            's-placeholder-align-center': this.alignment == 'center',
            's-placeholder-align-right': this.alignment == 'right',
        };
    }
    render() {
        return (h(Host, { key: '9bf5c9b70ee7dddc65bdb550f98681aa6eb4a2b1', class: this.alignmentClass() }, h("div", { key: '05bf79dd66fb30d76ffe05ea50b66d1bab976bb0', class: `s-placeholder-icon s-placeholder-icon-${this.iconSize}`, innerHTML: this.icon }), h("div", { key: '1373cfaad7e993e6cc888047346348083ee8bf7e', class: "s-placeholder-title" }, h("slot", { key: '5a6d70c7fee74334cf46143511bf2465e32025be', name: 'title' }, h("span", { key: '5b531362a3dea0a8a59960a28925c03bdfc64f82' }, salla.lang.get('common.elements.no_options')))), h("div", { key: 'd9d0c28b47f7c2972817630a9011e17116fa66c8', class: "s-placeholder-description" }, h("slot", { key: '0b67052476e584464107d56b4c8f263cfebaac87', name: 'description' }, h("span", { key: '61b16c16799ce96a53eca32936c8d49b2e81ff03' }, salla.lang.get('common.errors.empty_results'))))));
    }
};
SallaPlaceholder.style = sallaPlaceholderCss;

var BellRing = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>bell-ring</title>
<path d="M2.667 13.333v-4c0-2.592 0.748-5.107 2.161-7.271 0.404-0.616 0.231-1.443-0.387-1.845-0.616-0.401-1.443-0.228-1.845 0.388-1.699 2.599-2.596 5.617-2.596 8.728v4c0 0.736 0.596 1.333 1.333 1.333s1.333-0.596 1.333-1.333zM25.333 15.647v-6.313c0-5.147-4.188-9.333-9.333-9.333s-9.333 4.187-9.333 9.333v6.312l-5.157 9.027c-0.236 0.413-0.235 0.92 0.004 1.331 0.239 0.412 0.679 0.664 1.153 0.664h8c0 2.941 2.392 5.333 5.333 5.333s5.333-2.392 5.333-5.333h8c0.475 0 0.915-0.252 1.153-0.664 0.239-0.411 0.24-0.917 0.004-1.331zM16 29.333c-1.471 0-2.667-1.196-2.667-2.667h5.333c0 1.472-1.196 2.667-2.667 2.667zM4.965 24l4.193-7.339c0.113-0.2 0.175-0.429 0.175-0.661v-6.667c0-3.676 2.991-6.667 6.667-6.667s6.667 2.991 6.667 6.667v6.667c0 0.232 0.061 0.46 0.176 0.661l4.192 7.339zM29.403 0.603c-0.403-0.616-1.232-0.789-1.845-0.387-0.617 0.403-0.791 1.229-0.387 1.845 1.415 2.165 2.163 4.68 2.163 7.272v4c0 0.736 0.596 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-4c0-3.112-0.899-6.132-2.597-8.731z"></path>
</svg>
`;

const sallaProductAvailabilityCss = "";

const SallaProductAvailability = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.isUser = salla.config.isUser();
        this.translationLoaded = false;
        /**
         * Listen to product options availability.
         */
        this.notifyOptionsAvailability = false;
        /**
         * is current user already subscribed
         */
        this.isSubscribed = false;
        this.handleSubmitOptions = async () => {
            let payload = { id: this.productId };
            if (!this.notifyOptionsAvailability) {
                return payload;
            }
            let optionsElement = document.querySelector(`salla-product-options[product-id="${this.productId}"]`);
            let options = Object.values(await optionsElement?.getSelectedOptionsData() || {});
            //if all options not selected, show message && throw exception
            if (options.length && !await optionsElement?.reportValidity()) {
                let errorMessage = salla.lang.get('common.messages.required_fields');
                salla.error(errorMessage);
                throw errorMessage;
            }
            payload.options = [];
            options.forEach(option => {
                //inject numbers only, without zeros
                if (option && !isNaN(option)) {
                    payload.options.push(Number(option));
                }
            });
            return payload;
        };
        // helpers
        this.typing = (e) => {
            const error = e.target.nextElementSibling;
            e.target.classList.remove('s-has-error');
            error?.classList.contains('s-product-availability-error-msg') && (error.innerText = '');
            e.keyCode === 13 && this.submit();
        };
        salla.lang.onLoaded(() => {
            this.translationLoaded = true;
            this.title_ = this.host.title || salla.lang.get('pages.products.notify_availability_title');
            this.modal?.setTitle(this.title_);
        });
        if (!this.productId) {
            this.productId = salla.config.get('page.id');
        }
        if (this.isUser)
            return;
        this.channelsWatcher(this.channels);
        this.title_ = this.host.title || salla.lang.get('pages.products.notify_availability_title');
        this.host.removeAttribute('title');
        //todo:: fix this to cover options too
        this.isVisitorSubscribed = !this.notifyOptionsAvailability ? salla.storage.get(`product-${this.productId}-subscribed`) : '';
    }
    channelsWatcher(newValue) {
        this.channels_ = !!newValue ? newValue.split(',') : [];
    }
    openModel() {
        this.handleSubmitOptions().then(isSuccess => isSuccess ? this.modal.open() : null);
    }
    async submit() {
        let payload = await this.handleSubmitOptions();
        if (this.isUser) {
            return salla.api.product.availabilitySubscribe(payload)
                .then(() => this.isSubscribed = true);
        }
        if (this.channels_.includes('sms')) {
            let { phone, countryCode } = await this.mobileInput.getValues();
            payload['country_code'] = countryCode;
            payload['phone'] = phone;
        }
        if (this.channels_.includes('email')) {
            this.email.value !== '' && (payload['email'] = this.email.value);
        }
        await this.validateform();
        return this.btn.load()
            .then(() => this.btn.disable())
            .then(() => salla.api.product.availabilitySubscribe(payload))
            .then(() => {
            if (!this.notifyOptionsAvailability) {
                salla.storage.set(`product-${this.productId}-subscribed`, true);
                this.isSubscribed = true;
                return;
            }
            if (payload.options.length) {
                let options = salla.storage.get(`product-${this.productId}-subscribed-options`) || [];
                let selectedOptionsString = payload.options.join(',');
                if (!options.includes(selectedOptionsString)) {
                    options.push(selectedOptionsString);
                    salla.storage.set(`product-${this.productId}-subscribed-options`, options);
                    this.isSubscribed = true;
                }
                else {
                    salla.log('already subscribed to this options');
                }
            }
        })
            .then(() => this.btn.stop())
            .then(() => this.modal.close())
            .catch(() => this.btn.stop() && this.btn.enable());
    }
    async validateform() {
        try {
            if (this.channels_.includes('email')) {
                const isEmailValid = Helper.isValidEmail(this.email.value);
                if (isEmailValid)
                    return;
                !isEmailValid && this.validateField(this.email, salla.lang.get('common.elements.email_is_valid'));
            }
            if (this.channels_.includes('sms')) {
                const isPhoneValid = await this.mobileInput.isValid();
                if (isPhoneValid)
                    return;
            }
        }
        catch (error) {
            throw ('Please insert required fields');
        }
    }
    validateField(field, errorMsg) {
        field.classList.add('s-has-error');
        field.nextElementSibling['innerText'] = '* ' + errorMsg;
    }
    render() {
        return (h(Host, { key: '631de4fa7186561daed53943f2ece491a8dbe934', class: "s-product-availability-wrap" }, this.isSubscribed || this.isVisitorSubscribed
            ? h("div", { class: "s-product-availability-subscribed" }, h("span", { innerHTML: BellRing, class: "s-product-availability-subs-icon" }), salla.lang.get('pages.products.notify_availability_success'))
            :
                h("salla-button", { width: "wide", onClick: () => this.isUser ? this.submit() : this.openModel() }, salla.lang.get('pages.products.notify_availability')), this.isUser || this.isSubscribed || this.isVisitorSubscribed ? '' : this.renderModal()));
    }
    renderModal() {
        return (h("salla-modal", { ref: modal => this.modal = modal, "modal-title": this.title_, subTitle: salla.lang.get('pages.products.notify_availability_subtitle'), width: "sm" }, h("span", { slot: 'icon', class: "s-product-availability-header-icon", innerHTML: BellRing }), h("div", { class: "s-product-availability-body" }, this.channels_.includes('email') ? [
            h("label", { class: "s-product-availability-label" }, salla.lang.get('common.elements.email')),
            h("input", { class: "s-product-availability-input", onKeyDown: e => this.typing(e), placeholder: salla.lang.get('common.elements.email_placeholder') || 'your@email.com', ref: el => this.email = el, type: "email" }),
            h("span", { class: "s-product-availability-error-msg" })
        ] : '', this.channels_.includes('sms') ? [
            h("label", { class: "s-product-availability-label" }, salla.lang.get('common.elements.mobile')),
            h("salla-tel-input", { ref: el => this.mobileInput = el, onKeyDown: e => this.typing(e) })
        ] : ''), h("div", { slot: "footer", class: "s-product-availability-footer" }, h("salla-button", { class: "modal-cancel-btn", width: "wide", color: "light", fill: "outline", onClick: () => this.modal.close() }, salla.lang.get('common.elements.cancel')), h("salla-button", { class: "submit-btn", "loader-position": 'center', width: "wide", ref: btn => this.btn = btn, onClick: () => this.submit() }, salla.lang.get('common.elements.submit')))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "channels": ["channelsWatcher"]
    }; }
};
SallaProductAvailability.style = sallaProductAvailabilityCss;

var Heart = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>heart</title>
<path d="M23.333 2.267c-3.547 0-5.779 1.605-7.333 3.061-1.555-1.456-3.787-3.061-7.333-3.061-5.955 0-8.667 5.045-8.667 9.733 0 8.503 10.147 14.735 15.513 16.841 0.156 0.061 0.321 0.092 0.487 0.092s0.331-0.031 0.487-0.092c5.367-2.107 15.513-8.339 15.513-16.841 0-4.688-2.712-9.733-8.667-9.733zM16 26.161c-5.537-2.309-13.333-7.799-13.333-14.161 0-3.517 1.856-7.067 6-7.067 2.983 0 4.656 1.451 6.384 3.203 0.5 0.508 1.399 0.508 1.899 0 1.728-1.752 3.401-3.203 6.384-3.203 4.144 0 6 3.549 6 7.067 0 6.363-7.796 11.852-13.333 14.161z"></path>
</svg>
`;

const sallaProductCardCss = ".s-product-card-image::before{font-family:\"sallaicons\";content:\"\\ec1f\" !important}.s-product-card-content-pie-svg circle{transition:stroke-dashoffset 1s linear;-webkit-transition:stroke-dashoffset 1s linear;-moz-transition:stroke-dashoffset 1s linear;-ms-transition:stroke-dashoffset 1s linear;-o-transition:stroke-dashoffset 1s linear;stroke:#E8EDF2;stroke-width:2px;stroke-linecap:round;fill:none}.s-product-card-content-pie-svg-bar{stroke:var(--color-primary) !important;stroke-dasharray:100 100;stroke-dashoffset:100}";

const SallaProductCard = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        // Store configs
        salla.onReady(() => {
            this.fitImageHeight = salla.config.get('store.settings.product.fit_type');
            salla.wishlist.event.onAdded((_res, id) => this.toggleFavoriteIcon(true, id));
            salla.wishlist.event.onRemoved((_res, id) => this.toggleFavoriteIcon(false, id));
            this.placeholder = salla.url.asset(salla.config.get('theme.settings.placeholder'));
        });
        // Language
        salla.lang.onLoaded(() => {
            this.remained = salla.lang.get('pages.products.remained');
            this.donationAmount = salla.lang.get('pages.products.donation_amount');
            this.startingPrice = salla.lang.get('pages.products.starting_price');
            this.addToCart = salla.lang.get('pages.cart.add_to_cart');
            this.outOfStock = salla.lang.get('pages.products.out_of_stock');
        });
        // Parse product data
        if (!this.product) {
            return;
        }
        try {
            this.productData = typeof this.product == 'object' ? this.product : JSON.parse(this.product);
        }
        catch (e) {
            salla.log('Bad json passed via product prop');
        }
    }
    // Private Methods
    initCircleBar() {
        let qty = this.productData.quantity, total = this.productData.quantity > 100 ? this.productData.quantity * 2 : 100, roundPercent = (qty / total) * 100, bar = this.pie.querySelector('.s-product-card-content-pie-svg-bar'), strokeDashOffsetValue = 100 - roundPercent;
        bar.style.strokeDashoffset = strokeDashOffsetValue;
    }
    toggleFavoriteIcon(isAdded = true, id = null) {
        if (id && id !== this.productData.id) {
            return;
        }
        this.wishlistBtn?.classList.toggle('s-product-card-wishlist-added', isAdded);
    }
    formatDate(date) {
        let d = new Date(date);
        return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;
    }
    getProductBadge() {
        if (this.productData.promotion_title) {
            return h("div", { class: "s-product-card-promotion-title" }, this.productData.promotion_title);
        }
        if (this.showQuantity && this.productData?.quantity) {
            return h("div", { class: "s-product-card-quantity" }, this.remained, " ", salla.helpers.number(this.productData?.quantity));
        }
        if (this.showQuantity && this.productData?.is_out_of_stock) {
            return h("div", { class: "s-product-card-out-badge" }, this.outOfStock);
        }
        return '';
    }
    getPriceFormat(price) {
        if (!price || price == 0) {
            return salla.config.get('store.settings.product.show_price_as_dash') ? '-' : '';
        }
        return salla.money(price);
    }
    getProductPrice() {
        if (this.productData.is_on_sale) {
            return h("div", { class: "s-product-card-sale-price" }, h("h4", { innerHTML: this.getPriceFormat(this.productData.sale_price) }), h("span", { innerHTML: this.getPriceFormat(this.productData?.regular_price) }));
        }
        if (this.productData.starting_price) {
            return h("div", { class: "s-product-card-starting-price" }, h("p", null, this.startingPrice), h("h4", { innerHTML: this.getPriceFormat(this.productData?.starting_price) }));
        }
        return h("h4", { class: "s-product-card-price", innerHTML: this.getPriceFormat(this.productData?.price) });
    }
    render() {
        const classes = {
            's-product-card-entry': true,
            's-product-card-vertical': !this.horizontal && !this.fullImage && !this.minimal,
            's-product-card-horizontal': this.horizontal && !this.fullImage && !this.minimal,
            's-product-card-fit-height': this.fitImageHeight && !this.isSpecial && !this.fullImage && !this.minimal,
            's-product-card-special': this.isSpecial,
            's-product-card-full-image': this.fullImage,
            's-product-card-minimal': this.minimal,
            's-product-card-donation': this.productData?.donation,
            's-product-card-shadow': this.shadowOnHover,
            's-product-card-out-of-stock': this.productData?.is_out_of_stock,
        };
        const hrefProp = this.productData?.url ? { href: this.productData.url, title: `Learn more about ${this.productData?.name}` } : {};
        return (h(Host, { key: 'e46cba8a24104176d7a95c02ead575a6fa360783', id: `product-${this.productData?.id}`, class: classes }, h("div", { key: '6370f6a5ca0a63ab4f4d97492ef1f8911ef82bda', class: !this.fullImage ? 's-product-card-image' : 's-product-card-image-full' }, h("a", { key: '37f2f82fa1c500e9cdb4a0aabe570429b9b9daaa', ...hrefProp }, h("img", { key: '4ce43329b5a44b4d5ef174469c510ef28d547440', class: `s-product-card-image-${salla.url.is_placeholder(this.productData?.image?.url)
                ? 'contain'
                : this.fitImageHeight
                    ? this.fitImageHeight
                    : 'cover'} lazy`, src: this.placeholder, alt: this.productData?.image?.alt || this.productData?.name, "data-src": this.productData?.image?.url || this.productData?.thumbnail }), !this.fullImage && !this.minimal ? this.getProductBadge() : ''), this.fullImage && h("a", { key: '87a4e4caafb0edba3c634ff5760ae0556a510d3c', ...hrefProp, class: "s-product-card-overlay" }), !this.horizontal && !this.fullImage ?
            h("salla-button", { shape: "icon", fill: "none", color: "light", "aria-label": "Add or remove to wishlist", ref: el => this.wishlistBtn = el, class: "s-product-card-wishlist-btn animated", onClick: () => salla.wishlist.toggle(this.productData.id) }, h("span", { innerHTML: Heart })) : ''), h("div", { key: '7cb392ea3fe61d41d5ba5a36650725545ddd3cf8', class: "s-product-card-content" }, this.isSpecial && this.productData?.quantity ?
            h("div", { class: "s-product-card-content-pie", ref: pie => this.pie = pie }, h("span", null, h("b", null, salla.helpers.number(this.productData?.quantity)), this.remained), h("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "-2 -1 36 34", class: "s-product-card-content-pie-svg" }, h("circle", { cx: "16", cy: "16", r: "15.9155", class: "s-product-card-content-pie-svg-base" }), h("circle", { cx: "16", cy: "16", r: "15.9155", class: "s-product-card-content-pie-svg-bar" })))
            : '', h("div", { key: '28322ef080ae243b55ed4c982f59226159b81d6b', class: { 's-product-card-content-main': true, 's-product-card-content-extra-padding': this.isSpecial } }, h("h3", { key: 'dc378461ca91f1af0c29b35271e8f6b76321f133', class: "s-product-card-content-title" }, h("a", { key: '1bf4c4cf4d04ebb4990053d9721581b276083f30', ...hrefProp }, this.productData?.name)), this.productData?.subtitle && !this.minimal ?
            h("p", { class: "s-product-card-content-subtitle" }, this.productData?.subtitle)
            : ''), this.productData?.donation && !this.minimal && !this.fullImage ?
            [h("salla-progress-bar", { donation: this.productData?.donation }), h("div", { class: "s-product-card-donation-input" }, this.productData?.donation?.can_donate ?
                    [h("label", { htmlFor: "donation-amount" }, this.donationAmount, " ", h("span", null, "*")), h("input", { type: "text", onInput: e => {
                                salla.helpers.inputDigitsOnly(e.target);
                                this.addBtn.donatingAmount = e.target.value;
                            }, id: "donation-amount", name: "donating_amount", class: "s-form-control", placeholder: this.donationAmount })]
                    : '')]
            : '', h("div", { key: '86474ac2519b7589053b39dc36ae316ad64c8e29', class: { 's-product-card-content-sub': true, 's-product-card-content-extra-padding': this.isSpecial } }, this.getProductPrice(), this.productData?.rating?.stars && !this.minimal ?
            h("div", { class: "s-product-card-rating" }, h("span", { innerHTML: Rate }), h("span", null, this.productData.rating.stars))
            : ''), this.isSpecial && this.productData.discount_ends
            ? h("salla-count-down", { date: this.formatDate(this.productData.discount_ends), "end-of-day": true, boxed: true, labeled: true })
            : '', !this.hideAddBtn ?
            h("div", { class: "s-product-card-content-footer" }, h("salla-add-product-button", { fill: "outline", width: "wide", ref: el => this.addBtn = el, "product-id": this.productData.id, "product-status": this.productData.status, "product-type": this.productData.type }, h("slot", { name: "add-to-cart-label" }, this.productData.add_to_cart_label)), this.horizontal || this.fullImage ?
                h("salla-button", { shape: "icon", fill: "none", color: "light", ref: el => this.wishlistBtn = el, "aria-label": "Add or remove to wishlist", class: "s-product-card-wishlist-btn animated", onClick: () => salla.wishlist.toggle(this.productData.id), "data-id": "{{ product.id }}" }, h("span", { class: "text-xl", innerHTML: Heart }))
                : '')
            : '')));
    }
    componentDidLoad() {
        document.lazyLoadInstance?.update(this.host.querySelectorAll('.lazy'));
        if (this.productData?.quantity && this.isSpecial) {
            this.initCircleBar();
        }
        if (!salla.config.isGuest() && salla.storage.get('salla::wishlist', []).includes(this.productData?.id)) {
            this.toggleFavoriteIcon();
        }
    }
    static get assetsDirs() { return ["assets"]; }
    get host() { return getElement(this); }
};
SallaProductCard.style = sallaProductCardCss;

var DisplayType;
(function (DisplayType) {
    DisplayType["COLOR"] = "color";
    DisplayType["DATE"] = "date";
    DisplayType["DATETIME"] = "datetime";
    DisplayType["DONATION"] = "donation";
    DisplayType["IMAGE"] = "image";
    DisplayType["MULTIPLE_OPTIONS"] = "multiple-options";
    DisplayType["NUMBER"] = "number";
    DisplayType["SINGLE_OPTION"] = "single-option";
    DisplayType["DIGITAL_CARD_VALUE"] = "digital-code-value";
    DisplayType["COUNTRY"] = "country";
    DisplayType["SPLITTER"] = "splitter";
    DisplayType["TEXT"] = "text";
    DisplayType["TEXTAREA"] = "textarea";
    DisplayType["THUMBNAIL"] = "thumbnail";
    DisplayType["TIME"] = "time";
    DisplayType["RADIO"] = "radio";
    DisplayType["CHECKBOX"] = "checkbox";
    DisplayType["MAP"] = "map";
    DisplayType["FILE"] = "file";
    DisplayType["COLOR_PICKER"] = "color_picker";
    DisplayType["BOOKING"] = "booking";
})(DisplayType || (DisplayType = {}));
var Currency;
(function (Currency) {
    Currency["Sar"] = "SAR";
})(Currency || (Currency = {}));

var CameraIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>camera</title>
<path d="M16 10.667c-4.044 0-7.333 3.289-7.333 7.333s3.289 7.333 7.333 7.333 7.333-3.289 7.333-7.333-3.289-7.333-7.333-7.333zM16 22.667c-2.573 0-4.667-2.093-4.667-4.667s2.093-4.667 4.667-4.667 4.667 2.093 4.667 4.667-2.093 4.667-4.667 4.667zM28 5.333h-3.287l-2.271-3.407c-0.248-0.371-0.664-0.593-1.109-0.593h-10.667c-0.445 0-0.861 0.223-1.109 0.593l-2.271 3.407h-3.287c-2.205 0-4 1.795-4 4v17.333c0 2.205 1.795 4 4 4h24c2.205 0 4-1.795 4-4v-17.333c0-2.205-1.795-4-4-4zM29.333 26.667c0 0.735-0.599 1.333-1.333 1.333h-24c-0.735 0-1.333-0.599-1.333-1.333v-17.333c0-0.735 0.599-1.333 1.333-1.333h4c0.445 0 0.861-0.223 1.109-0.593l2.272-3.407h9.239l2.271 3.407c0.248 0.371 0.664 0.593 1.109 0.593h4c0.735 0 1.333 0.599 1.333 1.333zM25.333 10.66c-0.736 0-1.333 0.604-1.333 1.34s0.597 1.333 1.333 1.333 1.333-0.597 1.333-1.333v-0.013c0-0.736-0.597-1.327-1.333-1.327z"></path>
</svg>
`;

var FileIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>file-upload</title>
<path d="M21.333 24c0.341 0 0.683-0.131 0.943-0.391 0.521-0.521 0.521-1.364 0-1.885l-5.333-5.333c-0.123-0.123-0.271-0.22-0.433-0.288-0.327-0.135-0.693-0.135-1.019 0-0.163 0.068-0.311 0.165-0.433 0.288l-5.333 5.333c-0.521 0.521-0.521 1.364 0 1.885s1.364 0.521 1.885 0l3.057-3.057v10.115c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-10.115l3.057 3.057c0.26 0.26 0.601 0.391 0.943 0.391zM28.943 9.724l-9.333-9.333c-0.249-0.251-0.589-0.391-0.943-0.391h-12c-2.205 0-4 1.795-4 4v24c0 2.205 1.795 4 4 4h4c0.736 0 1.333-0.597 1.333-1.333s-0.597-1.333-1.333-1.333h-4c-0.735 0-1.333-0.599-1.333-1.333v-24c0-0.735 0.599-1.333 1.333-1.333h11.448l8.552 8.552v16.781c0 0.735-0.599 1.333-1.333 1.333h-4c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333h4c2.205 0 4-1.795 4-4v-17.333c0-0.353-0.14-0.693-0.391-0.943z"></path>
</svg>
`;

const sallaProductOptionsCss = "";

const SallaProductOptions = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.changed = createEvent(this, "changed");
        this.fileTypes = {
            pdf: 'application/pdf',
            png: 'image/png',
            jpg: 'image/jpeg',
            word: 'application/doc,application/ms-doc,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            exl: 'application/excel,application/vnd.ms-excel,application/x-excel,application/x-msexcel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            txt: 'text/plain',
        };
        this.outOfStockText = "";
        this.donationAmount = salla.lang.get('pages.products.donation_amount');
        this.selectDonationAmount = salla.lang.getWithDefault('pages.products.select_donation_amount', 'ÿ™ÿ≠ÿØŸäÿØ ŸÖÿ®ŸÑÿ∫ ÿßŸÑÿ™ÿ®ÿ±ÿπ');
        this.selectAmount = salla.lang.getWithDefault('pages.products.select_amount', 'ÿßÿÆÿ™ÿ± ÿßŸÑŸÖÿ®ŸÑÿ∫');
        this.isCustomDonation = false;
        this.selectedOptions = [];
        this.disableCardValue = true;
        this.availableDigitalCardValues = [];
        this.userInitiatedValidation = false;
        this.outSkus = [];
        /**
       * Avoid selection of previous default or selected card value option
       * when switching between digital card country options for the 1st time
       */
        this.ignoreDefaultCardValue = false;
        /**
         * The id of the product to which the options are going to be fetched for.
         */
        this.productId = salla.config.get('page.id');
        this.handleDonationOptions = (event, detail, type) => {
            if (detail === 'custom' && type === 'input') {
                salla.helpers.inputDigitsOnly(event.target);
                salla.event.emit('product-options::donation-changed', {
                    id: this.productId,
                    price: event.target.value
                });
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            this.isCustomDonation = event.target.value === 'custom';
            if (this.donationInput) {
                if (event.target.value === 'custom') {
                    this.donationInput.value = '';
                    this.donationInput.focus();
                }
                else {
                    this.donationInput.value = event.target.value;
                }
                if (detail === 'custom') {
                    return;
                }
                salla.event.emit('product-options::donation-changed', {
                    id: this.productId,
                    price: event.target.value
                });
            }
        };
        this.hideLabel = (option) => {
            if (option.type === DisplayType.DONATION && (option.donation && !option.donation.can_donate)) {
                return true;
            }
            return false;
        };
        this.getExpireDonationMessage = (option) => {
            if (!option.donation) {
                return;
            }
            const completed = option.donation.target_amount <= option.donation.collected_amount;
            return h("div", { class: { "s-product-options-donation-message": true, "s-product-options-donation-completed": completed, "s-product-options-donation-expired": !completed } }, h("p", null, option.donation.target_message), h("span", { innerHTML: completed ? salla.money(option.donation.target_amount) : '' }));
        };
        this.canDisabled = !salla.config.get('store.settings.product.notify_options_availability') || salla.url.is_page('cart');
        salla.lang.onLoaded(() => {
            this.outOfStockText = salla.lang.get("pages.products.out_of_stock");
            this.donationAmount = salla.lang.get('pages.products.donation_amount');
            this.selectDonationAmount = salla.lang.getWithDefault('pages.products.select_donation_amount', 'ÿ™ÿ≠ÿØŸäÿØ ŸÖÿ®ŸÑÿ∫ ÿßŸÑÿ™ÿ®ÿ±ÿπ');
            this.selectAmount = salla.lang.getWithDefault('pages.products.select_amount', 'ÿßÿÆÿ™ÿ± ÿßŸÑŸÖÿ®ŸÑÿ∫');
        });
        if (this.options) {
            try {
                this.setOptionsData(Array.isArray(this.options) ? this.options : JSON.parse(this.options));
                return;
            }
            catch (e) {
                salla.log('Bad json passed via options prop');
            }
        }
        if (!Array.isArray(this.optionsData)) {
            salla.log('Options is not an array[] ---> ', this.optionsData);
            this.setOptionsData([]);
        }
        if (this.productId && !salla.url.is_page('cart')) {
            salla.api.product.getDetails(this.productId, ['options']).then(resp => this.setOptionsData(resp.data.options));
        }
    }
    /**
     * Sets the options data for the product
     * @param optionsData - Array of product options
     */
    async setOptionsData(optionsData) {
        this.optionsData = optionsData;
        const that = this;
        this.optionsData[0]?.details?.forEach(function (detail) {
            Object.entries(detail.skus_availability || {})
                .filter(sku => !sku[1])
                .map(sku => that.outSkus.push(Number(sku[0])));
        });
    }
    /**
     * Get the id's of the selected options.
     * */
    async getSelectedOptionsData() {
        const selectedOptions = {};
        const formData = this.host.getElementSallaData();
        // Check if bundleContext is defined as a prop on the component before accessing it
        const contextData = (typeof this.bundleContext !== 'undefined') ? this.bundleContext : null;
        formData.forEach((value, key) => {
            if (contextData) {
                // Handle bundle naming convention: bundle[sectionId][index][options][optionId]
                if (key.startsWith('bundle[') && key.includes('[options][')) {
                    const optionId = key.split('[options][')[1].replace(']', '');
                    selectedOptions[optionId] = value;
                }
            }
            else {
                // Handle standard naming convention: options[optionId]
                if (key.startsWith('options[')) {
                    selectedOptions[key.replace('options[', '').replace(']', '')] = value;
                }
            }
        });
        return selectedOptions;
    }
    /**
     * Report options form validity.
     * */
    async reportValidity() {
        const requiredElements = this.host.querySelectorAll('[required]');
        let pass = true;
        for (let i = 0; i < requiredElements.length; i++) {
            //if there is only one invalid option, return false
            if ('reportValidity' in requiredElements[i] && !requiredElements[i].reportValidity()) {
                pass = false;
            }
        }
        return pass;
    }
    /**
     * Return true if there is any out of stock options are selected and vise versa.
     * */
    async hasOutOfStockOption() {
        return this.selectedOptions.some(option => option.is_out) || (this.selectedSkus?.length && this.selectedSkus?.every(sku => this.outSkus.includes(sku)));
    }
    /**
     * Get selected options.
     * */
    async getSelectedOptions() {
        return this.selectedOptions;
    }
    /**
     * Get a specific option by its id.
     * */
    async getOption(option_id) {
        return this.optionsData.find(option => option.id === option_id);
    }
    // @ts-ignore
    invalidHandler(event, option) {
        const closestProductOption = event.target.closest('.s-product-options-option');
        if (!closestProductOption.classList.contains('s-product-options-option-error')) {
            closestProductOption.classList.add('s-product-options-option-error');
        }
        if (this.userInitiatedValidation && !salla.url.is_page('cart')) {
            const firstInvalidElement = this.host.querySelector('.s-product-options-option-error');
            if (firstInvalidElement === closestProductOption) {
                this.scrollToElement(closestProductOption);
            }
        }
    }
    scrollToElement(element) {
        if (element) {
            element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }
    changedHandler(event, option, fireChangeEvent = true) {
        const data = {
            event: event,
            option: option,
            detail: null,
            productId: this.productId
        };
        if (option.details) {
            const detail = option.details.find((detail) => {
                return Number(detail.id) === Number(event.target.value);
            });
            data.detail = detail;
        }
        if (option.type === 'country') {
            this.handleCountryOptionChange(event, data.detail);
        }
        const optionElement = event.target.closest('.s-product-options-option');
        if (event.target.value ||
            ((option.type === DisplayType.FILE || option.type === DisplayType.IMAGE) && event.type === 'added') ||
            (option.type === DisplayType.MAP && event.type === 'selected' && (event.target.lat && event.target.lng))) {
            setTimeout(() => {
                optionElement.classList.remove('s-product-options-option-error');
            }, 200);
        }
        if (option.type === DisplayType.DONATION) {
            salla.event.emit('product-options::donation-changed', {
                id: this.productId,
                price: event.target.value
            });
        }
        this.setSelectedSkus();
        this.handleRequiredMultipleOptions(option);
        const index = this.selectedOptions.findIndex(opt => opt.option_id === data.option.id);
        if (data.option.type === DisplayType.MULTIPLE_OPTIONS) {
            // Handle multiple selections
            const detailIndex = this.selectedOptions.findIndex(opt => opt.option_id === data.option.id && opt?.id === data.detail?.id);
            if (detailIndex > -1) {
                // If the option is already selected, remove it (unselect)
                this.selectedOptions.splice(detailIndex, 1);
            }
            else {
                // If the option is not selected, add it to the selectedOptions array
                this.selectedOptions.push({ ...data.detail, option_id: data.option.id });
            }
        }
        else {
            // Handle single selection
            if (!data.detail || Object.keys(data.detail).length === 0) {
                // If there is no value for the single-select, remove it from the selectedOptions array
                if (index > -1) {
                    this.selectedOptions.splice(index, 1);
                }
            }
            else {
                // If a value exists, update or add the selection
                if (index > -1) {
                    // Replace the existing selection with the new one
                    this.selectedOptions[index] = { ...data.detail, option_id: data.option.id };
                }
                else {
                    // If no selection exists for this input, add the new selection
                    this.selectedOptions.push({ ...data.detail, option_id: data.option.id });
                }
            }
        }
        // Update optionsData directly
        this.optionsData = this.optionsData.map(opt => {
            if (opt.id === data.option.id) {
                return {
                    ...opt,
                    details: opt.details.map(detail => ({
                        ...detail,
                        is_selected: data.option.type === DisplayType.MULTIPLE_OPTIONS
                            ? this.selectedOptions.some(selected => selected.id === detail.id)
                            : Number(detail.id) === Number(data.detail?.id),
                        value: data.detail?.value
                    }))
                };
            }
            return opt;
        });
        // Emit the event only if fireChangeEvent is true
        if (fireChangeEvent) {
            this.changed.emit(data);
            salla.event.emit('product-options::change', data);
        }
    }
    /**
     * loop throw all selected details, then get common sku, if it's only one, means we selected all of them;
     */
    setSelectedSkus() {
        this.selectedSkus = this.selectedOptions.map(detail => Object.keys(detail.skus_availability || {}))
            .reduce((p, c) => p.filter(e => c.includes(e)), []) // Initialize accumulator as an empty array
            .map(sku => Number(sku));
    }
    handleRequiredMultipleOptions(option) {
        if (option.type !== DisplayType.MULTIPLE_OPTIONS || !option.required) {
            return;
        }
        const optionContainer = this.host.querySelector(`[data-option-id="${option.id}"]`);
        const hasChecked = optionContainer.querySelectorAll('input:checked').length;
        optionContainer.querySelectorAll('input').forEach(input => input.toggleAttribute('required', !hasChecked));
    }
    getLatLng(value, type) {
        return value
            ? value.split(',')[type === 'lat' ? 0 : 1]
            : '';
    }
    getDisplayForType(option) {
        if (this[`${option.type}Option`]) {
            return this[`${option.type}Option`](option);
        }
        if (option.type === DisplayType.COLOR_PICKER) {
            return this.colorPickerOption(option);
        }
        if (option.type === DisplayType.MULTIPLE_OPTIONS) {
            return this.multipleOptions(option);
        }
        if (option.type === DisplayType.SINGLE_OPTION) {
            return this.singleOption(option);
        }
        // Handle radio type as single option for bundle products
        if (option.type === DisplayType.RADIO) {
            return this.radioOption(option);
        }
        if (option.type === DisplayType.DIGITAL_CARD_VALUE) {
            return this.digitalCardValuesOption(option);
        }
        if (option.type === DisplayType.COUNTRY) {
            return this.countryOption(option);
        }
        if (option.type === DisplayType.BOOKING && salla.url.is_page("cart")) {
            return h("salla-booking-field", { onInvalidInput: (e) => this.invalidHandler(e, option), option: option, productId: option.value });
        }
        salla.log(`Couldn't find options type(${option.type})üò¢`);
        return '';
    }
    getOptionShownWhen(option) {
        return option.visibility_condition
            ? { "data-show-when": `options[${option.visibility_condition.option}] ${option.visibility_condition.operator} ${option.visibility_condition.value}` }
            : {};
    }
    getAvailableDigitalCardSKUs(detail) {
        const digitalCardOption = this.optionsData.find(({ type }) => type === 'digital-code-value');
        if (!digitalCardOption)
            throw new Error('product-options:: No digital card options found');
        const outofStockSKUs = Object.keys(detail.skus_availability).filter(key => detail.skus_availability[key] === false);
        this.availableDigitalCardValues = digitalCardOption.details.filter((op) => {
            return !Object.keys(op.skus_availability).filter(SKU_key => outofStockSKUs.includes(SKU_key)).length;
        });
    }
    handleCountryOptionChange(event, detail) {
        event.stopImmediatePropagation();
        this.ignoreDefaultCardValue = true;
        const currentCardValue = this.host.querySelector("input[data-code-value]:checked");
        if (currentCardValue)
            currentCardValue.checked = false;
        const digitalCardOption = this.optionsData.find(({ type }) => type === 'digital-code-value');
        if (!digitalCardOption)
            throw new Error('product-options:: No digital card options found');
        this.getAvailableDigitalCardSKUs(detail);
    }
    getSelectedDigitalCardOptions(option) {
        const selectedOption = option.details.find(detail => detail.is_selected);
        const defaultOption = option.details.find(detail => !!detail.is_default) || option.details[0]; /*option.details[0] only applys for counrty options*/
        if (!['digital-code-value', 'country'].includes(option.type))
            return;
        return selectedOption || defaultOption;
    }
    //we need the cart Id for productOption Image
    async componentWillLoad() {
        if (salla.url.is_page("cart")) {
            this.disableCardValue = false;
            this.fillSelectedOptions();
        }
        if (this.config) {
            try {
                this.optionConfig = typeof this.config === 'string' ? JSON.parse(this.config) : this.config;
            }
            catch (error) {
                console.error('Failed to parse JSON in config prop:', error);
            }
        }
        const shouldSelectDefaultOption = this.optionsData.filter(({ type }) => ["country", "digital-card-value"].includes(type)).length > 0 && salla.url.is_page('cart');
        if (shouldSelectDefaultOption) {
            const countryOption = this.optionsData.find(option => option.type === 'country');
            const defaultSelection = countryOption && this.getSelectedDigitalCardOptions(countryOption);
            if (defaultSelection) {
                this.getAvailableDigitalCardSKUs(defaultSelection);
            }
        }
        this.outOfStockText = salla.lang.get('pages.products.out_of_stock');
        await salla.onReady();
        document.addEventListener("paste", this.handlePaste.bind(this));
        const needsCartId = (!salla.storage.get('cart.id') && this.optionsData.some(option => ['file', 'image'].includes(option.type)));
        return needsCartId ? salla.api.cart.getCurrentCartId(false, "salla-product-options") : null;
    }
    /**
     * This is a workaround for a bug in iOS 26 Safari, when pasting English text to RTL inputs, it adds extra text!!
     * To avoid any break changes, we will make it only work on these conditions:
     *  - content_copyright is on
     *  - Apple Pay is enabled (means it's iOS/safari)
     *  - Input is an input or textarea
     *  - Salla form control
     *  - Options array
     */
    handlePaste(event) {
        const target = event.target;
        if (!Salla.config.get('store.settings.content_copyright')
            || !Salla.helpers.hasApplePay()
            || !(target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement)
            || !target.classList.contains('s-form-control')
            || !target.name.startsWith('options[')) {
            return;
        }
        // Prevent default paste (to avoid Safari inserting extra content)
        event.preventDefault();
        // Read only the clipboard data
        const text = event.clipboardData?.getData("text") || "";
        // Insert it manually at cursor if you want
        const start = target.selectionStart;
        const end = target.selectionEnd;
        const newValue = target.value.slice(0, start) + text + target.value.slice(end);
        target.value = newValue;
        // Reset cursor position
        target.setSelectionRange(start + text.length, start + text.length);
    }
    hideDigitalCardsOptions(option) {
        return (this.disableCardValue && option.type === DisplayType.DIGITAL_CARD_VALUE && !salla.url.is_page("cart"));
    }
    render() {
        if (this.optionsData?.length === 0) {
            return;
        }
        return (h(Host, { class: "s-product-options-wrapper" }, h("salla-conditional-fields", null, this.optionsData.map((option) => h("div", { key: option.id, class: `s-product-options-option-container${option.visibility_condition || this.hideDigitalCardsOptions(option) ? ' hidden' : ''}`, "data-option-id": option.id, ...this.getOptionShownWhen(option) }, option.name === 'splitter' ?
            this.splitterOption()
            : h("div", { class: { "s-product-options-option": true, "s-product-options-option-booking": option.type === DisplayType.BOOKING && salla.url.is_page("cart") }, "data-option-type": option.type, "data-option-required": `${option.required}` }, h("label", { htmlFor: this.generateInputName(option.id), class: `s-product-options-option-label ${this.hideLabel(option) ? 's-product-options-option-label-hidden' : ''}` }, h("b", null, option.name, option.required && h("span", null, " * "), " "), h("small", null, option.placeholder)), h("div", { class: `s-product-options-option-content ${this.hideLabel(option) || (option.type === DisplayType.BOOKING && salla.url.is_page("cart")) ? 's-product-options-option-content-full-width' : ''}` }, this.getDisplayForType(option))))))));
    }
    generateUniqueKey(defaultValue) {
        const contextData = this.bundleContext;
        let baseKey = this.uniqueKey ? `${defaultValue}-${this.uniqueKey}` : defaultValue;
        if (contextData) {
            try {
                // Handle both string and object types
                const context = typeof contextData === 'string'
                    ? JSON.parse(contextData)
                    : contextData;
                const { sectionId, productId } = context;
                baseKey = `${baseKey}-bundle-${sectionId}-${productId}`;
            }
            catch (e) {
                // If parsing fails, just use the base key
            }
        }
        return baseKey;
    }
    /**
     * Generate the correct input name based on bundle context
     * @param optionId - The option ID
     * @returns The formatted input name
     */
    generateInputName(optionId) {
        const contextData = this.bundleContext;
        if (contextData) {
            try {
                // Handle both string and object types
                const context = typeof contextData === 'string'
                    ? JSON.parse(contextData)
                    : contextData;
                const { sectionId, productId } = context;
                return `bundle[${sectionId}][${productId}][options][${optionId}]`;
            }
            catch (e) {
                return `options[${optionId}]`;
            }
        }
        return `options[${optionId}]`;
    }
    fillSelectedOptions() {
        this.selectedOptions = this.optionsData.reduce((acc, opt) => {
            const selectedDetails = opt.details.filter(detail => detail.is_selected);
            const mappedDetails = selectedDetails.map(detail => ({
                ...detail,
                option_id: opt.id
            }));
            return acc.concat(mappedDetails);
        }, []);
    }
    componentDidLoad() {
        if (this.optionsData?.length === 0 && !this.optionsData.some(option => option.type === DisplayType.DONATION)) {
            return;
        }
        const selectedDonationOption = this.optionsData.find(option => option.type === DisplayType.DONATION)?.details.find(detail => detail.is_selected);
        if (!selectedDonationOption) {
            return;
        }
        setTimeout(() => {
            salla.event.emit('product-options::donation-changed', {
                id: this.productId,
                price: selectedDonationOption.additional_price
            });
        }, 1000);
    }
    /**
     * Enable user-initiated validation mode so invalid fields will scroll into view
     */
    async enableUserInitiatedValidation() {
        this.userInitiatedValidation = true;
    }
    /**
     * Validate options and trigger scrolling to the first invalid option if any
     */
    async validateAndScroll() {
        await this.enableUserInitiatedValidation();
        return this.reportValidity();
    }
    //@ts-ignore
    donationOption(option, product) {
        return h("div", { class: "s-product-options-donation-wrapper" }, option.donation?.can_donate ? [
            option.donation ?
                h("div", { key: option.id, class: "s-product-options-donation-progress" }, h("salla-progress-bar", { donation: option.donation }))
                : '',
            option.details.length ?
                [h("h4", { key: option.id }, this.selectAmount), h("div", { key: option.id, class: "s-product-options-donation-options" }, option.details.map((detail, i) => h("div", { key: option.id, class: "s-product-options-donation-options-item" }, h("input", { id: this.generateUniqueKey(`donation-option-${i}`), type: "radio", name: "donating_option", checked: detail.is_selected, value: detail.additional_price, onChange: e => this.handleDonationOptions(e, detail, 'option') }), h("label", { htmlFor: this.generateUniqueKey(`donation-option-${i}`) }, h("span", { innerHTML: salla.money(detail.name) })))), option.donation?.custom_amount_enabled ?
                        h("div", { class: "s-product-options-donation-options-item" }, h("input", { id: this.generateUniqueKey("donation-option-custom"), type: "radio", name: "donating_option", value: "custom", onChange: e => this.handleDonationOptions(e, 'custom', 'option') }), h("label", { htmlFor: this.generateUniqueKey("donation-option-custom") }, h("span", null, " ", this.selectDonationAmount, " ")))
                        : '')] : '',
            h("div", { key: option.id, class: { "s-product-options-donation-input-group": true, "shown": !option.details.length || (option.details.length && this.isCustomDonation) } }, h("input", { type: "text", id: "donating-amount", name: "donation_amount", class: "s-form-control", ref: el => { this.donationInput = el; }, value: option.details.length
                    && option.details.some(detail => detail.is_selected)
                    ? option.details.find(detail => detail.is_selected).additional_price
                    : option.value,
                // required
                placeholder: option.placeholder, onInput: e => this.handleDonationOptions(e, 'custom', 'input'), onBlur: e => this.changedHandler(e, option), onInvalid: (e) => this.invalidHandler(e, option) }), h("span", { class: "s-product-options-donation-amount-currency" }, salla.config.currency(salla.config.get('user.currency_code')).symbol))
        ] :
            this.getExpireDonationMessage(option));
    }
    fileUploader(option, additions = null) {
        return h("salla-file-upload", { ...(additions || {}), "payload-name": "file", value: option.value, "instant-upload": true, name: this.generateInputName(option.id), required: !option.visibility_condition && option.required, height: "120px", onAdded: (e) => this.changedHandler(e, option), url: salla.cart.api.getUploadImageEndpoint(), "form-data": { cart_item_id: this.productId, product_id: this.productId }, onInvalidInput: (e) => this.invalidHandler(e, option), class: { "s-product-options-image-input": true, required: option.required } }, h("div", { class: "s-product-options-filepond-placeholder" }, h("span", { class: "s-product-options-filepond-placeholder-icon", innerHTML: additions.accept?.split(',').every(type => type.includes('image'))
                ? CameraIcon
                : FileIcon }), h("p", { class: "s-product-options-filepond-placeholder-text" }, salla.lang.get('common.uploader.drag_and_drop')), h("span", { class: "filepond--label-action" }, salla.lang.get('common.uploader.browse'))));
    }
    //@ts-ignore
    imageOption(option) {
        return this.fileUploader(option, { accept: 'image/png,image/jpeg,image/jpg,image/gif' });
    }
    //@ts-ignore
    fileOption(option) {
        const types = option.details.map(detail => this.fileTypes[detail.name]).filter(Boolean);
        return types?.length
            ? this.fileUploader(option, { accept: types.join(',') })
            : 'File types not selected.';
    }
    // TODO: (ONLY FOR TESTING!) find a better way to make it testable, e.g. wrap it with a unique class like textOption
    //@ts-ignore
    numberOption(option) {
        return h("input", { type: "text", value: option.value, class: "s-form-control", required: !option.visibility_condition && option.required, name: this.generateInputName(option.id), placeholder: option.placeholder, onBlur: e => this.changedHandler(e, option), onInvalid: (e) => this.invalidHandler(e, option), onInput: e => salla.helpers.inputDigitsOnly(e.target) });
    }
    //@ts-ignore
    splitterOption() {
        return h("div", { class: "s-product-options-splitter" });
    }
    //@ts-ignore
    textOption(option) {
        return h("div", { class: "s-product-options-text" }, h("input", { type: "text", value: option.value, maxLength: option?.length, class: 's-form-control', required: !option.visibility_condition && option.required, name: this.generateInputName(option.id), placeholder: option.placeholder, onInvalid: (e) => this.invalidHandler(e, option), onChange: e => this.changedHandler(e, option), onInput: e => this.changedHandler(e, option) }));
    }
    //@ts-ignore
    textareaOption(option) {
        //todo::remove mt-1 class, and if it's okay to remove the tag itself will be great
        return h("div", { class: "s-product-options-textarea" }, h("div", { class: "mt-1" }, h("textarea", { rows: 4, value: option.value, maxLength: option?.length, class: "s-form-control", required: !option.visibility_condition && option.required, id: this.generateUniqueKey(option.id.toString()), name: this.generateInputName(option.id), placeholder: option.placeholder, onInvalid: (e) => this.invalidHandler(e, option), onChange: (e) => this.changedHandler(e, option), onInput: (e) => this.changedHandler(e, option) })));
    }
    //@ts-ignore
    mapOption(option) {
        return h("salla-map", { zoom: 15, lat: this.getLatLng(option.value, 'lat'), lng: this.getLatLng(option.value, 'lng'), name: this.generateInputName(option.id), searchable: true, required: option.required, onInvalidInput: (e) => this.invalidHandler(e, option), onSelected: e => this.changedHandler(e, option) });
    }
    colorPickerOption(option) {
        return h("salla-color-picker", { onSubmitted: e => this.changedHandler(e, option), name: this.generateInputName(option.id), required: !option.visibility_condition && option.required, onInvalidInput: (e) => this.invalidHandler(e, option), color: option.value });
    }
    /**
     * ============= Date Time options =============
     */
    //@ts-ignore
    timeOption(option) {
        return h("salla-datetime-picker", { noCalendar: true, enableTime: true, dateFormat: "h:i K", value: option.value, placeholder: option.name, required: !option.visibility_condition && option.required, name: this.generateInputName(option.id), class: "s-product-options-time-element", onInvalidInput: (e) => this.invalidHandler(e, option), onPicked: e => this.changedHandler(e, option) });
    }
    //@ts-ignore
    dateOption(option) {
        //todo:: consider date-range @see https://github.com/SallaApp/theme-raed/blob/master/src/assets/js/partials/product-options.js#L8-L23
        return h("div", { class: "s-product-options-date-element" }, h("salla-datetime-picker", { value: option.value, placeholder: option.name, required: !option.visibility_condition && option.required, minDate: new Date(), name: this.generateInputName(option.id), onInvalidInput: (e) => this.invalidHandler(e, option), onPicked: e => this.changedHandler(e, option) }));
    }
    //@ts-ignore
    datetimeOption(option) {
        //todo:: consider date-range @see https://github.com/SallaApp/theme-raed/blob/master/src/assets/js/partials/product-options.js#L8-L23
        return h("div", { class: "s-product-options-datetime-element" }, h("salla-datetime-picker", { enableTime: true, value: option.value, dateFormat: "Y-m-d G:i:K", placeholder: option.name, required: !option.visibility_condition && option.required, name: this.generateInputName(option.id), maxDate: option.to_date_time, minDate: option.from_date_time, onInvalidInput: (e) => this.invalidHandler(e, option), onPicked: e => this.changedHandler(e, option) }));
    }
    /**
     * ============= Advanced options =============
     */
    getOptionDetailName(detail, outOfStock = true, optionType) {
        let detailName;
        if (optionType && optionType === DisplayType.COLOR) {
            detailName = detail.name
                + ((outOfStock && this.isOptionDetailOut(detail) && !salla.url.is_page("cart")) && !this.hideOutLabel ? ` <br/> <p> ${this.outOfStockText} </p>` : '')
                + (detail.additional_price ? ` <p> (${salla.money(detail.additional_price, false)}) </p>` : '');
        }
        if (!detailName) {
            detailName = detail.name
                + ((outOfStock && this.isOptionDetailOut(detail) && !salla.url.is_page("cart")) && !this.hideOutLabel ? ` - ${this.outOfStockText}` : '')
                + (detail.additional_price ? ` (${salla.money(detail.additional_price, false)})` : '');
        }
        //Some merchants adding price to the names of the options,
        //and because we are using this inside select option, we need to replace the html currency symbol with the store currency symbol
        return detailName.replace('<i class=sicon-sar></i>', salla.config.currency()?.symbol || 'ÿ±.ÿ≥');
    }
    isOptionDetailOut(detail) {
        if (detail.is_out || !detail.skus_availability || !this.selectedSkus?.length) {
            return detail.is_out;
        }
        const isDetailSelected = this.selectedOptions.filter(option => option.id === detail.id).length;
        //if the current options is the only selected option, so we are sure that it's not out, because there is no other options selected yet
        if (isDetailSelected && this.selectedOptions.length === 1) {
            return false;
        }
        //if current details has sku in the possible outSkus it's out for sure
        if (isDetailSelected) {
            //here we will get the possible outSkus for current selected options
            const outSelectableSkus = this.selectedSkus.filter(sku => this.outSkus.includes(sku));
            return Object.keys(detail.skus_availability).some(sku => outSelectableSkus.includes(Number(sku)));
        }
        return this.selectedOptions.some(option => option.is_out && option.option_id !== detail.option_id);
    }
    /**
     * Renders a single input element (radio or checkbox) for an option detail.
     * @param type - The type of input element ('radio' or 'checkbox').
     * @param detail - The detail object representing an option detail.
     * @param option - The parent option object containing the details.
     * @param isRequired - Indicates if the input is required based on the option's rules.
     * @param name - The name attribute for the input element.
     * @returns HTMLElement - A labeled input element.
     */
    renderInput(type, detail, option, isRequired, name, buttonStyle) {
        const id = this.generateUniqueKey(`${type}-${option.id}-${detail.id}`);
        const isDisabled = this.isOptionDetailOut(detail);
        return (h("label", { class: {
                "s-product-options-disabled": isDisabled,
            } }, h("input", { id: id, type: type, name: name, value: detail.id, disabled: isDisabled, required: isRequired, checked: detail.is_selected, onInvalid: (e) => this.invalidHandler(e, option), onChange: (e) => this.changedHandler(e, option) }), h("div", { class: { "s-product-options-grid-mode-span": buttonStyle, "s-product-options-disabled": isDisabled } }, this.getOptionDetailName(detail))));
    }
    /**
     * Renders a collection of input elements for all details of an option.
     * @param type - The type of input elements ('radio' or 'checkbox').
     * @param option - The parent option object containing the details.
     * @param isRequired - Indicates if the inputs are required based on the option's rules.
     * @returns HTMLElement[] - An array of labeled input elements.
     */
    renderOptionDetails(type, option, isRequired, buttonStyle = false) {
        const baseName = this.generateInputName(option.id);
        const name = type === 'radio' ? baseName : `${baseName}[]`;
        return option?.details.map((detail) => this.renderInput(type, detail, option, isRequired, name, buttonStyle));
    }
    /**
     * Renders a dropdown (select) element for a single-option selection.
     * @param option - The parent option object.
     * @returns HTMLElement - A select dropdown element with all option details.
     */
    renderSelect(option) {
        return (h("div", null, h("select", { name: this.generateInputName(option.id), required: !option.visibility_condition && option.required, class: "s-form-control", onInvalid: (e) => this.invalidHandler(e, option), onChange: (e) => this.changedHandler(e, option) }, h("option", { value: "" }, option.placeholder), option?.details.map((detail) => (h("option", { key: detail.id, value: detail.id, disabled: this.canDisabled && this.isOptionDetailOut(detail), selected: detail.is_selected }, this.getOptionDetailName(detail)))))));
    }
    /**
     * Renders a grid-based layout for option inputs (radio or checkbox).
     * @param type - The type of input elements ('radio' or 'checkbox').
     * @param option - The parent option object containing the details.
     * @param isRequired - Indicates if the inputs are required based on the option's rules.
     * @returns HTMLElement - A grid-based container with input elements.
     */
    renderButtonStyle(type, option, isRequired) {
        return (h("div", { class: "s-product-options-grid-mode" }, this.renderOptionDetails(type, option, isRequired, true)));
    }
    /**
     * Renders a single-option selection, either as a grid or dropdown, based on configuration.
     * @param option - The parent option object.
     * @returns HTMLElement - The rendered single-option element.
     */
    singleOption(option) {
        const buttonStyle = this.optionConfig?.['single-option']?.type === 'button';
        const isRequired = !option.visibility_condition && option.required;
        return buttonStyle
            ? this.renderButtonStyle('radio', option, isRequired)
            : this.renderSelect(option);
    }
    /**
     * Renders a multiple-option selection, either as a grid or list, based on configuration.
     * @param option - The parent option object.
     * @returns HTMLElement - The rendered multiple-option element.
     */
    multipleOptions(option) {
        const buttonStyle = this.optionConfig?.['multiple-option']?.type === 'button';
        const isRequired = option.required &&
            !option.details.some((detail) => detail.is_selected) &&
            !option.visibility_condition;
        return buttonStyle
            ? this.renderButtonStyle('checkbox', option, isRequired)
            : (h("div", { class: {
                    's-product-options-multiple-options-wrapper': true,
                    required: option.required,
                } }, this.renderOptionDetails('checkbox', option, isRequired)));
    }
    /**
     * Renders a radio option selection (used for bundle products).
     * This is essentially the same as single option but with explicit radio handling.
     * @param option - The parent option object.
     * @returns HTMLElement - The rendered radio option element.
     */
    radioOption(option) {
        // Radio options behave the same as single options
        return this.singleOption(option);
    }
    //@ts-ignore
    colorOption(option) {
        return (h("fieldset", { class: "s-product-options-colors-wrapper" }, option?.details.map((detail) => (h("div", { class: "s-product-options-colors-item", key: detail.id }, h("input", { type: "radio", value: detail.id, required: !option.visibility_condition && option.required, checked: detail.is_selected, name: this.generateInputName(option.id), disabled: this.canDisabled && this.isOptionDetailOut(detail), id: this.generateUniqueKey(`color-${this.productId}-${option.id}-${detail.id}`), onInvalid: (e) => this.invalidHandler(e, option), onChange: (e) => this.changedHandler(e, option) }), h("label", { htmlFor: this.generateUniqueKey(`color-${this.productId}-${option.id}-${detail.id}`) }, h("span", { style: { backgroundColor: detail.color } }), h("div", { innerHTML: this.getOptionDetailName(detail, true, option.type) })))))));
    }
    //@ts-ignore
    thumbnailOption(option) {
        return h("div", { class: "s-product-options-thumbnails-wrapper" }, option.details.map((detail) => {
            return h("div", { key: detail.id }, h("input", { type: "radio", value: detail.id, "data-itemid": detail.id, required: !option.visibility_condition && option.required, checked: detail.is_selected, name: this.generateInputName(option.id), "data-img-id": detail.option_value, disabled: this.canDisabled && this.isOptionDetailOut(detail), id: this.generateUniqueKey(`option_${this.productId}-${option.id}_${detail.id}`), onInvalid: (e) => this.invalidHandler(e, option), onChange: (e) => this.changedHandler(e, option) }), h("label", { htmlFor: this.generateUniqueKey(`option_${this.productId}-${option.id}_${detail.id}`), "data-img-id": detail.option_value, class: "go-to-slide" }, h("img", { "data-src": detail.image, src: detail.image, title: detail.name, alt: detail.name }), h("span", { innerHTML: IconVerified, class: "s-product-options-thumbnails-icon" }), this.isOptionDetailOut(detail) ?
                [
                    h("small", { key: detail.id, class: "s-product-options-thumbnails-stock-badge" }, this.outOfStockText),
                    this.canDisabled ? h("div", { key: detail.id, class: "s-product-options-thumbnails-badge-overlay" }) : '',
                ]
                : ''), h("p", null, this.getOptionDetailName(detail, false), " "));
        }));
    }
    // Digital card options
    digitalCardValuesOption(option) {
        return h("div", { class: "s-product-options-digital-card-wrapper" }, this.availableDigitalCardValues.length > 0 ? this.availableDigitalCardValues.map((detail) => {
            const id = String(detail.id);
            return h("label", { htmlFor: this.generateUniqueKey(id.toString()), key: id, class: "s-product-options-digital-card-option" }, h("input", { type: "radio", "data-code-value": true, class: "s-form-control s-product-options-digital-card-input", value: detail.id, name: this.generateInputName(option.id), id: this.generateUniqueKey(id.toString()), required: !option.visibility_condition && option.required, onInvalid: (e) => this.invalidHandler(e, option), ...(!this.ignoreDefaultCardValue ? { defaultChecked: this.getSelectedDigitalCardOptions(option)?.id === detail.id } : {}) }), h("span", null, detail.name, " ", salla.config?.currency()?.symbol));
        })
            : h("div", { class: "s-product-options-digital-card-out-of-stock" }));
    }
    countryOption(option) {
        return h("div", { class: "s-product-options-digital-card-wrapper" }, option.details.map((detail) => {
            return h("label", { htmlFor: this.generateUniqueKey(detail.id.toString()), key: detail.id, class: { "s-product-options-digital-card-option": true, "s-product-options-digital-card-option-stock-out": detail.is_out } }, h("input", { id: this.generateUniqueKey(detail.id.toString()), type: "radio", class: "s-form-control s-product-options-digital-card-input", value: detail.id, name: this.generateInputName(option.id), disabled: detail.is_out, required: !option.visibility_condition && option.required, onInvalid: (e) => this.invalidHandler(e, option), onChange: e => this.changedHandler(e, option), onClick: () => { this.disableCardValue = false; }, ...(salla.url.is_page("cart") ? { defaultChecked: this.getSelectedDigitalCardOptions(option)?.id === detail.id } : {}) }), h("img", { loading: 'lazy', alt: detail.code, height: 24, width: 24, class: "s-product-options-country-flag", src: `https://cdn.assets.salla.network/prod/admin/cp/assets/flags/1x1/${String(detail.code).toLocaleLowerCase()}.svg` }), h("span", null, detail.name));
        }));
    }
    get host() { return getElement(this); }
};
SallaProductOptions.style = sallaProductOptionsCss;

var PencilRuler = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>pencil-ruler</title>
<path d="M3.057 11.609c0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391l6.667-6.667c0.521-0.521 0.521-1.364 0-1.885l-1.285-1.285c-1.143-1.143-2.661-1.772-4.276-1.772-1.616 0-3.135 0.629-4.276 1.772-1.143 1.141-1.772 2.66-1.772 4.276 0 1.615 0.629 3.135 1.772 4.276zM3.657 3.657c1.277-1.277 3.504-1.277 4.781 0l0.343 0.343-4.781 4.781-0.343-0.343c-0.639-0.639-0.991-1.488-0.991-2.391s0.352-1.752 0.991-2.391zM29.317 20.972c-0.2-0.707-0.932-1.119-1.645-0.921-0.709 0.2-1.121 0.937-0.921 1.645l1.987 7.041-7.041-1.987c-0.707-0.195-1.444 0.213-1.645 0.921-0.2 0.708 0.212 1.445 0.921 1.645l9.333 2.633c0.119 0.032 0.24 0.049 0.361 0.049 0.349 0 0.689-0.137 0.943-0.391 0.341-0.341 0.472-0.84 0.34-1.305zM31.609 8.772l-8.381-8.381c-0.5-0.5-1.385-0.5-1.885 0l-8.171 8.171s-0.001 0-0.001 0.001 0 0.001-0.001 0.001l-4.607 4.607s0 0-0.001 0 0 0 0 0.001l-8.171 8.171c-0.251 0.249-0.391 0.588-0.391 0.943 0 0.353 0.14 0.693 0.391 0.943l8.381 8.381c0.249 0.251 0.589 0.391 0.943 0.391s0.693-0.14 0.943-0.391l20.952-20.952c0.521-0.521 0.521-1.365 0-1.885zM9.715 28.781l-6.495-6.496 1.676-1.676 1.851 1.851c0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391c0.521-0.521 0.521-1.364 0-1.885l-1.851-1.851 2.724-2.724 3.008 3.008c0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391c0.521-0.521 0.521-1.364 0-1.885l-3.008-3.008 2.724-2.724 1.851 1.851c0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391c0.521-0.52 0.521-1.364 0-1.885l-1.851-1.851 2.724-2.724 3.008 3.008c0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391c0.521-0.521 0.521-1.365 0-1.885l-3.008-3.008 1.677-1.677 6.496 6.496z"></path>
</svg>
`;

const sallaProductSizeGuideCss = "";

const SallaProductSizeGuide = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.hasError = false;
        salla.event.on('size-guide::open', (product_id) => this.open(product_id));
        salla.lang.onLoaded(() => {
            this.placeholder_title = salla.lang.get('pages.products.size_guide_placeholder');
            this.placeholder_description = salla.lang.get('pages.products.size_guide_placeholder_info');
            this.modal_title = salla.lang.get('pages.products.size_guides');
        });
    }
    /**
     * Show the size-guide modal window
     */
    async open(product_id) {
        this.modal.setTitle(this.modal_title);
        this.modal.open();
        return await salla.api.withoutNotifier(() => salla.product.getSizeGuides(product_id))
            .then((response) => {
            this.guides = response.data;
        })
            .catch(e => {
            console.log(e);
            this.hasError = true;
            this.placeholder_description = e.response?.data?.error?.message || e.response?.data;
        })
            .finally(() => this.modal.stopLoading());
    }
    /**
     *
     * Hide the size-guide modal window
     */
    async close() {
        return this.modal.close();
    }
    showPlaceholder() {
        return h("salla-placeholder", { alignment: "center", iconSize: "xl" }, h("div", { slot: "title" }, this.placeholder_title), h("div", { slot: "description" }, this.placeholder_description));
    }
    render() {
        return (h("salla-modal", { key: 'f80606d8b6e1e950c87209ca4e195c92f70dc341', class: "s-product-size-guide-wrapper", id: 'salla-product-size-guide-modal', isLoading: true, "has-skeleton": true, width: "md", ref: modal => this.modal = modal }, h("span", { key: '245688c24b70279566b0f7c51c7bf924ca5196c0', slot: 'icon', class: "s-product-size-guide-header-icon", innerHTML: PencilRuler }), h("div", { key: '9dc9b4aa8dea0599dbc78f5821e36bc4c600c6aa', slot: "loading" }, h("div", { key: 'fca84d9c2c5fa20ac446270c1c68c4ccda16dd77', class: "s-product-size-guide-skeleton" }, h("salla-skeleton", { key: '0f036371c9b42314beb4e2c1f308a99e2b068ab8', height: '15px', width: '25%' }), h("div", { key: 'a9059b864fddf26b6e15869cab013e793966907e', class: "s-product-size-guide-skeleton-header" }, h("salla-skeleton", { key: '34e188b1ff7e0b5e24df84d1b14df2b2255fc9eb', height: '40px' }), h("salla-skeleton", { key: '38653491fd73cf4d66cb87658b8121f88130e52e', height: '40px' }), h("salla-skeleton", { key: 'a8c3b3cc039fbbb8796c611f4485d889c94e632a', height: '40px' }), h("salla-skeleton", { key: '2de2d63a1a56a58f7f1bef92c46843683528ee1a', height: '40px' })), h("div", { key: 'cf0b08cb85830fcec4dd82140c89b6d009e1bc74', class: "s-product-size-guide-skeleton-content" }, h("salla-skeleton", { key: '402ed4292bb79e839316440ed985b1caed102602', height: '15px', width: '25%' }), h("salla-skeleton", { key: '88f0019d79ea72ef7748a5c04b7a8364c1160b92', height: '10px', width: '75%' }), h("salla-skeleton", { key: '10d7879c306d7185092c9e9aa0d407d2bb57519e', height: '10px', width: '50%' }), h("salla-skeleton", { key: '7b2d00c4c8000083b79d93466ed07828d61b6fbd', height: '10px', width: '75%' }), h("salla-skeleton", { key: '5d33b9848d9bccf34bb5f4a93ad99889fe1ee69f', height: '10px', width: '100%' }), h("salla-skeleton", { key: '6e49c074a8611a819814d17829466b983a419196', height: '10px', width: '25%' }), h("salla-skeleton", { key: '0fb70ed844efeda0d3c2ba348e14d1469a7b279b', height: '10px', width: '60%' }), h("salla-skeleton", { key: '5e55cb90aba76662377efccfef4a84fe0f64c341', height: '10px', width: '45%' }), h("salla-skeleton", { key: '058b96e3db12454ddfced543d6ecbdf0c38ac3dd', height: '10px', width: '30%' })))), h("slot", { key: 'e9eef25bce60cbb1dd48b3d8bc1ebda2305acda0', name: "header" }), !this.hasError && !!this.guides ?
            [
                h("salla-tabs", null, this.guides.map((guide) => h("salla-tab-header", { slot: "header", name: guide.name }, h("span", null, guide.name))), this.guides.map((guide) => h("salla-tab-content", { slot: "content", name: guide.name }, h("div", { innerHTML: guide.description }))))
            ]
            : this.showPlaceholder(), h("slot", { key: '6b8bebc72d4a7baea765b1e5a6d4a81862206f94', name: "footer" })));
    }
    get host() { return getElement(this); }
};
SallaProductSizeGuide.style = sallaProductSizeGuideCss;

const sallaProductsListCss = "";

const SallaProductsList = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.productsFetched = createEvent(this, "productsFetched");
        /**
         * Autoload next page when scroll
         */
        this.autoload = false;
        /**
         * Custom Card Component for the Salla Products List.
         *
         * This component allows you to customize the appearance of individual product cards within a Salla Products List.
         *
         * @example
         * <salla-products-list product-card-component="my-custom-card-style1" ...
         * <salla-products-list product-card-component="my-custom-card-style2" ...
         */
        this.productCardComponent = 'custom-salla-product-card';
        // State
        this.page = 1;
        this.placeholderText = salla.lang.get('pages.categories.no_products');
        this.endOfText = salla.lang.get('common.elements.end_of_content');
        this.failedLoadMore = salla.lang.get('common.elements.failed_to_load_more');
        this.currentPage = salla.config.get('page');
        this.filtersSnapshot = [];
        this.lastViewedProductKey = "lastViewedProductId";
        this.filtersKey = "filters";
        this.infiniteScrollStateKey = "infiniteScrollState";
        this.prevCategoryIdKey = "prevCategoryId";
        this.isProcessing = false; // Tracks if we are processing data
        this.scrollTimeout = null;
        this.specialPagesWithoutIds = {
            'product.index.latest': 'latest',
            'product.index.offers': 'offers',
            'product.index.search': 'search',
            'product.index.sales': 'sales'
        };
        //TODO:: check why `this.includes` not working!!
        this.includes = Helper.parseJson(this.includes || this.host.getAttribute('includes'));
        if (!Array.isArray(this.includes)) {
            this.includes = null;
        }
        Helper.setIncludes(this.includes);
        salla.lang.onLoaded(() => {
            this.placeholderText = salla.lang.get('pages.categories.no_products');
            this.endOfText = salla.lang.get('common.elements.end_of_content');
            this.failedLoadMore = salla.lang.get('common.elements.failed_to_load_more');
            this.currentPage = salla.config.get('page');
        });
    }
    connectedCallback() {
        //Override browser scroll restoration default behaviour
        if ("scrollRestoration" in history)
            history.scrollRestoration = "manual";
        // required for scroll restoration case when the component loads before DOM content is completed (slow internet bandwidth /low device specs)
        window.addEventListener('DOMContentLoaded', this.scrollToLastViewedProduct.bind(this));
        salla.event.on('salla-filters::changed', filters => this.setFilters(filters));
    }
    disconnectedCallback() {
        window.removeEventListener('DOMContentLoaded', this.scrollToLastViewedProduct);
    }
    /**
     * Set parsed filters data from URI
     * @param filters
     */
    async setFilters(filters) {
        if (!filters || JSON.stringify(filters) === JSON.stringify(this.parsedFilters)) {
            return;
        }
        window.scrollTo({ top: 0, behavior: 'smooth' });
        // Create a deep copy of the filters object to avoid mutating the original object
        this.parsedFilters = JSON.parse(JSON.stringify(filters));
        this.filtersSnapshot = this.parsedFilters;
        if (this.currentPage?.slug == "product.index" && this.parsedFilters && this.parsedFilters.category_id) {
            this.currentCategoryIdFilter = [this.parsedFilters.category_id];
        }
        return this.reload();
    }
    /**
     * Reload the list of products (entire content of the component).
     */
    async reload() {
        !this.autoload && this.loadMoreWrapper && (this.loadMoreWrapper.style.display = 'none');
        this.hasInfiniteScroll && salla.infiniteScroll.destroy(this.infiniteScroll);
        this.buildNextPageUrl();
        // TODO: this is problematic in testing, for the time being it's been resolved like this
        this.wrapper.innerHTML = '';
        if (this.hasInfiniteScroll) {
            this.init();
        }
        else {
            this.getInitialData();
        }
        // Special case for the placeholder loader
        if (this.showPlaceholder) {
            this.showPlaceholder = false;
            this.placeholderLoader = document.createElement('div');
            this.placeholderLoader.classList.add('s-products-list-loading-wrapper');
            this.placeholderLoader.style.display = 'inherit';
            this.placeholderLoader.innerHTML = `<span class="s-button-loader s-button-loader-center s-infinite-scroll-btn-loader"></span>`;
            this.host.insertAdjacentElement('afterend', this.placeholderLoader);
        }
    }
    isFilterable() {
        return salla.config.get('store.settings.product.filters') && this.filtersResults;
    }
    isSourceWithoutValue() {
        return ['offers', 'latest', 'sales', 'wishlist', 'top-rated'].includes(this.getSource());
    }
    animateItems() {
        anime({
            targets: 'salla-products-list salla-product-card',
            opacity: [0, 1],
            duration: 1200,
            translateY: [20, 0],
            delay: function (_el, i) {
                return i * 100;
            },
        });
    }
    initBaseNextPageUrl(source) {
        this.nextPage = salla.url.api(`products?source=${source}`);
        if (this.includes?.length) {
            this.nextPage += `&includes[]=${this.includes.join('&includes[]=')}`;
        }
        if (this.limit) {
            this.nextPage += `&per_page=${this.limit > 32 ? 32 : this.limit}`;
        }
        if (this.sortBy) {
            this.nextPage += `&sort=${this.sortBy}`;
        }
        if (salla.config.get('theme.mode') === 'preview') {
            this.nextPage += `&use_username_url=1`;
        }
        this.nextPage += '&filterable=1';
        for (const [key, value] of Object.entries(this.parsedFilters || {})) {
            if (["string", "number"].includes(typeof value)) {
                // @ts-ignore
                this.nextPage += `&filters[${encodeURIComponent(key)}]=${encodeURIComponent(value)}`;
            }
            else if (Array.isArray(value)) {
                value.forEach(item => this.nextPage += `&filters[${encodeURIComponent(key)}][]=${encodeURIComponent(item)}`);
            }
            else if (typeof value === 'object') {
                for (const [k, v] of Object.entries(value)) {
                    this.nextPage += `&filters[${encodeURIComponent(key)}][${encodeURIComponent(k)}]=${encodeURIComponent(v)}`;
                }
            }
        }
    }
    buildNextPageUrl() {
        let source = this.getSource();
        if (source === 'json') {
            return;
        }
        const snapshot = sessionStorage.getItem(this.infiniteScrollStateKey);
        if (snapshot) {
            const { nextPage } = JSON.parse(snapshot);
            if (!nextPage) {
                return;
            }
        }
        this.initBaseNextPageUrl(source);
        if (this.isSourceWithoutValue()) {
            return;
        }
        if (['search', 'related', 'landing-page'].includes(source)) {
            this.nextPage += `&source_value=${this.getSourceValue()}`;
            return;
        }
        try {
            this.nextPage += `&source_value[]=${this.getSourceValue().join('&source_value[]=')}`;
        }
        catch (e) {
            salla.logger.warn(`source-value prop should be array of ids ex source-value="[1,2,3]" for the source [${source}]`);
            this.sourceValueIsValid = false;
        }
    }
    loading(isLoading = true, isBtn = false) {
        if (!isLoading) {
            if (!this.autoload) {
                this.btnLoader && (this.btnLoader.style.display = 'none');
            }
            this.loader && (this.loader.style.display = 'none');
        }
        else {
            let currentLoader = isBtn && !this.autoload ? this.btnLoader : this.loader;
            currentLoader && (currentLoader.style.display = 'inherit');
        }
    }
    getItemHTML(product) {
        //as a request they don't want to let the user to open the product details
        //todo:: find a better way to handle this request
        this.getSource() === 'landing-page' && (product.url = '');
        const customComponentTag = this.hasCustomComponent ? this.productCardComponent : 'salla-product-card';
        const productCard = document.createElement(customComponentTag);
        productCard.product = product;
        this.applyLandingPageStyles(productCard);
        this.applyHorizontalCardStyles(productCard);
        // Attach click event listener to save the current products snapshot
        productCard.addEventListener('click', (event) => {
            if (!this.hasInfiniteScroll) {
                return;
            }
            const target = event.target;
            // Check if the clicked element is an anchor or inside an anchor
            const anchor = target.closest('a');
            if (anchor) {
                this.takeStateSnapshot();
                sessionStorage.setItem(this.lastViewedProductKey, product.id);
            }
        });
        return productCard;
    }
    applyLandingPageStyles(productCard) {
        if (this.getSource() === 'landing-page' && !this.hasCustomComponent) {
            productCard.toggleAttribute('hide-add-btn', true);
            productCard.classList.add('s-product-card-fit-height');
        }
    }
    applyHorizontalCardStyles(productCard) {
        if (!this.horizontalCards) {
            return;
        }
        productCard.setAttribute('horizontal', true);
        if (!this.hasCustomComponent) {
            productCard.setAttribute('shadow-on-hover', true);
        }
    }
    waitForResizing(element) {
        let timeout = null;
        return new Promise((resolve) => {
            const resizeObserver = new ResizeObserver(() => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    resizeObserver.disconnect();
                    resolve(null);
                }, 160); // Adjust delay as needed for your layout
            });
            resizeObserver.observe(element); // Watch the body or a specific container
        });
    }
    waitForLayoutStable(element) {
        let timeout = null;
        return new Promise((resolve) => {
            const observer = new MutationObserver(() => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    observer.disconnect();
                    resolve(null);
                }, 160); // Adjust delay as needed for your layout
            });
            // Observe changes to the entire body, including child nodes and attributes.
            observer.observe(element, {
                childList: true,
                subtree: true,
                attributes: true,
            });
        });
    }
    async waitForStableLayout(element) {
        // Wait for DOM mutations and layout shifts to stabilize
        return await Promise.allSettled([
            this.waitForResizing(element),
            this.waitForLayoutStable(element)
        ]);
    }
    scrollToLastViewedProduct() {
        const lastViewedProductId = sessionStorage.getItem(this.lastViewedProductKey);
        if (!lastViewedProductId || salla.url.is_page('product.single'))
            return;
        this.isElementLoaded(`[id*="${lastViewedProductId}"]`)
            .then(() => {
            const productCard = this.wrapper?.querySelector(`[id*="${lastViewedProductId}"]`);
            if (!productCard)
                return;
            const scrollToPosition = () => {
                const scrollToProductCard = () => {
                    // calculations is located here for last second changes in the ui (ie. sticky header height)
                    productCard.scrollIntoView({ block: 'start', behavior: 'instant' });
                    const headerSelector = matchMedia('(max-width: 1024px)').matches ? "header .inner" : "ul.main-menu";
                    const headerHeight = window?.header_is_sticky ? (document.querySelector(headerSelector)?.getBoundingClientRect()?.height ?? 56) : 0;
                    const cardsListRowGap = parseInt(getComputedStyle(this.wrapper).rowGap) ?? 16;
                    const productCardOffset = headerHeight + cardsListRowGap;
                    scrollBy({ top: productCardOffset * -1, behavior: 'instant' });
                };
                //start scrolling to the product card position
                requestAnimationFrame(scrollToProductCard);
                const productImages = productCard.querySelectorAll('img.lazy');
                productImages.forEach((image) => {
                    const productImage = image;
                    const handleImageEvent = () => {
                        requestAnimationFrame(scrollToProductCard);
                        productImage.onload = productImage.onerror = null;
                    };
                    productImage.onload = handleImageEvent;
                    productImage.onerror = handleImageEvent;
                });
                // remove snapshot of  product cards items in session storage after scroll restoration completiion
                this.removeScrollRestorationSession();
                return void 0;
            };
            this.waitForStableLayout(this.host).then(() => requestAnimationFrame(scrollToPosition));
        });
    }
    isElementLoaded(selector) {
        return new Promise((resolve => {
            const interval = setInterval(() => {
                if (document.querySelector(selector)) {
                    clearInterval(interval);
                    return resolve(document.querySelector(selector));
                }
            }, 50);
        }));
    }
    ;
    takeStateSnapshot() {
        const currentPageData = [];
        // Classic for-loop for performance
        for (let i = 0; i < this.wrapper.children.length; i++) {
            const child = this.wrapper.children?.[i];
            currentPageData.push(child.product);
        }
        const scrollState = {
            pageIndex: Math.max((this.infiniteScroll?.pageIndex ?? 1) - 1, 1),
            nextPage: this.nextPage,
            currentPageData
        };
        if (this.isFilterable()) {
            const existingFilters = sessionStorage.getItem(this.filtersKey);
            sessionStorage.setItem(this.filtersKey, existingFilters || JSON.stringify(this.filtersSnapshot));
        }
        sessionStorage.setItem(this.infiniteScrollStateKey, JSON.stringify(scrollState));
        // Determine and store the correct prevCategoryId
        let prevCategoryId = salla.config.get('page.id'); // Number or null
        const currentPage = Object.keys(this.specialPagesWithoutIds).find(page => salla.url.is_page(page));
        if (currentPage) {
            prevCategoryId = this.specialPagesWithoutIds[currentPage];
        }
        else if (prevCategoryId !== null) {
            prevCategoryId = String(prevCategoryId); // Ensure it's stored as a string
        }
        sessionStorage.setItem(this.prevCategoryIdKey, prevCategoryId);
    }
    removeScrollRestorationSession() {
        if (!this.isFilterable()) {
            sessionStorage.removeItem(this.filtersKey);
        }
        sessionStorage.removeItem(this.infiniteScrollStateKey);
        sessionStorage.removeItem(this.lastViewedProductKey);
        sessionStorage.removeItem(this.prevCategoryIdKey);
    }
    loadStoredScrollState() {
        const storedState = sessionStorage.getItem(this.infiniteScrollStateKey);
        const filetrsState = sessionStorage.getItem(this.filtersKey);
        /*
         * Remove the scroll restoration session under the following conditions:
         * 1. The user has navigated to a different category page:
         *    - If the previously stored category ID is different from the current one.
         *    - This includes "latest", "offers", "sales" and "search" pages.
         *
         * 2. The user is on the homepage, but infinite scroll is disabled.
         *
         * 3. The user is on a product page.
         */
        const prevCategory = sessionStorage.getItem(this.prevCategoryIdKey); // Get previously stored category
        const currentPageSlug = this.specialPagesWithoutIds[salla.config.get('page.slug')] || null;
        const currentPageId = salla.config.get('page.id'); // Number or null
        const isHomepage = salla.url.is_page('index');
        const isProductPage = salla.url.is_page('product.single');
        const isDifferentCategory = currentPageSlug
            ? prevCategory !== currentPageSlug // Compare slugs for special pages
            : prevCategory !== String(currentPageId); // Compare IDs otherwise
        if ((prevCategory && isDifferentCategory && !isHomepage && !isProductPage)
            ||
                (isHomepage && !this.hasInfiniteScroll)) {
            this.removeScrollRestorationSession();
            this.switchToNormalBehavior = true;
            return false;
        }
        // Keep the snapshot in product page that contains salla-products-list but without scroll restoration
        if (isProductPage) {
            this.switchToNormalBehavior = true;
            return false;
        }
        if (storedState) {
            try {
                const { pageIndex, nextPage, currentPageData } = JSON.parse(storedState);
                if (filetrsState !== 'undefined') {
                    const filters = JSON.parse(filetrsState);
                    salla.event.emit('filters::fetched', { filters });
                }
                this.page = pageIndex;
                this.nextPage = nextPage;
                // more performant on larger set of data
                for (let i = 0; i < currentPageData.length; i++) {
                    this.wrapper.append(this.getItemHTML(currentPageData?.[i]));
                }
                return true;
            }
            catch (error) {
                console.error('Failed to load stored scroll state:', error);
                this.removeScrollRestorationSession();
            }
        }
        return false;
    }
    getSource() {
        return Helper.getProductsSource(this.source);
    }
    getSourceValue() {
        return this.currentCategoryIdFilter ? this.currentCategoryIdFilter : Helper.getProductsSourceValue(this.source, this.sourceValue);
    }
    appendDataLayer(data) {
        if (typeof dataLayer !== 'object' || !Array.isArray(dataLayer)) {
            //todo:: check if we should define it here
            return;
        }
        dataLayer.push({
            "event": "impressions",
            "ecommerce": {
                "currencyCode": salla.config.currency().code,
                // "event_id":"", // todo
                "impressions": data.map((product, index) => {
                    return {
                        "id": product.id,
                        "name": product.name,
                        "price": product.price,
                        "brand": product.brand?.name || '',
                        "quantity": product.quantity,
                        // "variant": "",
                        "categories": [
                            {
                                "name": product.category?.name || salla.config.get('page.title'),
                                "id": salla.config.get('page.id')
                            }
                        ],
                        "category": product.category?.name || salla.config.get('page.title'),
                        'position': index + 1
                    };
                })
            }
        });
    }
    initiateInfiniteScroll() {
        if (!this.hasInfiniteScroll) {
            return;
        }
        const shouldApplyManualLoad = this.autoload && this.includes && this.includes.length > 0;
        this.infiniteScroll = salla.infiniteScroll.initiate(this.wrapper, this.wrapper, {
            path: () => this.nextPage,
            history: false,
            nextPage: this.nextPage,
            scrollThreshold: shouldApplyManualLoad ? false : this.autoload ? 100 : false,
            loadOnScroll: shouldApplyManualLoad ? false : this.autoload
        }, true);
        this.infiniteScroll.pageIndex = this.page;
        this.infiniteScroll?.on('request', () => {
            this.loading(true, this.autoload ? false : true);
        });
        // Manual scroll listener
        shouldApplyManualLoad && window.addEventListener('scroll', this.handleScroll.bind(this));
        this.infiniteScroll?.on('load', async (response) => {
            if (this.isProcessing)
                return;
            this.isProcessing = true;
            try {
                if (!response.data?.length && this.infiniteScroll.pageIndex === 2) {
                    this.showPlaceholder = true;
                    salla.infiniteScroll.destroy(this.infiniteScroll);
                    this.loading(false);
                    this.placeholderLoader && this.placeholderLoader.remove();
                    return;
                }
                if (this.includes) {
                    await this.injectAndProcessData(response);
                }
                const items = this.handleResponse(response);
                this.infiniteScroll.appendItems(items);
                if (this.infiniteScroll.pageIndex === 2) {
                    if (!this.autoload && this.nextPage) {
                        this.loadMoreWrapper.style.display = 'block';
                    }
                    this.animateItems();
                }
            }
            catch (error) {
                console.error('Error during load:', error);
            }
            finally {
                this.isProcessing = false;
            }
        });
        this.infiniteScroll?.on('error', () => {
            console.log('Error occurred during request');
            this.status.querySelector('.s-infinite-scroll-error').classList.remove('s-hidden');
            this.placeholderLoader && this.placeholderLoader.remove();
            this.loading(false);
            this.isProcessing = false;
        });
        salla.onReady(() => {
            const snapshot = sessionStorage.getItem(this.infiniteScrollStateKey);
            if (!snapshot) {
                this.manualLoadNextPage();
            }
        });
    }
    handleScroll() {
        if (this.isProcessing)
            return;
        if (this.scrollTimeout)
            return;
        this.scrollTimeout = setTimeout(() => {
            this.scrollTimeout = null;
            const wrapperRect = this.wrapper.getBoundingClientRect();
            const windowHeight = window.innerHeight;
            const distanceToBottom = wrapperRect.bottom - windowHeight;
            // Trigger only when the wrapper bottom is within 200px of the viewport bottom
            if (distanceToBottom <= 200 && !this.isProcessing && this.nextPage) {
                // Reached near the bottom of the wrapper, loading next page...
                this.manualLoadNextPage();
            }
        }, 200);
    }
    manualLoadNextPage() {
        if (this.nextPage) {
            this.infiniteScroll.loadNextPage();
        }
    }
    async injectAndProcessData(response) {
        try {
            await Helper.injectExtraFieldsToResponse(response);
        }
        catch (error) {
            console.error('Error injecting data:', error);
        }
    }
    getInitialData() {
        this.loading();
        return salla.product.api.fetch({ source: this.getSource(), source_value: this.getSourceValue(), limit: this.limit }).then(async (response) => {
            if (!response.data.length) {
                this.showPlaceholder = true;
                this.placeholderLoader && this.placeholderLoader.remove();
                this.loading(false);
                return;
            }
            await Helper.injectExtraFieldsToResponse(response);
            //this.firstPageResponse will be null only in the first page, after that it will be assinged,
            //for the first page we need to inject the dom after the load, see @method componentDidLoad
            if (!this.firstPageResponse) {
                this.firstPageResponse = response;
                this.nextPage = response.cursor ? response.cursor.next : this.nextPage;
                return;
            }
            this.handleResponse(response).forEach(card => this.wrapper.append(card));
        });
    }
    async loadMore() {
        this.infiniteScroll?.loadNextPage();
    }
    componentWillLoad() {
        return salla.onReady()
            .then(() => {
            this.hasCustomComponent = !!customElements.get(this.productCardComponent);
            this.sourceValueIsValid = !!(this.getSourceValue() || this.isSourceWithoutValue());
            this.hasInfiniteScroll = !['json', 'selected', 'related', 'landing-page'].includes(this.getSource()) && !this.limit;
            let searchParams = new URLSearchParams(window.location.search);
            try {
                this.sortBy = this.sortBy || searchParams.get('sort') || searchParams.get('by');
                this.parsedFilters = Helper.extractFiltersFromUrl(searchParams);
                if (this.parsedFilters && this.parsedFilters.category_id) {
                    this.currentCategoryIdFilter = [this.parsedFilters.category_id];
                }
            }
            catch (e) {
                salla.logger.warn('failed to get filters from url', e.message);
            }
            this.buildNextPageUrl();
            this.isReady = true;
            const snapshot = sessionStorage.getItem(this.infiniteScrollStateKey);
            if (!!snapshot) {
                return;
            }
            if (!this.sourceValueIsValid) {
                salla.logger.warn(`source-value prop is required for source [${this.getSource()}]`);
                return;
            }
            if (this.hasInfiniteScroll) {
                return;
            }
            // Handle json source
            if (this.getSource() === 'json') {
                if (!this.getSourceValue().length) {
                    this.showPlaceholder = true;
                    return;
                }
                //todo:: avoid using timeout, just assigne the data to the this.firstPageResponse and it should work fine, because it will be rendered in componentDidLoad
                setTimeout(() => {
                    let productsList = this.getSourceValue();
                    productsList.map(product => this.wrapper.append(this.getItemHTML(product)));
                });
                return;
            }
            // Handle selected source
            if (this.getSource() === 'selected' && !this.getSourceValue().length) {
                this.showPlaceholder = true;
                return;
            }
            return this.getInitialData();
        });
    }
    componentDidLoad() {
        this.hasInfiniteScroll && this.init();
        if (this.loadStoredScrollState()) {
            if (this.autoload) {
                !this.nextPage && this.loading(false);
            }
            else if (!this.nextPage) {
                this.loadMoreWrapper && (this.loadMoreWrapper.style.display = 'none');
                this.status.querySelector('.s-infinite-scroll-last').classList.remove('s-hidden');
            }
            else {
                this.loadMoreWrapper && (this.loadMoreWrapper.style.display = 'block');
            }
            this.scrollToLastViewedProduct();
        }
        else if (!this.firstPageResponse && this.switchToNormalBehavior) {
            this.getInitialData()
                .then(() => {
                if (this.firstPageResponse) {
                    this.handleResponse(this.firstPageResponse, false).forEach(card => {
                        this.wrapper.append(card);
                    });
                    setTimeout(() => {
                        if (!this.autoload && this.nextPage && this.infiniteScroll.pageIndex == 1) {
                            const loadMoreWrapper = this.host.querySelector('.s-infinite-scroll-wrapper');
                            loadMoreWrapper && (loadMoreWrapper.style.display = 'block');
                        }
                    });
                }
                else {
                    console.error("No response received after getInitialData.");
                }
            })
                .catch(error => {
                console.error("Error during initial data fetch:", error);
            });
        }
        else {
            this.firstPageResponse && this.handleResponse(this.firstPageResponse, false).forEach(card => this.wrapper.append(card));
        }
    }
    canRender() {
        return this.sourceValueIsValid && this.isReady;
    }
    render() {
        if (!this.canRender()) {
            return '';
        }
        if (this.showPlaceholder) {
            return h("div", { class: "s-products-list-placeholder" }, h("span", { innerHTML: ShoppingBag }), h("p", null, this.placeholderText));
        }
        return (h(Host, { class: "s-products-list" }, h("div", { class: {
                "s-products-list-wrapper": true,
                's-products-list-horizontal-cards': this.horizontalCards && !this.filtersResults,
                's-products-list-vertical-cards': !this.horizontalCards && !this.rowCards && !this.filtersResults,
                's-products-list-row-cards': this.rowCards,
                's-products-list-filters-results': this.filtersResults,
            }, ref: wrapper => this.wrapper = wrapper }), h("div", { class: "s-infinite-scroll-status", ref: status => this.status = status }, h("p", { class: "s-infinite-scroll-last infinite-scroll-last s-hidden" }, this.endOfText), h("p", { class: "s-infinite-scroll-error infinite-scroll-error s-hidden" }, this.failedLoadMore)), this.autoload && h("div", { class: "s-products-list-loading-wrapper", style: { "display": "none" }, ref: loader => this.loader = loader }, h("span", { class: "s-button-loader s-button-loader-center s-infinite-scroll-btn-loader" })), this.hasInfiniteScroll && this.nextPage && !this.autoload ? (h("div", { class: "s-infinite-scroll-wrapper", style: { "display": "none" }, ref: loadMoreWrapper => this.loadMoreWrapper = loadMoreWrapper }, h("button", { onClick: () => this.loadMore(), class: "s-infinite-scroll-btn s-button-btn s-button-primary" }, h("span", { class: "s-button-text s-infinite-scroll-btn-text" }, this.loadMoreText ? this.loadMoreText : salla.lang.get('common.elements.load_more')), h("span", { class: "s-button-loader s-button-loader-center s-infinite-scroll-btn-loader", ref: btnLoader => this.btnLoader = btnLoader, style: { "display": "none" } })))) : ""));
    }
    init() {
        this.initiateInfiniteScroll();
        this.loading();
    }
    handleResponse(response, shouldBuildNextPage = true) {
        //todo:: check why it reach here undfined one timeü§î
        if (!response) {
            return [];
        }
        let source = this.getSource();
        let title = '';
        //help the developer to know the current page title
        if (response.cursor?.current === 1) {
            title = Helper.getPageTitleForSource(source);
            try {
                if (this.getSource() === 'search') {
                    title = salla.lang.get('common.elements.search_about', { 'word': this.getSourceValue() });
                }
                else if (!title) {
                    let catId = this.parsedFilters.category_id || this.getSourceValue()[0];
                    // get the first filter that its key is category_id, then get the value when filter.value.*.key==catId
                    title = response.filters?.find(filter => filter.key === 'category_id')?.values?.find(cat => cat.key === catId)?.value ?? '';
                    this.filtersSnapshot = response.filters;
                }
                title += (title ? ' - ' : '') + salla.lang.choice('blocks.header.products_count', response.data?.length);
                if (response.data.length === 15) {
                    title = title.replace(response.data.length, salla.lang.get('common.elements.more_than') + ' ' + response.data.length);
                }
                response.title = title;
            }
            catch (e) {
                salla.logger.error('Error::falid to handle response', e);
            }
            //inject the SEO schema
            //handleResponse works only on the infinite-scroll and infinite scroll works only on the categories pages and main latest-page ..etc, so no need to add condition
            Helper.generateProductSchema(response.data);
        }
        this.appendDataLayer(response.data);
        response.nextPage = this.nextPage;
        response.source = this.getSource();
        response.sourceValue = this.getSourceValue();
        salla.event.emit('salla-products-list::products.fetched', response);
        this.productsFetched.emit(response);
        //üí° when source is related, cursor will not be existed
        if (response.filters && this.isFilterable()) {
            this.filtersResults = true;
            this.filtersSnapshot = JSON.parse(JSON.stringify(response.filters));
            salla.event.emit('filters::fetched', { filters: response.filters });
        }
        else if (this.isFilterable()) {
            salla.event.emit('filters::hidden');
        }
        //because: this.nextPage is state we don't need to touch it after the build, to avoid the re-rendering
        if (shouldBuildNextPage) {
            this.nextPage = response.cursor ? response.cursor.next : this.nextPage;
        }
        this.loading(false);
        this.placeholderLoader && this.placeholderLoader.remove();
        if (this.hasInfiniteScroll && !this.nextPage) {
            this.infiniteScroll.option({ scrollThreshold: false, loadOnScroll: false });
            this.status.querySelector('.s-infinite-scroll-last').classList.remove('s-hidden');
        }
        const productCardsView = [];
        for (let i = 0; i < response.data.length; i++) {
            productCardsView.push(this.getItemHTML(response.data?.[i]));
        }
        return productCardsView;
    }
    get host() { return getElement(this); }
};
SallaProductsList.style = sallaProductsListCss;

const sallaProductsSliderCss = "";

const SallaProductsSlider = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Custom Card Component for the Salla Products Slider.
         *
         * This component allows you to customize the appearance of individual product cards within a Salla Products Slider.
         *
         * @example
         * <salla-products-slider product-card-component="my-custom-card-style1" ...
         * <salla-products-slider product-card-component="my-custom-card-style2" ...
         */
        this.productCardComponent = 'custom-salla-product-card';
        this.apiUrl = '';
    }
    componentWillLoad() {
        return salla.onReady()
            .then(() => {
            //TODO:: check why `this.includes` not working!!
            this.includes = Helper.parseJson(this.includes || this.host.getAttribute('includes'));
            if (!Array.isArray(this.includes)) {
                this.includes = null;
            }
            Helper.setIncludes(this.includes);
            this.sourceValueIsValid = !!(this.getSourceValue() || this.isSourceWithoutValue());
            if (!this.sourceValueIsValid) {
                salla.logger.warn(`source-value prop is required for source [${this.getSource()}]`);
                return;
            }
            this.hasCustomComponent = !!customElements.get(this.productCardComponent);
            if (this.source === 'json') {
                this.productsData = this.getSourceValue();
                this.isReady = true;
                return;
            }
            if ((this.getSource() == 'related' && !salla.config.get('store.settings.product.related_products_enabled'))) {
                this.isReady = false;
                return;
            }
            return salla.product.api.fetch({ source: this.getSource(), source_value: this.getSourceValue(), limit: this.limit })
                .then(response => Helper.injectExtraFieldsToResponse(response))
                .then(response => {
                this.productsData = response.data;
                this.isReady = true;
                response.source = this.getSource();
                response.sourceValue = this.getSourceValue();
                salla.event.emit('salla-products-slider::products.fetched', response.data);
            });
        });
    }
    componentDidRender() {
        let processedCount = 0;
        const intervalId = setInterval(() => {
            this.host.querySelectorAll('[loading="lazy"]')?.forEach(img => img.removeAttribute('loading'));
            processedCount++;
            if (processedCount >= 10) {
                clearInterval(intervalId);
            }
        }, 1000);
    }
    isSourceWithoutValue() {
        return ['offers', 'latest', 'sales', 'top-rated'].includes(this.getSource());
    }
    getItemHTML(product) {
        //as a request they don't want to let the user to open the product details
        //todo:: find a better way to handle this request
        this.getSource() === 'landing-page' && (product.url = '');
        if (this.hasCustomComponent && this.productCardComponent.toLowerCase() == 'custom-salla-product-card') {
            return h("div", { class: "s-products-slider-card" }, h("custom-salla-product-card", { product: product, source: this.getSource(), "source-value": this.getSourceValue() }));
        }
        if (this.hasCustomComponent) {
            const customElem = document.createElement(this.productCardComponent);
            customElem.setAttribute('product', JSON.stringify(product));
            customElem.setAttribute('source', this.getSource());
            customElem.setAttribute('source-value', this.getSourceValue());
            return h("div", { class: "s-products-slider-card", innerHTML: customElem.outerHTML });
        }
        return h("div", { class: "s-products-slider-card" }, h("salla-product-card", { "show-quantity": this.getSource() == 'landing-page', "hide-add-btn": this.getSource() == 'landing-page', "shadow-on-hover": true, product: product }));
    }
    canRender() {
        return this.sourceValueIsValid && this.isReady;
    }
    getSource() {
        return Helper.getProductsSource(this.source);
    }
    getSourceValue() {
        return Helper.getProductsSourceValue(this.source, this.sourceValue);
    }
    render() {
        if (!this.canRender()) {
            return;
        }
        return (h(Host, { class: "s-products-slider-wrapper" }, h("salla-slider", { class: "s-products-slider-slider", id: this.sliderId || `s-products-slider-${Math.random().toString(36).substr(2, 9)}`, "auto-play": this.autoplay, type: "carousel", "block-title": this.blockTitle, "block-subTitle": this.subTitle, "display-all-url": this.displayAllUrl, sliderConfig: this.sliderConfig ? this.sliderConfig : null }, h("div", { slot: "items" }, this.productsData?.map(product => this.getItemHTML(product))))));
    }
    get host() { return getElement(this); }
};
SallaProductsSlider.style = sallaProductsSliderCss;

const sallaProgressBarCss = "";

const SallaProgressBar = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Set height for the wrapper.
         */
        this.height = "10px";
        try {
            if (this.donation) {
                let donationJson = typeof this.donation == 'string' ? JSON.parse(this.donation) : this.donation;
                if (donationJson.can_donate && donationJson.target_amount) {
                    donationJson.target_end_date = donationJson.target_end_date == '0000-00-00' ? null : donationJson.target_end_date;
                    this.value = donationJson.collected_amount;
                    this.target = donationJson.target_amount;
                    this.header = salla.lang.get('pages.products.target');
                    this.message = donationJson.target_end_date ? salla.lang.get('pages.products.donation_target_date') + ' ' + donationJson.target_end_date : '';
                }
                else {
                    //in case the product is not enabled target campaign
                    this.message = donationJson.target_amount
                        ? donationJson.target_message
                        : '';
                }
            }
        }
        catch (e) {
            salla.log('Wrong donation json');
        }
        salla.lang.onLoaded(() => {
            this.header = this.header?.replace('pages.products.target', salla.lang.get('pages.products.target'));
            this.message = this.message?.replace('pages.products.donation_target_date', salla.lang.get('pages.products.donation_target_date'));
        });
        salla.onReady(() => {
            this.color = this.color || salla.config.get('theme.color.primary', "#ffd5c4");
            if (!this.unit) {
                this.unit = salla.config.currency().symbol;
            }
        });
    }
    getPercentage() {
        return (this.value / this.target) * 100;
    }
    render() {
        if (!this.target && !this.message) {
            return '';
        }
        return (h("div", { class: "s-progress-bar-container" }, this.header ? h("div", { class: "s-progress-bar-header" }, this.header) : '', this.getProgressBar(), this.message ? h("span", { class: "s-progress-bar-message" }, this.message) : ''));
    }
    getProgressBar() {
        return this.target ? [
            !this.hideUnits ? (h("div", { class: "s-progress-bar-target-section" }, h("span", { innerHTML: `${salla.helpers.number(this.value)} ${this.unit}` }), h("span", { innerHTML: `${salla.helpers.number(this.target)} ${this.unit}` }))) : null,
            h("div", { class: "s-progress-bar-wrapper", style: { height: this.height } }, h("div", { class: {
                    "s-progress-bar-progress": true,
                    's-progress-bar-progress-stripped': this.stripped
                }, style: {
                    width: `${this.getPercentage()}%`,
                    backgroundColor: this.color
                } }))
        ] : null;
    }
};
SallaProgressBar.style = sallaProgressBarCss;

const sallaQuantityInputCss = "";

const SallaQuantityInput = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.hostAttributes = {};
        this.hasIncrementSlot = false;
        this.hasDecrementSlot = false;
        this.didLoaded = false;
        this.quantity = 1;
        this.fireChangeEvent = true;
    }
    /**
     * Workaround to fire change event for the input.
     */
    watchPropHandler() {
        if (!this.didLoaded) {
            return;
        }
        if (!this.fireChangeEvent) {
            this.fireChangeEvent = true;
            return;
        }
        Helper.debounce(() => {
            salla.document.event.fireEvent(this.textInput, 'change', {
                bubbles: true,
                detail: { productId: this.cartItemId, quantity: this.quantity }
            });
        });
    }
    componentWillLoad() {
        this.quantity = parseInt(this.host.getAttribute('value')) || 1;
        this.hasIncrementSlot = !!this.host.querySelector('[slot="increment-button"]');
        this.hasDecrementSlot = !!this.host.querySelector('[slot="decrement-button"]');
    }
    componentDidLoad() {
        this.didLoaded = true;
        this.textInput.addEventListener('input', (event) => salla.helpers.inputDigitsOnly(event.target));
    }
    getInputAttributes() {
        for (let i = 0; i < this.host.attributes.length; i++) {
            if (!['id', 'value', 'min', 'class'].includes(this.host.attributes[i].name)) {
                this.hostAttributes[this.host.attributes[i].name] = this.host.attributes[i].value;
            }
        }
        return this.hostAttributes;
    }
    /**
     * decrease quantity by one.
     * @return HTMLSallaQuantityInputElement
     */
    async decrease() {
        return this.setValue(this.quantity - 1);
    }
    /**
     * increase quantity by one.
     * @return HTMLSallaQuantityInputElement
     */
    async increase() {
        return this.setValue(Number(this.quantity) + 1);
    }
    /**
     * set quantity by one.
     * @return HTMLSallaQuantityInputElement
     */
    async setValue(value, fireChangeEvent = true) {
        this.fireChangeEvent = fireChangeEvent;
        let maxQuantity = parseInt(this.host.getAttribute('max'));
        if (maxQuantity && value > maxQuantity) {
            value = maxQuantity;
        }
        if (value <= 1) {
            value = 1;
        }
        this.quantity = value;
        return this.host;
    }
    render() {
        return (h(Host, { key: '5627ef48310739dc0a112c9c214f78bae9b71bca', class: "s-quantity-input" }, h("div", { key: '50040d9cd5bbf38d06d6a13f17a1b4d756f5285d', class: "s-quantity-input-container" }, h("button", { key: '334c465e2ac46c3b88e3f89ae3b0754dc3741f69', onClick: () => this.increase(), class: "s-quantity-input-increase-button s-quantity-input-button", type: "button" }, !this.hasIncrementSlot ? h("span", { innerHTML: Add }) : '', h("slot", { key: '9f41e975e7c47f4cbc3e97dd3f8591b633d9da29', name: "increment-button" })), h("input", { key: '6f5bfdeb1804cf98a13f12b966e5fa6582e39557', class: "s-quantity-input-input", ...this.getInputAttributes(), ref: (el) => this.textInput = el, onInput: (event) => this.setValue(event.target.value), min: "1", value: this.quantity }), h("button", { key: '583f5edb96bc5a368851eadb5940d79b7afed3be', class: "s-quantity-input-decrease-button s-quantity-input-button", onClick: () => this.decrease(), type: "button" }, !this.hasDecrementSlot ? h("span", { innerHTML: Minus }) : '', h("slot", { key: '8726d4d616dd6f4fd1348312d3a9c24bf9268146', name: "decrement-button" })))));
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "quantity": ["watchPropHandler"]
    }; }
};
SallaQuantityInput.style = sallaQuantityInputCss;

var Http = {
    request(method, url, data, successCb = null, errorCb = null) {
        return axios
            .request({url, data, method: method.toLowerCase(), responseType: 'json'})
            .then(successCb)
            .catch(errorCb);
    },

    get(url, successCb = null, errorCb = null, data) {
        // return this.request('get', url, data, successCb, errorCb);
        return axios
            .get(url, {params: data})
            .then(successCb)
            .catch(errorCb);
    },

    post(url, data, successCb = null, errorCb = null) {
        return this.request('post', url, data, successCb, errorCb);
    },

    put(url, data, successCb = null, errorCb = null) {
        return this.request('put', url, data, successCb, errorCb);
    },

    delete(url, data, successCb = null, errorCb = null) {
        return this.request('delete', url, data, successCb, errorCb);
    },

    requestWithSupportAjax(url, payload, method = 'post') {
        return new Promise((resolve, reject) => {
            if (!window?.isLegacyTheme) {
                return this.request(method, url, payload, ({data}) => {
                    return resolve(data);
                }, ({response}) => {
                    return reject(response);
                })
            }

            /**
             * @deprecated to support legacy themes
             */
            $.ajax({
                url: url,
                method: method.toUpperCase(),
                data: payload,
                async: false,
                success: function ({data}) {
                    return resolve(data);
                },
                error: function ({response}) {
                    return reject(response);
                }
            });
        })
    }
};

var DetectOS = {
    options: [],
    header: [navigator.platform, navigator.userAgent, navigator.appVersion, navigator.vendor, window.opera],
    dataos: [
        {name: 'Windows Phone', value: 'Windows Phone', version: 'OS'},
        {name: 'Windows', value: 'Win', version: 'NT'},
        {name: 'iPhone', value: 'iPhone', version: 'OS'},
        {name: 'iPad', value: 'iPad', version: 'OS'},
        {name: 'Kindle', value: 'Silk', version: 'Silk'},
        {name: 'Android', value: 'Android', version: 'Android'},
        {name: 'PlayBook', value: 'PlayBook', version: 'OS'},
        {name: 'BlackBerry', value: 'BlackBerry', version: '/'},
        {name: 'Macintosh', value: 'Mac', version: 'OS X'},
        {name: 'Linux', value: 'Linux', version: 'rv'},
        {name: 'Palm', value: 'Palm', version: 'PalmOS'}
    ],
    databrowser: [
        {name: 'Chrome', value: 'Chrome', version: 'Chrome'},
        {name: 'Firefox', value: 'Firefox', version: 'Firefox'},
        {name: 'Safari', value: 'Safari', version: 'Version'},
        {name: 'Internet Explorer', value: 'MSIE', version: 'MSIE'},
        {name: 'Opera', value: 'Opera', version: 'Opera'},
        {name: 'BlackBerry', value: 'CLDC', version: 'CLDC'},
        {name: 'Mozilla', value: 'Mozilla', version: 'Mozilla'}
    ],
    init: function () {
        var agent = this.header.join(' '),
            os = this.matchItem(agent, this.dataos),
            browser = this.matchItem(agent, this.databrowser);

        return {os: os, browser: browser};
    },
    matchItem: function (string, data) {
        var i = 0,
            j = 0,
            regex,
            regexv,
            match,
            matches,
            version;

        for (i = 0; i < data.length; i += 1) {
            regex = new RegExp(data[i].value, 'i');
            match = regex.test(string);
            if (match) {
                regexv = new RegExp(data[i].version + '[- /:;]([\\d._]+)', 'i');
                matches = string.match(regexv);
                version = '';
                if (matches) {
                    if (matches[1]) {
                        matches = matches[1];
                    }
                }
                if (matches) {
                    matches = matches.split(/[._]+/);
                    for (j = 0; j < matches.length; j += 1) {
                        if (j === 0) {
                            version += matches[j] + '.';
                        } else {
                            version += matches[j];
                        }
                    }
                } else {
                    version = '0';
                }
                return {
                    name: data[i].name,
                    version: parseFloat(version)
                };
            }
        }
        return {name: 'unknown', version: 0};
    }
};

/**
 * @typedef {Object} ApplePayPaymentContact
 * @property {string} phoneNumber
 * @property {string} emailAddress
 * @property {string} givenName
 * @property {string} familyName
 * @property {string} [phoneticGivenName]
 * @property {string} [phoneticFamilyName]
 * @property {string[]} addressLines
 * @property {string} [subLocality]
 * @property {string} locality
 * @property {string} postalCode
 * @property {string} [subAdministrativeArea]
 * @property {string} administrativeArea
 * @property {string} country
 * @property {string} countryCode
 */


/**
 *
 * @param {SallaApplePay} SallaApplePay
 * @param {boolean} isAuthorized
 * @param {ApplePayPaymentContact} shippingContact
 *
 */
function mutateShipmentAddress(SallaApplePay, shippingContact, isAuthorized = false) {
  console.log('mutateShipmentAddress called', shippingContact, isAuthorized);

  if (!SallaApplePay.detail.requiredShippingContactFields) {
    return;
  }

  return Http.post(
    SallaApplePay.detail.shippingContactSelected.url.replace('{id}', SallaApplePay.id),
    {
      'country': shippingContact.country,
      'city': shippingContact.locality,
      'local': shippingContact.subLocality,
      'description': shippingContact.subAdministrativeArea,
      'street': shippingContact.addressLines?.join(", ") || shippingContact.administrativeArea,
      'country_code': shippingContact.countryCode,
      'postal_code': shippingContact.postalCode,
      'is_authorized': isAuthorized
    },
    async ({ data }) => {
      if (isAuthorized) { return }
      if (typeof SallaApplePay.detail.shippingContactSelected.onSuccess === 'function') {
        SallaApplePay.detail.shippingContactSelected.onSuccess(data);
      }

      SallaApplePay.address_id = data.data.address_id;
      SallaApplePay.shipping_methods = data.data.shipping_methods;

      if (!SallaApplePay.shipping_methods || (SallaApplePay.shipping_methods && !SallaApplePay.shipping_methods.length)) {
        salla.logger.warn('üçè Pay: We dont found any supported methods', data);

        return SallaApplePay.session.completeShippingContactSelection({
          status: SallaApplePay.session.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,
          errors: [
            new window.ApplePayError('addressUnserviceable')
          ]
        });
      }

      try {
        await SallaApplePay.selectApplePayShippingMethod(SallaApplePay.shipping_methods[0]['ship_id'], SallaApplePay.shipping_methods[0]['private_ship_id']);
      } catch (error) {
        salla.logger.warn('Failed set the shipping details to api', error);

        return SallaApplePay.session.completeShippingContactSelection({
          status: SallaApplePay.session.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,
          errors: [
            new window.ApplePayError('addressUnserviceable')
          ]
        });
      }

      try {
        await SallaApplePay.recalculateTotal();
      } catch (error) {
        salla.logger.warn('üçè Pay: Failed recalculate total', error);

        return SallaApplePay.session.completeShippingContactSelection({
          status: SallaApplePay.session.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,
          errors: [
            new window.ApplePayError('addressUnserviceable')
          ]
        });
      }

      SallaApplePay.session.completeShippingContactSelection({
        newTotal: SallaApplePay.prepareTotal(),
        newLineItems: SallaApplePay.prepareLineItems(),
        newShippingMethods: SallaApplePay.mappingShippingMethods(SallaApplePay.shipping_methods)
      });

    },
    ({ response }) => {
      salla.logger.warn('üçè Pay: Failed add address via api', response);

      if (typeof SallaApplePay.detail.shippingContactSelected.onFailed === 'function') {
        SallaApplePay.detail.shippingContactSelected.onFailed(response);
      }

      // parse 422 errors
      let fields = response?.data?.error?.fields;

      let errors = [];

      if (fields?.country_code) {
        errors.push(new window.ApplePayError('shippingContactInvalid', 'countryCode', fields?.country_code[0]));
      }

      if (fields?.city) {
        errors.push(new window.ApplePayError('shippingContactInvalid', 'locality', fields?.city[0]));
      }

      if (fields?.country) {
        errors.push(new window.ApplePayError('shippingContactInvalid', 'country', fields?.country[0]));
      }

      if (errors.length === 0 && response?.data?.error?.message) {
        errors.push(new window.ApplePayError('shippingContactInvalid', 'locality', response?.data?.error?.message));
      }

      SallaApplePay.session.completeShippingContactSelection({
        newTotal: SallaApplePay.prepareTotal(),
        newLineItems: SallaApplePay.prepareLineItems(),
        status: SallaApplePay.session.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,
        errors: errors
      });
    }
  );
}

window.Salla = window.Salla || {};
window.Salla.Payments = window.Salla.Payments || {};

/**
 * Full Example
 *
 * Salla.event.createAndDispatch('payments::apple-pay.start-transaction', {
 *                  amount: 1000,
 *                  validateMerchant: {
 *                      url: '{{ route('cp.marketplace.cart.pay', ['cart' => $cart]) }}',
 *                      // onFailed: (response) => {
 *                      //     laravel.ajax.errorHandler(response);
 *                      //     this.onCancel({}, response.data.error.message);
 *                      // },
 *                      // onSuccess: (response) => {
 *                      //     laravel.ajax.successHandler(response);
 *                      // }
 *                  },
 *                  authorized: {
 *                      url: '{{ route('cp.marketplace.cart.confirm', ['cart' => $cart]) }}',
 *                      // onFailed: (response) => {
 *                      //     laravel.ajax.errorHandler(response);
 *                      //     this.onCancel({}, response.data.error.message);
 *                      // },
 *                      // onSuccess: (response) => {
 *                      //     // nothing
 *                      // }
 *                  },
 *                  // onError: function (message) {
 *                  //     laravel.alert(message);
 *                  // }
 *              });
 */
window.SallaApplePay = {
    session: null,
    detail: null,
    address_id: null,
    shipping_methods: [],
    total: undefined,
    request: undefined,
    id: undefined,
    countryCode: null,
    init: function () {
        document.removeEventListener('payments::apple-pay.start-transaction', SallaApplePay.startSession);
        Salla.event.addEventListener('payments::apple-pay.start-transaction', SallaApplePay.startSession);
    },

    initDefault: function () {
        if (!SallaApplePay.detail.onError) {
            SallaApplePay.detail.onError = function (message) {
                salla.notify.error(message);
            };
        }

        if (!SallaApplePay.detail.authorized.onFailed) {
            SallaApplePay.detail.authorized.onFailed = (response) => {
                salla.logger.log(JSON.stringify(response));
                salla.api.handleErrorResponse(response);
                SallaApplePay.onCancel({}, response.data.error.message);
            };
        }

        if (!SallaApplePay.detail.validateMerchant.onFailed) {
            SallaApplePay.detail.validateMerchant.onFailed = (response) => {
                salla.logger.log(JSON.stringify(response));
                salla.api.handleErrorResponse(response);
                SallaApplePay.onCancel({}, response.data.error.message);
            };
        }

        if (!SallaApplePay.detail.authorized.onSuccess) {
            SallaApplePay.detail.authorized.onSuccess = (response) => {
                salla.logger.log(JSON.stringify(response));
                salla.api.handleAfterResponseActions(response);
            };
        }
    },

    prepareLineItems: function () {
        if (!SallaApplePay.detail?.items?.length) {
            SallaApplePay.detail.items = [
                {
                    label: salla.lang.get('pages.cart.items_total'),
                    amount: SallaApplePay.detail.amount
                }
            ];
        }

        return SallaApplePay.detail.items;
    },

    prepareTotal: function () {
        return {
            // apple ask to use business name
            label: window.location.hostname || 'Salla',
            //label: salla.lang.get('pages.cart.final_total'),
            amount: SallaApplePay.detail.amount
        }
    },

    startSession: async function (event) {

        SallaApplePay.detail = event.detail || event;

        salla.log('üçè Pay: payments::apple-pay.start-transaction', SallaApplePay.detail);

        SallaApplePay.initDefault();

        let version = SallaApplePay.getApplePaySessionVersion();
        let supportedNetworks = SallaApplePay.detail.supportedNetworks || ['masterCard', 'visa'];

        if (version === 5) {
            supportedNetworks.push('mada');
        }

        SallaApplePay.request = {
            countryCode: SallaApplePay.detail.countryCode || 'SA',
            supportsCouponCode: true,
            couponCode: '',
            currencyCode: SallaApplePay.detail.currency || 'SAR',
            requiredShippingContactFields: SallaApplePay.detail.requiredShippingContactFields ? SallaApplePay.detail.requiredShippingContactFields : [],
            merchantCapabilities: ['supports3DS'],
            supportedNetworks: supportedNetworks,
            supportedCountries: SallaApplePay.detail.supportedCountries || ['SA'],
            total: SallaApplePay.prepareTotal(),
            shippingContact: SallaApplePay.detail.shippingContact ? SallaApplePay.detail.shippingContact : {},
            shippingMethods: SallaApplePay.detail.shippingMethods && SallaApplePay.detail.shippingMethods.length ? SallaApplePay.mappingShippingMethods(event.detail.shippingMethods) : [],
            lineItems: SallaApplePay.prepareLineItems()
        };

        salla.log('üçè Pay: init ', SallaApplePay.request);

        // https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest
        SallaApplePay.session = new ApplePaySession(version, SallaApplePay.request);

        SallaApplePay.session.onshippingcontactselected = SallaApplePay.onShippingContactSelected;
        SallaApplePay.session.onshippingmethodselected = SallaApplePay.onShippingMethodSelected;
        SallaApplePay.session.onvalidatemerchant = SallaApplePay.onValidateMerchant;
        SallaApplePay.session.onpaymentauthorized = SallaApplePay.onPaymentAuthorized;
        SallaApplePay.session.oncancel = SallaApplePay.onCancel;
        SallaApplePay.session.oncouponcodechanged = SallaApplePay.oncouponcodechanged;
        SallaApplePay.session.onpaymentmethodselected = SallaApplePay.onpaymentmethodselected;

        SallaApplePay.session.begin();
    },
    async onpaymentmethodselected(event) {
        await SallaApplePay.recalculateTotal();
        const updatedPaymentDetails = {
            newTotal: SallaApplePay.prepareTotal(),
            newLineItems: SallaApplePay.prepareLineItems(),
        };

        SallaApplePay.session.completePaymentMethodSelection(updatedPaymentDetails);
    },

    oncouponcodechanged(event) {
        Salla.event.dispatch('payments::apple-pay.coupon.change', event);

        return Http.post(SallaApplePay.detail.oncouponcodechanged.url.replace('{id}', SallaApplePay.id), {
            'coupon': event.couponCode,
            'payment_method': 'apple_pay',
        }, async ({ data }) => {
            if (typeof SallaApplePay.detail.oncouponcodechanged.onSuccess === 'function') {
                SallaApplePay.detail.oncouponcodechanged.onSuccess(data);
            }

            salla.log('üçè Pay: Coupon applied success');

            await SallaApplePay.recalculateTotal();

            SallaApplePay.session.completeCouponCodeChange({
                newTotal: SallaApplePay.prepareTotal(),
                newLineItems: SallaApplePay.prepareLineItems()
            });
        }, async (error) => {
            let response = error?.response;

            Salla.event.dispatch('payments::apple-pay.coupon.failed', response);

            // SallaApplePay.abortSession();
            if (typeof SallaApplePay.detail.oncouponcodechanged.onFailed === 'function') {
                SallaApplePay.detail.oncouponcodechanged.onFailed(response);
            }

            await SallaApplePay.recalculateTotal();

            SallaApplePay.session.completeCouponCodeChange({
                newTotal: SallaApplePay.prepareTotal(),
                newLineItems: SallaApplePay.prepareLineItems(),
                errors: [new window.ApplePayError('couponCodeInvalid')]
            });
        });
    },

    onCancel: (event = {}, message = null) => {
        SallaApplePay.detail.onError(message || salla.lang.get('pages.checkout.payment_failed'));
        Salla.event.createAndDispatch('payments::apple-pay.canceled', event);
    },

    /**
     * Confirm payment after authorization.
     *
     * @param event
     */
    onPaymentAuthorized: async (event) => {
        salla.logger.log('üçè Pay: onPaymentAuthorized', event.payment);

        // Update the payment address
        await mutateShipmentAddress(SallaApplePay, event.payment.shippingContact, true);

        Salla.event.dispatch('payments::apple-pay.authorized.init', event);
        Http.post(SallaApplePay.detail.authorized.url.replace('{id}', SallaApplePay.id), {
            payment_method: 'apple_pay',
            applepay_token: JSON.stringify(event.payment)
        }, ({ data }) => {
            Salla.event.dispatch('payments::apple-pay.authorized.success', data);

            SallaApplePay.session.completePayment(ApplePaySession.STATUS_SUCCESS);

            if (typeof SallaApplePay.detail.authorized.onSuccess === 'function') {
                SallaApplePay.detail.authorized.onSuccess(data);
            }
        }, (error) => {

            let response = error?.response;

            Salla.event.dispatch('payments::apple-pay.authorized.failed', response);

            SallaApplePay.session.completePayment({
                status: ApplePaySession.STATUS_FAILURE,
                errors: [new ApplePayError("unknown", undefined, response?.data?.error?.message || response?.data?.error?.code || 'Failed to parse authorized response')]
            });

            if (typeof SallaApplePay.detail.authorized.onFailed === 'function') {
                SallaApplePay.detail.authorized.onFailed(response);
            }
        });
    },

    /**
     * Validate Submit.
     *
     * @param event
     */
    onValidateMerchant: async (event) => {
        try {
            // Dispatch event to initialize Apple Pay merchant validation
            Salla.event.dispatch('payments::apple-pay.validate-merchant.init', event);

            // Post request to validate merchant
            const { data } = await Http.post(SallaApplePay.detail.validateMerchant.url.replace('{id}', SallaApplePay.id), {
                validation_url: event.validationURL
            });

            // Dispatch event on successful merchant validation
            Salla.event.dispatch('payments::apple-pay.validate-merchant.success', data);

            // Define a function to handle the completion of merchant validation
            const completeMerchantValidation = (responseData) => {
                SallaApplePay.session.completeMerchantValidation(responseData);
            };

            // Check if onSuccess function is defined in SallaApplePay.detail.validateMerchant
            if (typeof SallaApplePay.detail.validateMerchant.onSuccess === 'function') {
                // Call onSuccess function and handle response
                const response = await SallaApplePay.detail.validateMerchant.onSuccess(data);
                if (response?.redirect) {
                    // Handle redirect if present
                    window.location = response.redirect;
                    return SallaApplePay.abortValidateMerchant(response);
                }
            }
            completeMerchantValidation(data.data);
        } catch (error) {
            // Handle errors
            console.error(error);
            SallaApplePay.abortValidateMerchant(error?.response);
        }
    },

    abortValidateMerchant: (response = null) => {

        SallaApplePay.abortSession();
        Salla.event.dispatch('payments::apple-pay.validate-merchant.failed', response);

        if (typeof SallaApplePay.detail.validateMerchant.onFailed === 'function') {
            SallaApplePay.detail.validateMerchant.onFailed(response);
        }
    },

    /**
     * Select Shipping Contact
     *
     * @param event
     */
    onShippingContactSelected: async (event) => {
        salla.logger.log('üçè Pay: onShippingContactSelected', event.shippingContact);

        // create address for shipping calculation
        mutateShipmentAddress(SallaApplePay, event.shippingContact);
    },

    /**
     * Select Shipping Method
     *
     * @param event
     *
     */
    onShippingMethodSelected: async (event) => {
        salla.logger.log(event);

        let shipping_ids = event.shippingMethod.identifier.split(',');

        try {
            await SallaApplePay.selectApplePayShippingMethod(shipping_ids[0], typeof shipping_ids[1] === 'undefined' ? null : shipping_ids[1]);

            await SallaApplePay.recalculateTotal();

            SallaApplePay.session.completeShippingMethodSelection({
                newTotal: SallaApplePay.prepareTotal(),
                newLineItems: SallaApplePay.prepareLineItems(),
            });
        } catch (error) {
            salla.logger.warn('üçè Pay: Failed set the shipping details to api', error);

            // todo :: find a better handling for error without abort session
            SallaApplePay.abortSession();
        }
    },


    abortSession: () => {
        if (SallaApplePay.session) {
            SallaApplePay.session.abort();
        }
    },

    getApplePaySessionVersion: () => {
        const userAgent = navigator.userAgent || navigator.vendor || window.opera;

        if (userAgent === 'sallapp') {
            return 5;
        }

        // can't handle custom user agent like sallapp
        let detection = DetectOS.init();
        let v = parseFloat(detection.os.version);

        if (detection.os.name === 'Macintosh') {
            if (v < 10.142) {
                return 1;
            }
        } else {
            if (v < 12.11) {
                return 1;
            }
        }

        return 5;
    },

    recalculateTotal: () => {
        salla.logger.log('Recalculate Total');

        return Http.requestWithSupportAjax(SallaApplePay.detail.recalculateTotal.url.replace('{id}', SallaApplePay.id), {}, 'get').then((data) => {
            let cart = data.data.initial_data?.cart || data.data.cart;
            // todo :: enhance response from backend
            SallaApplePay.detail.amount = cart.total;
            SallaApplePay.detail.items = (cart.totals || cart.items).map((item) => {
                return {
                    label: item.title,
                    amount: (item.amount === 'ŸÖÿ¨ÿßŸÜŸä' || item.amount === 'Free') ? 0 : item.amount.toString().replace('+', ''),
                };
            });

            // lets remove last element (final total)
            SallaApplePay.detail.items.pop();

            return data;
        }).catch((error) => {
            salla.logger.warn('üçè Pay: recalculate total failed', error);

            // general error
            return error?.response?.data?.message;
        });
    },


    selectApplePayShippingMethod: (company_id, private_company_id) => {
        salla.logger.log('üçè Pay: select shipping method ', 'company_id : ' + company_id, 'private_company_id: ' + private_company_id);

        return Http.requestWithSupportAjax(SallaApplePay.detail.shippingMethodSelected.url.replace('{id}', SallaApplePay.id), {
            address_id: SallaApplePay.address_id,
            company_id: company_id,
            private_company_id: private_company_id,
            payment_method: 'apple_pay'
        }, 'post').then(() => {
            if (typeof SallaApplePay.detail.shippingMethodSelected.onSuccess === 'function') {
                SallaApplePay.detail.shippingMethodSelected.onSuccess(data);
            }

            // we don't have any data in this request, lets resolve the promise
            return true;
        }).catch((error) => {
            salla.logger.warn('üçè Pay: Set shipping method failed', error);

            if (typeof SallaApplePay.detail.shippingMethodSelected.onFailed === 'function') {
                SallaApplePay.detail.shippingMethodSelected.onFailed(error);
            }

            // parse 422 errors
            let response = error?.response?.data?.error;

            // address id is not valid
            if (response?.data?.fields?.address_id) {
                return response?.data?.fields?.address_id[0];
            }

            // general error
            return response?.data?.message;
        });
    },
    mappingShippingMethods: methods => methods.map(method => ({
        'label': method.shipping_title,
        'amount': method.enable_free_shipping ? 0 : method.ship_cost,
        'detail': '',
        'identifier': method.ship_id.toString() + (method.private_ship_id ? ',' + method.private_ship_id.toString() : '')
    }))
};

//applePay doesn't allow iframes
// if (window.ApplePaySession && window.self === window.top && ApplePaySession.canMakePayments()) {
if (window.ApplePaySession?.canMakePayments()) {
    SallaApplePay.init();
} else {
    // You can hide the Apple Pay button easy with add data-show-if-apple-pay-supported to element like <div data-show-if-apple-pay-supported>
    document.querySelectorAll('data-show-if-apple-pay-supported').forEach(element => element.style.display = 'none');
}

const sallaQuickBuyCss = ".s-quick-buy-button .s-button-text{display:flex}apple-pay-button{--apple-pay-button-width:100%;--apple-pay-button-height:40px;--apple-pay-button-border-radius:.75rem;--apple-pay-button-box-sizing:content-box}";

const SallaQuickBuy = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Button type.
         *
         * @type {string}
         * @default buy
         **/
        this.type = 'buy';
        /**
         * Product options, if is empty will get the data from the document.querySelector('salla-product-options[product-id="X"]')
         *
         * @type {object}
         * @default {}
         */
        this.options = {};
        this.quickBuy = salla.lang.get('pages.products.buy_now');
        salla.lang.onLoaded(() => {
            this.quickBuy = salla.lang.get('pages.products.buy_now');
        });
    }
    async quickBuyHandler() {
        if (salla.config.isGuest()) {
            // todo (low) :: find a way to re-fire the method after success
            let afterLoginEvent = "salla-quick-buy::user.logged-in";
            salla.event.on(afterLoginEvent, () => this.settlePayment());
            salla.api.auth.setAfterLoginEvent(afterLoginEvent);
            return salla.auth.event.dispatch('login::open', { withoutReload: true });
        }
        await this.settlePayment();
    }
    async settlePayment() {
        let optionsElement = document.querySelector(`salla-product-options[product-id="${this.productId}"]`);
        //make sure all the required options are selected
        if (optionsElement && !await optionsElement.reportValidity()) {
            return salla.error(salla.lang.get('common.messages.required_fields'));
        }
        //use this way to get quantity too
        let data = this.host.getElementSallaData();
        // if the store doesn't have Apple Pay , just create a cart and then redirect to check out page
        if (!this.isApplePayActive) {
            // return salla.product.buyNow(this.productId, data);
            return salla.api.request('checkout/quick-purchase/' + this.productId, data, 'post')
                .then(resp => {
                if (resp.data.redirect) {
                    window.location.href = resp.data.redirect;
                }
                return resp;
            });
        }
        data.is_applepay = true;
        if ('append' in data) {
            data.append('is_applepay', true);
        }
        // noinspection TypeScriptValidateJSTypes
        salla.event.dispatch('payments::apple-pay.start-transaction', {
            amount: this.amount, // 1000
            currency: this.currency || 'SAR', // SAR
            requiredShippingContactFields: this.isRequireShipping ? ['postalAddress'] : undefined,
            shippingMethods: this.isRequireShipping ? [] : undefined,
            supportedNetworks: salla.config.get('store.settings.buy_now.networks'),
            supportedCountries: salla.config.get('store.settings.buy_now.countries'),
            countryCode: salla.config.get('store.store_country') || 'SA',
            validateMerchant: {
                url: salla.url.get('checkout/applepay/validate'),
                onSuccess: (response) => {
                    if (this.applePayOnly && !this.productId) { // the cart is not passes
                        if (!this.cartId) {
                            salla.logger.warn('üçè Pay: trying to create applePay transaction without cartId/ProductId !');
                            return Promise.resolve(response);
                        }
                        window.SallaApplePay.id = this.cartId;
                        salla.log('üçè Pay: create checkout success: with id #' + this.cartId);
                        return Promise.resolve(response);
                    }
                    return salla.api.request('checkout/quick-purchase/' + this.productId, typeof data == 'object' ? data : undefined, 'post', {}).then(response => {
                        // if is redirect url returned for any reason, lets redirect the user to check out
                        if (response?.data?.redirect) {
                            salla.log('üçè Pay: create checkout success: redirect exits, go to checkout page');
                            window.location.href = response.data.redirect.url;
                            return response;
                        }
                        // the cart is not ready to complete apply pay session
                        if (!response?.data?.id) {
                            salla.logger.warn('üçè Pay: create checkout success: No id, or redirect');
                            return response;
                        }
                        window.SallaApplePay.id = response.data.id;
                        salla.log('üçè Pay: create checkout success: with id #' + window.SallaApplePay.id);
                    });
                }
            },
            authorized: {
                // submit checkout route
                url: salla.url.get('checkout/{id}/payments/submit'),
                onFailed: (response) => {
                    window.SallaApplePay.onCancel({}, response?.data?.error?.message || response?.data?.error?.code || salla.lang.get('pages.checkout.payment_failed'));
                },
                onSuccess: (response) => {
                    window.location.href = response.redirect.url;
                    salla.log('üçè Pay: authorized Success:: redirect to thank you page, order placed');
                }
            },
            shippingMethodSelected: this.isRequireShipping ? {
                url: salla.url.get('checkout/{id}/shipping/details'),
            } : undefined,
            shippingContactSelected: this.isRequireShipping ? {
                url: salla.url.get('checkout/{id}/address/add'),
            } : undefined,
            oncouponcodechanged: {
                url: salla.url.get('checkout/{id}/coupons')
            },
            recalculateTotal: {
                url: salla.url.get('checkout/{id}/payments/recalculate?payment_method=apple_pay')
            },
            onError: function (message) {
                salla.log(message);
                salla.notify.error(message);
            }
        });
    }
    componentWillLoad() {
        console.log('üçè Pay: Quick Buy Component Loaded');
        return new Promise((resolve, reject) => {
            salla.onReady(async () => {
                if (!this.currency) {
                    this.currency = salla.config.get('user.currency_code');
                }
                if (!this.productId && salla.config.get('page.id')) {
                    this.productId = salla.config.get('page.id');
                }
                if (!this.applePayOnly && !this.productId) {
                    salla.logger.warn('üçè Pay: Failed load the quick buy, the product id is missing');
                    return reject();
                }
                /**
                 * We should check the product if it's required shipping
                 * in order for apple pay sdk to show the required Shipping Contact Fields
                 * components..
                 */
                if ((!this.amount || !this.isRequireShipping) && this.productId) {
                    await salla.product.getDetails(this.productId, []).then((response) => {
                        this.amount = response.data.price;
                        this.isRequireShipping = response?.data?.is_require_shipping || false;
                    }).catch((error) => {
                        salla.logger.warn('üçè Pay: Failed load the quick buy, get the product details failed: ', error);
                        return reject();
                    });
                }
                if (this.type == 'donate') {
                    salla.event.on('product-options::donation-changed', (data) => {
                        if (String(data.id) !== String(this.productId)) {
                            return;
                        }
                        this.amount = data.price;
                    });
                }
                else if (salla.url.is_page('product.single')) {
                    salla.product.event?.onPriceUpdated(response => {
                        this.amount = response.data.price;
                    });
                }
                this.isApplePayActive = salla.helpers.hasApplePay()
                    && salla.config.get('store.settings.payments')?.includes('apple_pay')
                    && salla.config.get('store.settings.is_salla_gateway', false);
                let applePaySdk = document.getElementById('apple-pay-sdk');
                if (applePaySdk || !this.isApplePayActive) {
                    salla.logger.warn('üçè Pay: Skipped load apple pay because ' + (applePaySdk ? 'already loaded' : 'is not available in the browser'));
                    resolve(true);
                    return;
                }
                const script = document.createElement('script');
                script.src = 'https://applepay.cdn-apple.com/jsapi/v1/apple-pay-sdk.js';
                script.setAttribute('id', 'apple-pay-sdk');
                script.async = true;
                document.body.appendChild(script);
                resolve(true);
            });
        });
    }
    render() {
        return h(Host, { key: '46c3a8b699f4390166d027a0eb2d34451a1dd6f1' }, this.quickBuyButton());
    }
    quickBuyButton() {
        return h("apple-pay-button", { locale: salla.config.get('user.language_code'), onClick: () => this.quickBuyHandler(), "data-quick-purchase": "applepay", class: "s-quick-buy-apple-pay", "data-is-applepay": "1", buttonstyle: "black", type: this.type });
    }
    get host() { return getElement(this); }
};
SallaQuickBuy.style = sallaQuickBuyCss;

var CelebrationIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>party-horn</title>
<path fill="currentColor" d="M5.333 4.013c0.736 0 1.333-0.596 1.333-1.333v-0.013c0-0.737-0.597-1.327-1.333-1.327s-1.333 0.603-1.333 1.34 0.597 1.333 1.333 1.333zM11.333 10c0.341 0 0.683-0.131 0.943-0.391 1.541-1.54 2.391-3.589 2.391-5.771v-2.505c0-0.737-0.597-1.333-1.333-1.333s-1.333 0.596-1.333 1.333v2.505c0 1.468-0.572 2.848-1.609 3.885-0.521 0.521-0.521 1.364 0 1.885 0.26 0.26 0.601 0.391 0.943 0.391zM18.667 9.993c0.319 0 0.639-0.115 0.895-0.345 0.383-0.347 0.684-0.325 1.497-0.22 0.923 0.124 2.319 0.307 3.636-0.887 1.293-1.172 1.303-2.54 1.308-3.539 0.005-0.887 0.043-1.228 0.432-1.581 0.361-0.327 0.621-0.335 1.493-0.216 0.923 0.12 2.317 0.307 3.635-0.884 0.545-0.495 0.587-1.337 0.093-1.883-0.493-0.547-1.336-0.589-1.884-0.093-0.361 0.325-0.621 0.333-1.493 0.216-0.921-0.119-2.317-0.305-3.635 0.884-1.293 1.173-1.303 2.541-1.308 3.54-0.005 0.885-0.043 1.227-0.432 1.58-0.383 0.348-0.683 0.327-1.497 0.22-0.924-0.124-2.32-0.305-3.636 0.887-0.545 0.495-0.587 1.339-0.092 1.884 0.264 0.291 0.625 0.437 0.988 0.437zM18.667 16.013c0.736 0 1.333-0.596 1.333-1.333v-0.013c0-0.737-0.597-1.327-1.333-1.327s-1.333 0.603-1.333 1.34 0.597 1.333 1.333 1.333zM30.667 17.333h-2.505c-2.179 0-4.228 0.849-5.771 2.391-0.521 0.521-0.521 1.364 0 1.885 0.26 0.26 0.603 0.391 0.944 0.391s0.683-0.131 0.943-0.391c1.023-1.023 2.439-1.609 3.884-1.609h2.505c0.736 0 1.333-0.596 1.333-1.333s-0.597-1.333-1.333-1.333zM30.667 10.66c-0.736 0-1.333 0.603-1.333 1.34s0.597 1.333 1.333 1.333 1.333-0.596 1.333-1.333v-0.013c0-0.736-0.597-1.327-1.333-1.327zM29.333 26.66c-0.736 0-1.333 0.603-1.333 1.34s0.597 1.333 1.333 1.333 1.333-0.596 1.333-1.333v-0.013c0-0.736-0.597-1.327-1.333-1.327zM7.456 11.057c-0.327-0.327-0.799-0.46-1.249-0.356-0.449 0.107-0.812 0.439-0.959 0.876l-5.036 15.113c-0.487 1.457-0.113 3.037 0.973 4.125 0.772 0.771 1.792 1.183 2.84 1.183 0.428 0 0.861-0.068 1.284-0.209l15.112-5.037c0.439-0.145 0.769-0.508 0.876-0.959 0.107-0.449-0.028-0.921-0.355-1.249zM4.467 29.259c-0.503 0.163-1.023 0.043-1.395-0.329-0.373-0.373-0.497-0.896-0.329-1.396l4.355-13.065 10.436 10.435z"></path>
</svg>
`;

var PortraitIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>portrait</title>
<path d="M24 1.333h-16c-3.676 0-6.667 2.991-6.667 6.667v16c0 3.028 2.041 5.561 4.811 6.371 0.004 0.001 0.008 0.003 0.012 0.004 0.591 0.172 1.2 0.292 1.844 0.292h16c0.644 0 1.253-0.12 1.843-0.292 0.004-0.001 0.008-0.003 0.012-0.004 2.771-0.809 4.812-3.343 4.812-6.371v-16c0-3.676-2.991-6.667-6.667-6.667zM8.012 28c0.121-1.915 3.363-4 7.988-4s7.868 2.085 7.988 4zM28 24c0 1.24-0.579 2.335-1.467 3.069-0.768-3.288-5.112-5.736-10.533-5.736s-9.765 2.448-10.533 5.736c-0.888-0.735-1.467-1.829-1.467-3.069v-16c0-2.205 1.795-4 4-4h16c2.205 0 4 1.795 4 4zM16 6.667c-3.308 0-6 2.692-6 6s2.692 6 6 6 6-2.692 6-6-2.692-6-6-6zM16 16c-1.839 0-3.333-1.495-3.333-3.333s1.495-3.333 3.333-3.333 3.333 1.495 3.333 3.333-1.495 3.333-3.333 3.333z"></path>
</svg>
`;

var IphoneXIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>iphone-x</title>
<path d="M24 0h-16c-2.205 0-4 1.795-4 4v24c0 2.205 1.795 4 4 4h16c2.205 0 4-1.795 4-4v-24c0-2.205-1.795-4-4-4zM25.333 28c0 0.736-0.597 1.333-1.333 1.333h-16c-0.736 0-1.333-0.597-1.333-1.333v-24c0-0.735 0.597-1.333 1.333-1.333h4c0 1.471 1.196 2.667 2.667 2.667h2.667c1.471 0 2.667-1.196 2.667-2.667h4c0.736 0 1.333 0.599 1.333 1.333z"></path>
</svg>
`;

const sallaQuickOrderCss = ".s-quick-order-expandable:not(.s-quick-order-shown){overflow:hidden}";

const SallaQuickOrder = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.quickOrderSubmited = createEvent(this, "quickOrderSubmited");
        /**
         * quick order title
         */
        this.quickOrderTitle = 'ŸÑŸäÿ¥ ÿ™ŸÜÿ™ÿ∏ÿ±ÿü';
        /**
         * quick order sub title
         */
        this.subTitle = 'ÿßÿ≠ÿµŸÑ ÿπŸÑŸâ ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿßŸÑÿ¢ŸÜ';
        /**
         * quick order pay button text
         */
        this.payButtonTitle = 'ÿßÿ∑ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨';
        /**
         * quick order confirm pay button text
         */
        this.confirmPayButtonTitle = 'ÿßÿ¥ÿ™ÿ± ÿßŸÑÿ¢ŸÜ';
        /**
         * agreement text from server or from props
         */
        this.agreementText = salla.lang.get('pages.checkout.show_full_agreement');
        /**
         * is email required
         */
        this.isEmailRequired = false;
        /**
         * Quick Order Style
         */
        this.quickOrderStyle = 'default';
        this.isAvailable = false;
        this.oneClick = false;
        this.expanded = false;
        this.isTermsRequired = false;
        this.countryCode = salla.config.get('user.country_code', 'SA') || 'SA';
        this.submitSucess = false;
        //Langugae states
        this.placeHolderEmail = salla.lang.get('common.elements.email');
        this.emailOptional = salla.lang.get('common.elements.optional');
        this.agreementShowText = salla.lang.get('pages.checkout.show_full_agreement');
        this.agreementModalHead = salla.lang.get('pages.checkout.full_agreement');
        this.userNameLabel = salla.lang.get('pages.products.your_name');
        this.termsChecked = false;
        salla.onReady(() => {
            this.productId = this.productId || salla.config.get('page.id');
        });
        salla.lang.onLoaded(() => {
            this.placeHolderEmail = salla.lang.get('common.elements.email');
            this.emailOptional = salla.lang.get('common.elements.optional');
            this.agreementShowText = salla.lang.get('pages.checkout.show_full_agreement');
            this.agreementModalHead = salla.lang.get('pages.checkout.full_agreement');
            this.userNameLabel = salla.lang.get('pages.products.your_name');
        });
    }
    getBtnColor() {
        return this.quickOrderStyle === 'default' ? 'light' : 'primary';
    }
    getErrorMessage(type, name) {
        return name == 'terms'
            ? salla.lang.get('pages.checkout.check_agreement')
            : salla.lang.get(`common.errors.${type}`, { attribute: name == 'name' ? this.userNameLabel : this.placeHolderEmail });
    }
    handleInvalidInput(e) {
        let input = e.target;
        let validity = input.validity;
        let errorMessage;
        if (validity.valueMissing) {
            errorMessage = this.getErrorMessage('field_required', input.name);
            console.log(this.getErrorMessage('field_required', input.name));
        }
        else if (validity.typeMismatch) {
            errorMessage = this.getErrorMessage('invalid_value', input.name);
        }
        input.setCustomValidity(errorMessage);
    }
    async setWrapperHeight() {
        let expandable = this.host.querySelector('.s-quick-order-expandable');
        setTimeout(() => {
            if (expandable.style.maxHeight || this.oneClick) {
                expandable.style.maxHeight = null;
            }
            else {
                expandable.style.maxHeight = expandable.scrollHeight + "px";
            }
        }, 50);
    }
    getDarkOrLight() {
        return this.quickOrderStyle === 'default' && salla.config.get('theme.color.is_dark') ? 'dark' : 'light';
    }
    getStyleColor() {
        return {
            gray: '#f3f3f3',
            white: '#ffffff',
            default: salla.config.get('theme.color.primary'),
        }[this.quickOrderStyle] || '#f3f3f3';
    }
    async submit(e, checkOneClick = false) {
        e.preventDefault();
        if (checkOneClick && !this.oneClick) {
            this.expanded = !this.expanded;
            this.setWrapperHeight();
            return;
        }
        return this.submitBtn.load()
            .then(() => this.getPayload())
            .then((payload) => salla.api.cart.createQuickOrder(payload))
            .then(() => {
            setTimeout(() => {
                this.submitBtn.stop();
                this.submitSucess = true;
                this.quickOrderSubmited.emit();
            }, 200);
        })
            .catch(error => error && (console.error(error), this.submitBtn.stop()));
    }
    async getPayload() {
        if (this.oneClick) {
            return {
                product_ids: [this.productId],
                agreement: true,
            };
        }
        return {
            product_ids: [this.productId],
            email: this.emailInput?.value,
            phone: Number((await this.phoneInput?.getValues())?.phone),
            country_code: (await this.phoneInput?.getValues())?.countryCode || this.countryCode,
            name: this.nameInput?.value,
            agreement: this.termsChecked,
        };
    }
    formatAgreementText(agreement_text, length = 150) {
        if (!agreement_text)
            return '';
        if (agreement_text.length <= length)
            return agreement_text;
        const parsedToDOM = new DOMParser().parseFromString(agreement_text, 'text/html');
        return parsedToDOM.documentElement.innerText.substring(0, length) + '...';
    }
    loadQuickOrderSettings() {
        let data = salla.config.get('store.settings.quick_order');
        if (!data) {
            return Promise.resolve();
        }
        this.user = salla.config.get('user') || salla.storage.get('user') || {};
        this.countryCode = this.user?.country_code || this.countryCode;
        // make email required if user is gust or is required from server
        this.isEmailRequired = this.user?.email ? false : this.isEmailRequired;
        // check if one click is available
        this.oneClick = this.user?.email;
        this.initComponentData(data);
        return Promise.resolve();
        // return salla.api.withoutNotifier(() => salla.api.cart.getQuickOrderSettings().then(res => this.initComponentData(res.data)));
    }
    initComponentData(data) {
        this.quickOrderTitle = data.title;
        this.subTitle = data.sub_title;
        this.payButtonTitle = data.order_now_button;
        this.isEmailRequired = data.is_email_required;
        this.isTermsRequired = data.show_agreement;
        this.agreementText = data.agreement;
        this.confirmPayButtonTitle = data.confirm_button;
        this.thanksMessage = data.thanks_message;
        this.quickOrderStyle = data.style;
        this.isAvailable = true;
        // toggle oneClick if true
        this.oneClick = this.oneClick && !this.isTermsRequired;
    }
    componentWillLoad() {
        return new Promise(resolve => salla.onReady(() => this.loadQuickOrderSettings().then(resolve)));
    }
    render() {
        if (!this.isAvailable) {
            return;
        }
        if (this.submitSucess) {
            return (h(Host, { class: "s-quick-order" }, h("div", { class: 's-quick-order-confirm', style: {
                    backgroundColor: salla.config.get('theme.color.primary') + '10',
                    borderColor: salla.config.get('theme.color.primary') + '10',
                    color: salla.config.get('theme.color.primary')
                } }, h("i", { innerHTML: CelebrationIcon }), h("span", null, this.thanksMessage))));
        }
        return (h(Host, { class: `s-quick-order s-quick-order-${this.getDarkOrLight()}` }, h("div", { class: `s-quick-order-container s-quick-order-${this.quickOrderStyle}`, style: { backgroundColor: this.getStyleColor() } }, h("div", { class: "s-quick-order-button-cont" }, h("div", null, h("h3", null, this.quickOrderTitle), h("p", null, this.subTitle)), h("salla-button", { class: this.expanded ? "s-quick-order-btn-close" : "", onClick: (e) => this.submit(e, true), color: this.getBtnColor() }, this.oneClick
            ? this.confirmPayButtonTitle : this.expanded ? h("i", { innerHTML: Cancel }) : this.confirmPayButtonTitle)), h("form", { onSubmit: (e) => this.submit(e), class: 's-quick-order-expandable ' + (this.expanded ? 's-quick-order-shown' : '') }, Salla.config.isGuest() &&
            [
                h("div", { class: "s-form-group" }, h("span", { innerHTML: PortraitIcon }), h("input", { type: "text", required: true, class: "s-form-control s-quick-order-phone-field", name: 'name', placeholder: this.userNameLabel, ref: el => (this.nameInput = el) })),
                h("div", { class: "s-quick-order-flex-input" }, h("div", { class: "s-form-group" }, h("span", { innerHTML: IphoneXIcon }), h("salla-tel-input", { ref: el => (this.phoneInput = el) })), h("div", { class: "s-form-group" }, h("span", { innerHTML: MailIcon }), h("input", { type: "email", class: "s-form-control s-quick-order-email-field", name: 'email', required: this.isEmailRequired, placeholder: this.placeHolderEmail + ' ' + (this.isEmailRequired ? '' : this.emailOptional), ref: el => (this.emailInput = el) }))),
            ], this.isTermsRequired && (h("label", { htmlFor: "terms", class: "s-quick-order-terms" }, h("input", { type: "checkbox", required: true, name: 'terms', id: 'terms', ref: el => (this.termsInput = el), onChange: () => (this.termsChecked = this.termsInput.checked), class: "s-checkbox" }), h("span", { class: "s-form-label" }, " ", h("div", { innerHTML: this.formatAgreementText(this.agreementText, 150) }, this.agreementText.length > 150 && (h("salla-button", { shape: "link", onClick: () => this.agreementModal.open() }, this.agreementShowText))), " "))), h("salla-button", { type: "submit", color: this.getBtnColor(), width: "wide", ref: el => (this.submitBtn = el) }, this.payButtonTitle)), h("salla-modal", { "modal-title": this.agreementModalHead, ref: modal => (this.agreementModal = modal) }, h("article", { innerHTML: this.agreementText })))));
    }
    componentDidLoad() {
        this.host.querySelectorAll('input').forEach(input => {
            input.addEventListener('invalid', e => {
                this.handleInvalidInput(e);
            });
            input.addEventListener('input', () => {
                input.setCustomValidity('');
                input.reportValidity();
            });
        });
    }
    get host() { return getElement(this); }
};
SallaQuickOrder.style = sallaQuickOrderCss;

var WishListIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>star</title>
<path d="M31.819 12.077c-0.367-0.883-1.209-1.411-2.259-1.411h-8.437l-2.681-8.871c-0.347-1.075-1.329-1.796-2.443-1.796s-2.096 0.721-2.447 1.805l-2.788 8.861h-8.275c-1.076 0-1.939 0.533-2.308 1.427-0.375 0.904-0.159 2.012 0.525 2.693 0.044 0.044 0.092 0.085 0.141 0.124l6.811 5.101-2.773 8.567c-0.344 1.063 0.019 2.228 0.899 2.899 0.459 0.351 1.001 0.527 1.544 0.527 0.528 0 1.056-0.165 1.511-0.499l7.159-5.267 7.161 5.268c0.896 0.659 2.168 0.645 3.051-0.028 0.884-0.671 1.245-1.836 0.901-2.9l-2.773-8.567 6.811-5.101c0.051-0.037 0.099-0.080 0.143-0.124 0.687-0.687 0.904-1.8 0.528-2.709zM21.976 18.448c-0.456 0.343-0.644 0.936-0.469 1.477l3.044 9.293-7.763-5.711c-0.235-0.173-0.513-0.259-0.791-0.259s-0.556 0.085-0.791 0.259l-7.713 5.676 2.997-9.257c0.175-0.541-0.013-1.136-0.469-1.477l-6.829-5.116h8.551c0.583 0 1.097-0.377 1.272-0.933l2.981-9.479 2.861 9.465c0.169 0.561 0.688 0.947 1.276 0.947h8.672z"></path>
</svg>
`;

var ShippingFast = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>shipping-fast</title>
<path d="M10.667 14.667c0-0.737-0.597-1.333-1.333-1.333h-8c-0.736 0-1.333 0.596-1.333 1.333s0.597 1.333 1.333 1.333h8c0.736 0 1.333-0.596 1.333-1.333zM9.333 18.667c-2.941 0-5.333 2.392-5.333 5.333s2.392 5.333 5.333 5.333 5.333-2.392 5.333-5.333-2.392-5.333-5.333-5.333zM9.333 26.667c-1.471 0-2.667-1.196-2.667-2.667s1.196-2.667 2.667-2.667 2.667 1.196 2.667 2.667-1.196 2.667-2.667 2.667zM1.333 10.667h5.333c0.736 0 1.333-0.596 1.333-1.333s-0.597-1.333-1.333-1.333h-5.333c-0.736 0-1.333 0.596-1.333 1.333s0.597 1.333 1.333 1.333zM31.123 13.103l-3.147-3.935c-1.273-1.589-3.171-2.501-5.205-2.501h-1.437c0-2.205-1.795-4-4-4h-13.333c-0.736 0-1.333 0.596-1.333 1.333s0.597 1.333 1.333 1.333h13.333c0.735 0 1.333 0.597 1.333 1.333v1.333c0 0.248 0.087 0.468 0.204 0.667-0.117 0.199-0.204 0.419-0.204 0.667v5.333c0 0.737 0.597 1.333 1.333 1.333h9.333v6.667h-1.333c-0.063 0-0.117 0.028-0.179 0.036-0.583-2.313-2.664-4.036-5.155-4.036-2.941 0-5.333 2.392-5.333 5.333s2.392 5.333 5.333 5.333c2.491 0 4.572-1.723 5.155-4.036 0.061 0.008 0.116 0.036 0.179 0.036h2.667c0.736 0 1.333-0.596 1.333-1.333v-8.399c0-0.905-0.311-1.792-0.877-2.499zM21.333 13.333v-4h1.437c1.221 0 2.36 0.547 3.124 1.501l1.997 2.499zM22.667 26.667c-1.471 0-2.667-1.196-2.667-2.667s1.196-2.667 2.667-2.667 2.667 1.196 2.667 2.667-1.196 2.667-2.667 2.667z"></path>
</svg>
`;

const sallaRatingModalCss = "";

const SallaRatingModal = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.hasError = false;
        this.showContactWidget = true;
        this.dragAndDropFilesLabel = salla.lang.get('common.uploader.drag_and_drop_files');
        this.contactSubjectLabel = salla.lang.get('pages.rating.contact_subject');
        this.editReviewLabel = salla.lang.get('pages.rating.edit_review');
        this.allowedImagesTypesLabel = salla.lang.get('common.uploader.allowed_images_types');
        this.addImagesLabel = salla.lang.get('pages.rating.add_images');
        this.editImagesLabel = salla.lang.get('pages.rating.edit_images');
        this.threeImagesMax = salla.lang.get('common.uploader.max_three_images');
        this.areYouSureLabel = salla.lang.get('pages.rating.are_you_sure_you_want_to_delete_review');
        this.confirmDeletionLabel = salla.lang.get('pages.rating.confirm_deletion');
        this.cancelLabel = salla.lang.get('common.elements.cancel');
        this.confirmDeleteBtn = salla.lang.get('common.elements.confirm_delete');
        this.updatedSuccessfullyLabel = salla.lang.get("pages.rating.review_updated_successfully");
        this.deletedSuccessfullyLabel = salla.lang.get("pages.rating.review_deleted_successfully");
        this.allowAttachImages = salla.config.get('store.settings.rating.allow_attach_images');
        this.allowContactSupport = salla.config.get('store.settings.rating.allow_contact_support');
        this.contactUsLabel = salla.lang.get('blocks.footer.social');
        this.images = [];
        this.productImages = {};
        this.editItemImages = [];
        this.contact_body = (store, id, customer) => salla.lang.get('pages.rating.contact_subject', { store, id, customer });
        this.editMode = false;
        this.defaultMode = false;
        this.deleteMode = false;
        this.shouldOpenDeleteModal = false;
        this.editItem = null;
        this.contentRefs = [];
        this.hiddenInputs = [];
        this.isOpen = [];
        this.stepsCount = 0;
        this.currentIndex = 0;
        this.submitted = [];
        this.onOpen = (index) => {
            return new Promise((resolve) => {
                anime({
                    targets: this.contentRefs[index],
                    duration: 100,
                    height: this.contentRefs[index].scrollHeight,
                    opacity: [0, 1],
                    easing: 'easeOutQuart',
                    complete: () => resolve(),
                });
            });
        };
        this.onClose = (index) => {
            return new Promise((resolve) => {
                anime({
                    targets: this.contentRefs[index],
                    duration: 100,
                    height: 0,
                    opacity: [1, 0],
                    easing: 'easeOutQuart',
                    complete: () => resolve(),
                });
            });
        };
        this.toggleUploader = async (index) => {
            this.isOpen[index] = !this.isOpen[index];
            Helper.toggleElementClassIf(this.contentRefs[index], 'is-closed', 'is-opened', () => !this.isOpen[index]);
            await (this.isOpen[index] ? this.onOpen(index) : this.onClose(index));
            await new Promise((resolve) => setTimeout(resolve, 101));
            if (this.body && this.currentTab) {
                setTimeout(() => this.body.setAttribute('style', 'height:' + (this.currentTab.offsetHeight + (this.editMode ? 60 : 0)) + 'px'));
            }
        };
        salla.onReady(() => {
            this.orderId = salla.config.get('page.id');
        });
        salla.lang.onLoaded(() => {
            this.contactUsLabel = salla.lang.get('blocks.footer.social');
            const setNestedAsync = (lang, key, value) => {
                return new Promise((resolve) => {
                    salla.helpers.setNested(salla.lang.messages[lang], key, value);
                    resolve(true);
                });
            };
            const setTranslations = async () => {
                await setNestedAsync('ar.trans', 'common.uploader.drag_and_drop_files', 'ÿßÿ≥ÿ≠ÿ® ÿßŸÑŸÖŸÑŸÅÿßÿ™ Ÿàÿ£ŸÅŸÑÿ™Ÿáÿß ŸáŸÜÿß');
                await setNestedAsync('en.trans', 'common.uploader.drag_and_drop_files', 'Drag and drop files here');
                await setNestedAsync('ar.trans', 'common.uploader.allowed_images_types', ' .jpg ÿ£Ÿà jpeg ÿ£Ÿà png ŸäŸèÿ≥ŸÖÿ≠ ÿ®ÿ•ÿ∂ÿßŸÅÿ© ÿµŸàÿ± ÿ®ÿµŸäÿ∫ÿ©');
                await setNestedAsync('en.trans', 'common.uploader.allowed_images_types', 'Images in jpg, jpeg, or png format are allowed.');
                await setNestedAsync('ar.trans', 'pages.rating.add_images', 'ÿßÿ∂ÿßŸÅÿ© ÿµŸàÿ±');
                await setNestedAsync('en.trans', 'pages.rating.add_images', 'Add Images');
                await setNestedAsync('ar.trans', 'pages.rating.edit_images', 'ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿµŸàÿ±');
                await setNestedAsync('en.trans', 'pages.rating.edit_images', 'Edit Images');
                await setNestedAsync('ar.trans', 'pages.rating.edit_review', 'ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ™ŸÇŸäŸäŸÖ');
                await setNestedAsync('en.trans', 'pages.rating.edit_review', 'Edit review');
                await setNestedAsync('ar.trans', 'pages.rating.confirm_deletion', 'ÿ™ÿ£ŸÉŸäÿØ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ™ŸÇŸäŸäŸÖ');
                await setNestedAsync('en.trans', 'pages.rating.confirm_deletion', 'Confirm review deletion');
                await setNestedAsync('ar.trans', 'pages.rating.are_you_sure_you_want_to_delete_review', 'ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ≠ÿ∞ŸÅ ÿ™ŸÇŸäŸäŸÖŸÉÿü');
                await setNestedAsync('en.trans', 'pages.rating.are_you_sure_you_want_to_delete_review', 'Are you sure you want to delete your review?');
                await setNestedAsync('ar.trans', 'pages.rating.review_updated_successfully', 'ÿ™ŸÖ ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ™ŸÇŸäŸäŸÖ ÿ®ŸÜÿ¨ÿßÿ≠');
                await setNestedAsync('en.trans', 'pages.rating.review_updated_successfully', 'The review has been successfully updated.');
                await setNestedAsync('ar.trans', 'pages.rating.review_deleted_successfully', 'ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ™ŸÇŸäŸäŸÖ ÿ®ŸÜÿ¨ÿßÿ≠');
                await setNestedAsync('en.trans', 'pages.rating.review_deleted_successfully', 'The review has been successfully deleted.');
                await setNestedAsync('ar.trans', 'common.uploader.max_three_images', '.ÿ£ÿ∂ŸÅ 3 ÿµŸàÿ± ŸÉÿ≠ÿØ ÿ£ŸÇÿµŸâ');
                await setNestedAsync('en.trans', 'common.uploader.max_three_images', 'Add up to 3 images maximum.');
                await setNestedAsync('ar.trans', 'common.elements.confirm_delete', 'ÿ™ÿ£ŸÉŸäÿØ ÿßŸÑÿ≠ÿ∞ŸÅ');
                await setNestedAsync('en.trans', 'common.elements.confirm_delete', 'Confirm deletion');
                this.dragAndDropFilesLabel = salla.lang.get('common.uploader.drag_and_drop_files');
                this.allowedImagesTypesLabel = salla.lang.get('common.uploader.allowed_images_types');
                this.addImagesLabel = salla.lang.get('pages.rating.add_images');
                this.threeImagesMax = salla.lang.get('common.uploader.max_three_images');
                this.contactSubjectLabel = salla.lang.get('pages.rating.contact_subject');
                this.editReviewLabel = salla.lang.get('pages.rating.edit_review');
                this.editImagesLabel = salla.lang.get('pages.rating.edit_images');
                this.areYouSureLabel = salla.lang.get('pages.rating.are_you_sure_you_want_to_delete_review');
                this.confirmDeletionLabel = salla.lang.get('pages.rating.confirm_deletion');
                this.cancelLabel = salla.lang.get("common.elements.cancel");
                this.updatedSuccessfullyLabel = salla.lang.get("pages.rating.review_updated_successfully");
                this.deletedSuccessfullyLabel = salla.lang.get("pages.rating.review_deleted_successfully");
                this.confirmDeleteBtn = salla.lang.get("common.elements.confirm_delete");
                this.contact_body = (store, id, customer) => salla.lang.get('pages.rating.contact_body', { store, id, customer });
            };
            setTranslations();
        });
    }
    /**
     * Show the rating modal
     */
    async open() {
        this.defaultMode = true;
        return new Promise((resolve) => {
            setTimeout(() => {
                this.modal.open().then(() => this.order || salla.api.withoutNotifier(() => salla.rating.api.order(this.orderId ? this.orderId : salla.config.get('page.id'))).then(res => this.order = res.data))
                    .then(() => this.modal.setTitle(salla.lang.get('pages.rating.rate_order') + ' <span class="unicode">(#' + this.order.id + ')</span>'))
                    .then(() => this.modal.stopLoading())
                    .then(() => this.stepsCount = [this.order.testimonials_enabled, this.order.products_enabled, this.order.shipping_enabled].filter(enabled => enabled).length)
                    .then(() => setTimeout(() => this.handleWizard(), 100))
                    .catch(e => {
                    resolve(false);
                    this.hasError = true;
                    this.errorMessage = e.response?.data?.error?.message || e.response?.data;
                    this.modal.stopLoading();
                });
                resolve(true);
            }, 50);
        });
    }
    async openEditModal(params) {
        this.defaultMode = false;
        this.editMode = true;
        this.editType = params.type;
        this.editFeedbackId = params.feedback_id;
        try {
            await this.fetchEditItem(params.feedback_id);
            this.editModal.open();
        }
        catch (e) {
            this.hasError = true;
            this.errorMessage = e.response?.data?.error?.message || e.response?.data;
        }
    }
    async fetchEditItem(feedbackId) {
        const endpoint = `rating/${feedbackId}/show`;
        const response = await salla.api.request(endpoint);
        this.editItem = response.data;
        if (this.allowAttachImages && this.editType == "product" && this.editItem.images.length) {
            this.editItemImages = this.editItem.images.map(img => {
                return { id: `${Math.floor(100 + Math.random() * 900)}`, url: img };
            });
        }
    }
    async editReview() {
        let data = {};
        this.editModal.querySelectorAll('[name]').forEach((input) => {
            let inputData = salla.helpers.inputData(input.name, input.value, data);
            data[inputData.name] = inputData.value;
        });
        data.images && (data.images = data.images.split(','));
        const endpoint = `rating/${this.editFeedbackId}`;
        await salla.api.request(endpoint, data, 'put').then((res) => {
            this.editModal.close();
            salla.notify.success(res.message || this.updatedSuccessfullyLabel);
            setTimeout(() => {
                window.location.reload();
            }, 500);
        });
    }
    async openDeleteModal(params) {
        this.defaultMode = false;
        this.deleteMode = true;
        this.deleteFeedbackId = params.feedback_id;
        this.shouldOpenDeleteModal = true;
        return new Promise((resolve) => {
            setTimeout(() => {
                this.deleteModal.open().then(() => resolve(true));
            }, 50);
        });
    }
    async deleteReview() {
        const endpoint = `rating/${this.deleteFeedbackId}`;
        await salla.api.request(endpoint, null, 'delete').then(() => {
            this.deleteModal.close();
            salla.notify.success(this.deletedSuccessfullyLabel);
            setTimeout(() => {
                window.location.reload();
            }, 500);
        });
    }
    /**
     * Show the rating modal
     */
    async close() {
        return this.modal.close();
    }
    // handle wizard
    handleWizard() {
        this.steps = this.modal.querySelectorAll(".s-rating-modal-step");
        this.dots = this.modal.querySelectorAll(".s-rating-modal-step-dot");
        this.showActiveStep();
    }
    showActiveStep(current = null) {
        this.currentTab = current || this.steps[this.currentIndex];
        Helper.toggleClassIf('.s-rating-modal-step-dot', 's-rating-modal-bg-gray', 's-rating-modal-bg-primary', dot => dot != this.dots[this.currentIndex])
            .toggleClassIf('.s-rating-modal-step', 's-rating-modal-active', 's-rating-modal-hidden', tab => tab == this.currentTab);
        if (this.currentIndex != 0) {
            // the animation
            Helper.toggleElementClassIf(this.currentTab, 's-rating-modal-unactive', 's-rating-modal-hidden', () => true);
            setTimeout(() => Helper.toggleElementClassIf(this.currentTab, 's-rating-modal-active', 's-rating-modal-unactive', () => true), 300);
        }
        // Btn text
        let nextType = this.steps[this.currentIndex + 1]?.dataset.type;
        this.nextBtn?.setText(nextType ? salla.lang.get('pages.rating.rate') + ' ' + salla.lang.get('pages.rating.' + nextType)
            : salla.lang.get('pages.rating.send_ratings'));
        setTimeout(() => this.body?.setAttribute('style', 'height:' + this.currentTab?.offsetHeight + 'px'));
    }
    previousTab() {
        this.currentIndex > 0 && this.currentIndex--;
        Helper.toggleElementClassIf(this.backBtn, 's-rating-modal-unvisiable', 'block', () => this.currentIndex == 0);
        this.showActiveStep();
    }
    submit() {
        this.submittedBefore() || this.validate();
        salla.config.canLeave = false;
        this.nextBtn.load()
            .then(() => this.submittedBefore() || this.sendFeedback())
            .then(() => this.currentTab.querySelectorAll('[name],.s-rating-modal-btn-star').forEach(el => el.setAttribute('disabled', '')))
            .then(() => this.currentIndex < this.stepsCount && this.currentIndex++)
            .then(() => this.showActiveStep())
            .then(() => Helper.toggleClassIf('#prev-btn', 'block', 's-rating-modal-unvisiable', () => true))
            .finally(() => {
            this.nextBtn.stop();
            salla.config.canLeave = true;
            if (this.currentIndex == this.stepsCount) {
                this.showThankYou();
                this.showContactWidget = false;
            }
            // this.modal.isClosable = false;
        });
    }
    submittedBefore() {
        return this.submitted.includes(this.currentIndex);
    }
    validate(rating = null, type = null) {
        if (!rating && this.currentTab.dataset.type === 'products') {
            const ratingForms = this.currentTab.querySelectorAll('.rating-outer-form');
            ratingForms.forEach(ratingForm => this.validate(ratingForm, 'product'));
            return;
        }
        rating = rating || this.currentTab;
        const stars = rating.querySelector('.rating_hidden_input').value;
        const validationMessage = rating.querySelector('.s-rating-modal-validation-msg');
        type = type || rating.dataset.type;
        if (!stars) {
            validationMessage.innerHTML = salla.lang.get(`pages.rating.rate_${type}_stars`).replace(' (:item)', '');
            throw new Error(validationMessage.innerHTML);
        }
        else {
            validationMessage.innerHTML = '';
        }
    }
    sendFeedback() {
        let data = {};
        this.currentTab.querySelectorAll('[name]').forEach((input) => {
            //decode names like `<input name="jamal[inner]" value="hi">` to be {name:jamal, value: {inner:"hi"}}
            let inputData = salla.helpers.inputData(input.name, input.value, data);
            data[inputData.name] = inputData.value;
        });
        if (this.allowAttachImages && data.products) {
            for (let productIndex in data.products) {
                if (data.products[productIndex].images) {
                    data.products[productIndex].images = data.products[productIndex].images.split(',');
                }
            }
        }
        if (Object.keys(data).length == 0) {
            return;
        }
        data['order_id'] = this.orderId;
        data['type'] = this.currentTab.dataset.type;
        this.submitted.push(this.currentIndex);
        return salla.rating.api[this.currentTab.dataset.type](data);
    }
    showThankYou() {
        let seconds = 10;
        let timeToClose = setInterval(() => {
            this.thanksTime.innerHTML = '00:0' + (seconds--);
            if (seconds > 0) {
                return;
            }
            clearInterval(timeToClose);
            this.thanksTime.remove();
            this.close().then(() => window.location.reload());
        }, 1000);
        this.modal.querySelector('.s-rating-modal-footer').classList.add('s-rating-modal-unvisiable');
        this.showActiveStep(this.thanksTab);
    }
    getFilepondPlaceholder() {
        return `<div class="s-rating-modal-filepond-placeholder"><span class="s-rating-modal-filepond-placeholder-icon">${ImageIcon}</span><p class="s-rating-modal-filepond-placeholder-text">${this.dragAndDropFilesLabel}<br>
    <span> ${this.allowedImagesTypesLabel} <br> ${this.threeImagesMax} </span></p></div>`;
    }
    getCustomerName() {
        let firstName = salla.config.get('user.first_name') || salla.storage.get('user.first_name') || '';
        let lasName = salla.config.get('user.last_name') || salla.storage.get('user.last_name') || '';
        return `${firstName} ${lasName}`;
    }
    handleSendEmail() {
        const subject = `${this.contactSubjectLabel} #${this.order.id}`;
        const body = this.contact_body(salla.config.get('store.name'), this.order.id, this.getCustomerName());
        const mailtoLink = `mailto:${salla.config.get('store.contacts.email')}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
        window.open(mailtoLink, '_blank');
    }
    handleSendWhatsApp() {
        const body = this.contact_body(salla.config.get('store.name'), this.order.id, this.getCustomerName());
        const whatsappLink = `https://wa.me/${salla.config.get('store.contacts.whatsapp')}?text=${encodeURIComponent(body)}`;
        window.open(whatsappLink, '_blank');
    }
    resetData(isOpen) {
        if (isOpen.detail) {
            return;
        }
        this.modal && this.modal.close();
        this.editItem = null;
        this.editItemImages = [];
        this.hiddenInputs[1] && (this.hiddenInputs[1].value = '');
        this.deleteFeedbackId = null;
        this.editFeedbackId = null;
        this.shouldOpenDeleteModal = false;
        this.editMode = false;
        this.deleteMode = false;
        this.defaultMode = false;
    }
    getDeleteModal() {
        return (h("salla-modal", { ref: modal => this.deleteModal = modal, width: "xs", onModalVisibilityChanged: (isOpen) => this.resetData(isOpen) }, h("div", { class: "s-rating-modal-delete-wrapper", ref: el => this.body = el }, h("h3", null, this.confirmDeletionLabel), h("p", null, this.areYouSureLabel), h("div", { class: "s-rating-modal-delete-actions" }, h("salla-button", { loaderPosition: 'center', onClick: () => this.deleteReview() }, this.confirmDeleteBtn), h("salla-button", { color: 'danger', fill: 'outline', onClick: () => this.deleteModal.close() }, this.cancelLabel)))));
    }
    getEditModal() {
        return (h("salla-modal", { ref: modal => this.editModal = modal, width: "md", onModalVisibilityChanged: (isOpen) => this.resetData(isOpen) }, h("div", { class: "s-rating-modal-edit-wrapper", ref: el => this.body = el }, this.editType === "store" && this.editItem ? (h("div", { class: "rating-outer-form s-rating-modal-step-wrap s-rating-modal-step", "data-type": "store", ref: currentTab => this.currentTab = currentTab }, h("div", { class: "s-rating-modal-rounded-icon" }, h("img", { src: salla.config.get('store.logo', 'https://assets.salla.sa/cp/assets/images/logo-new.png'), alt: "store name", class: "s-rating-modal-store-logo" })), h("h2", { class: "s-rating-modal-title" }, salla.lang.get('pages.rating.rate_the_store')), h("div", { class: "s-rating-modal-stars-company" }, h("salla-rating-stars", { withLabel: true, size: "large", editable: true, value: this.editItem.stars })), h("textarea", { name: "content", value: this.editItem.content, class: "s-rating-modal-comment", placeholder: salla.lang.get('pages.rating.write_store_rate') }), h("small", { class: "s-rating-modal-validation-msg" }))) : null, this.editType === "shipping" && this.editItem ? (h("div", { class: "rating-outer-form s-rating-modal-step-wrap s-rating-modal-step", "data-type": "shipping", ref: currentTab => this.currentTab = currentTab }, this.editItem.shipping.logo
            ? h("div", { class: "s-rating-modal-rounded-icon" }, h("img", { src: this.editItem.shipping.logo, class: "s-rating-modal-shipping-logo", alt: this.editItem.shipping.name }))
            : h("span", { class: "s-rating-modal-icon", innerHTML: ShippingFast }), h("div", { class: "s-rating-modal-title" }, " ", salla.lang.get('pages.rating.rate_shipping') + ' ' + this.editItem.shipping.name), h("div", { class: "s-rating-modal-stars-company" }, h("salla-rating-stars", { withLabel: true, size: "large", editable: true, value: this.editItem.stars })), h("textarea", { name: "content", class: "s-rating-modal-comment", value: this.editItem.content, placeholder: salla.lang.get('pages.rating.write_shipping_rate') }), h("small", { class: "s-rating-modal-validation-msg" }))) : null, this.editType == "product" && this.editItem ? h("section", { class: "s-rating-modal-step", "data-type": "products", ref: currentTab => this.currentTab = currentTab }, h("div", { class: "s-rating-modal-product" }, h("div", { class: "rating-outer-form", "data-stars-error": salla.lang.get('pages.rating.rate_product_stars') }, h("div", { class: "s-rating-modal-product-img-wrap" }, h("img", { src: this.editItem.product.image.url, alt: this.editItem.product.name, class: "s-rating-modal-product-img" })), h("div", { class: "s-rating-modal-product-details" }, h("div", { class: "s-rating-modal-product-details-main" }, h("div", null, h("h3", { class: "s-rating-modal-product-title" }, " ", this.editItem.product.name), h("div", { class: "s-rating-modal-stars-product" }, h("salla-rating-stars", { withLabel: true, size: "small", editable: true, value: this.editItem.stars }))), this.allowAttachImages && h("salla-button", { class: `s-comments-item-like-btn mt-0`, loaderPosition: 'center', fill: 'outline', size: 'small', onClick: () => this.toggleUploader(1) }, h("span", null, this.editItemImages.length ? this.editImagesLabel : this.addImagesLabel), h("span", { innerHTML: ImageIcon }))), h("textarea", { value: this.editItem.content, placeholder: salla.lang.get('pages.rating.write_product_rate'), name: "content", class: "s-rating-modal-comment" }), h("small", { class: "s-rating-modal-validation-msg" }))), this.allowAttachImages && (h("div", { class: "s-rating-modal-uploader is-closed", ref: (el) => (this.contentRefs[1] = el) }, h("salla-file-upload", { name: "images", allowMultiple: true, maxFilesCount: 3, imagePreviewHeight: 117, filePosterHeight: 117, "instant-upload": true, type: "feedback", files: JSON.stringify(this.editItemImages), payloadName: "files[]", id: `file-${this.editItem.product.id}`, title: this.editItem.product.name, instantUpload: true, accept: "image/png, image/jpeg, image/jpg", url: salla.url.api('upload'), onUploaded: (e) => {
                this.editItemImages.push(e.detail);
                this.hiddenInputs[1].value = this.editItemImages.map(img => img.url).join();
            }, onRemoved: (e) => {
                const removedId = e.detail;
                if (!removedId)
                    return;
                this.editItemImages = this.editItemImages.filter(img => img.id !== removedId);
                this.hiddenInputs[1].value = this.editItemImages.map(img => img.url).join();
            }, labelIdle: this.getFilepondPlaceholder() }), h("input", { type: "hidden", name: "images", value: this.editItem.images.join(','), ref: (el) => (this.hiddenInputs[1] = el) })))))
            : null, h("div", { class: "s-rating-modal-footer s-rating-modal-footer-end" }, h("salla-button", { "loader-position": 'center', onClick: () => this.editReview() }, this.editReviewLabel)))));
    }
    render() {
        if (this.deleteMode) {
            return h(Host, { class: "s-rating-modal" }, this.getDeleteModal());
        }
        if (this.editMode) {
            return h(Host, { class: "s-rating-modal" }, this.getEditModal());
        }
        if (this.defaultMode) {
            return (h(Host, { class: "s-rating-modal" }, h("salla-modal", { class: "s-rating-modal-wrap", onModalVisibilityChanged: (isOpen) => this.resetData(isOpen), isLoading: true, width: "md", ref: modal => this.modal = modal }, h("div", { slot: 'loading' }, h("div", { class: "s-rating-modal-skeleton" }, h("salla-skeleton", { type: 'circle', height: '80px', width: '80px' }), h("salla-skeleton", { height: '15px', width: '60%' }), h("salla-skeleton", { height: '10px', width: '30%' }), h("div", { class: "s-rating-modal-skeleton-stars" }, [...Array(5)].map(() => h("div", { innerHTML: WishListIcon }))), h("salla-skeleton", { height: '100px', width: '100%' }), h("div", { class: "s-rating-modal-skeleton-footer" }, h("salla-skeleton", { height: '40px', width: '30%' })))), !this.hasError && this.order
                ? [h("div", { class: "s-rating-modal-wrapper", ref: el => this.body = el }, this.order?.testimonials_enabled ?
                        h("div", { class: "rating-outer-form s-rating-modal-step-wrap s-rating-modal-step s-rating-modal-hidden", "data-type": "store" }, h("div", { class: "s-rating-modal-rounded-icon" }, h("img", { src: salla.config.get('store.logo', 'https://assets.salla.sa/cp/assets/images/logo-new.png'), alt: "store name", class: "s-rating-modal-store-logo" })), h("h2", { class: "s-rating-modal-title" }, salla.lang.get('pages.rating.rate_the_store')), h("div", { class: "s-rating-modal-stars-company" }, h("salla-rating-stars", { withLabel: true, size: "large" })), h("textarea", { name: "comment", class: "s-rating-modal-comment", placeholder: salla.lang.get('pages.rating.write_store_rate') }), h("small", { class: "s-rating-modal-validation-msg" }))
                        : '', this.order.products_enabled
                        ? h("section", { class: "s-rating-modal-step s-rating-modal-hidden", "data-type": "products" }, this.order.products.map((item, index) => h("div", { class: "s-rating-modal-product", key: index }, h("div", { class: "rating-outer-form", "data-stars-error": salla.lang.get('pages.rating.rate_product_stars') }, h("div", { class: "s-rating-modal-product-img-wrap" }, h("img", { src: item.product.thumbnail, alt: item.product.name, class: "s-rating-modal-product-img" })), h("div", { class: "s-rating-modal-product-details" }, h("div", { class: "s-rating-modal-product-details-main" }, h("div", null, h("h3", { class: "s-rating-modal-product-title" }, " ", item.product.name), h("div", { class: "s-rating-modal-stars-product" }, h("salla-rating-stars", { withLabel: true, size: "small", name: `products[${index}][rating]` }))), this.allowAttachImages && h("salla-button", { class: `s-comments-item-like-btn mt-0`, loaderPosition: 'center', fill: 'outline', size: 'small', onClick: () => this.toggleUploader(index) }, h("span", null, this.addImagesLabel), h("span", { innerHTML: ImageIcon }))), h("input", { type: "hidden", name: `products[${index}][product_id]`, value: item.product.id }), h("textarea", { placeholder: salla.lang.get('pages.rating.write_product_rate'), name: `products[${index}][comment]`, class: "s-rating-modal-comment" }), h("small", { class: "s-rating-modal-validation-msg" }))), this.allowAttachImages && (h("div", { class: "s-rating-modal-uploader is-closed", ref: (el) => (this.contentRefs[index] = el) }, h("salla-file-upload", { name: "image", maxFilesCount: 3, imagePreviewHeight: 117, "instant-upload": true, type: "feedback", payloadName: "files[]", id: `file-${item.product.id}`, title: item.product.name, allowMultiple: true, instantUpload: true, accept: "image/png, image/jpeg, image/jpg", url: salla.url.api('upload'), onUploaded: (e) => {
                                if (!this.productImages[item.product.id]) {
                                    this.productImages[item.product.id] = [];
                                }
                                this.productImages[item.product.id].push(e.detail);
                                this.hiddenInputs[index].value = this.productImages[item.product.id].map(img => img.url);
                            }, onRemoved: (e) => {
                                const removedId = e.detail;
                                if (!removedId)
                                    return;
                                this.productImages[item.product.id] = this.productImages[item.product.id].filter(img => img.id !== removedId);
                                this.hiddenInputs[index].value = this.productImages[item.product.id].map(img => img.url);
                            }, labelIdle: this.getFilepondPlaceholder() }), h("input", { type: "hidden", name: `products[${index}][images]`, value: JSON.stringify(this.productImages[item.product.id]), ref: (el) => (this.hiddenInputs[index] = el) }))))))
                        : '', this.order.shipping_enabled && this.order.shipping?.company
                        ? h("div", { class: "rating-outer-form s-rating-modal-step-wrap s-rating-modal-step s-rating-modal-hidden", "data-type": "shipping" }, h("input", { type: "hidden", name: "shipping_company_id", value: this.order.shipping.company.id }), this.order.shipping.company.logo
                            ? h("div", { class: "s-rating-modal-rounded-icon" }, h("img", { src: this.order.shipping.company.logo, class: "s-rating-modal-shipping-logo", alt: this.order.shipping.company.name }))
                            : h("span", { class: "s-rating-modal-icon", innerHTML: ShippingFast }), h("div", { class: "s-rating-modal-title" }, " ", salla.lang.get('pages.rating.rate_shipping') + ' ' + this.order.shipping.company.name), h("div", { class: "s-rating-modal-stars-company" }, h("salla-rating-stars", { withLabel: true, size: "large" })), h("textarea", { name: "comment", class: "s-rating-modal-comment", placeholder: salla.lang.get('pages.rating.write_shipping_rate') }), h("small", { class: "s-rating-modal-validation-msg" }))
                        : '', h("div", { class: "s-rating-modal-thanks s-rating-modal-hidden", ref: el => this.thanksTab = el }, h("span", { class: "s-rating-modal-icon", innerHTML: CheckCircle2 }), h("h3", { class: "s-rating-modal-thanks-title" }, salla.lang.get('pages.rating.thanks')), h("div", { class: "s-rating-modal-thanks-msg", innerHTML: this.order.thanks_message }), h("time", { class: "s-rating-modal-thanks-time", ref: el => this.thanksTime = el }))), this.allowContactSupport && this.showContactWidget && (salla.config.get('store.contacts.whatsapp') || salla.config.get('store.contacts.email')) ? h("div", { class: "s-rating-modal-contact" }, h("p", null, this.contactUsLabel), h("div", { class: "s-rating-modal-contact-icons" }, salla.config.get('store.contacts.whatsapp') && h("span", { onClick: () => this.handleSendWhatsApp(), innerHTML: whatsapp$1 }), salla.config.get('store.contacts.email') && h("span", { onClick: () => this.handleSendEmail(), innerHTML: MailIcon }))) : '', h("div", { class: "s-rating-modal-footer" }, h("button", { ref: el => this.backBtn = el, onClick: () => this.previousTab(), class: "s-rating-modal-btn s-rating-modal-unvisiable" }, salla.lang.get('common.elements.back')), this.stepsCount > 1 ? h("ul", { class: "s-rating-modal-dots" }, [0, 1, 2].slice(0, this.stepsCount).map(() => h("li", { class: 's-rating-modal-bg-gray s-rating-modal-step-dot' }))) : '', h("salla-button", { "loader-position": 'center', ref: el => this.nextBtn = el, onClick: () => this.submit() }, salla.lang.get('common.elements.next')))]
                : h("salla-placeholder", { alignment: "center" }))));
        }
    }
    componentWillLoad() {
        salla.event.on('rating::open', () => this.open());
        salla.event.on('rating::edit', (params) => this.openEditModal(params));
        salla.event.on('rating::delete', (params) => this.openDeleteModal(params));
    }
    componentDidLoad() {
        salla.event.dispatch('rating::ready', this);
    }
    get host() { return getElement(this); }
};
SallaRatingModal.style = sallaRatingModalCss;

const sallaRatingStarsCss = "";

const SallaRatingStars = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.translationsLoaded = false;
        this.labels = [];
        this.reviewLabel = '';
        this.selectedStar = 0;
        /**
       * Sets input name.
       */
        this.name = 'rating';
        /**
        * Sets the height and width of the component. Defaults to medium.
        */
        this.size = 'medium';
        /**
       * Number of reviews to display.
       */
        this.reviews = 0;
        /**
        * Allows the rating to be editable.
        */
        this.editable = false;
    }
    async componentWillLoad() {
        await new Promise(resolve => {
            salla.lang.onLoaded(() => {
                this.labels = [
                    salla.lang.get('pages.rating.poor'),
                    salla.lang.get('pages.rating.average'),
                    salla.lang.get('pages.rating.good'),
                    salla.lang.get('pages.rating.very_good'),
                    salla.lang.get('pages.rating.excellent')
                ];
                if (this.value && this.withLabel) {
                    this.reviewLabel = this.labels[this.value - 1];
                }
                if (this.reviewsElement) {
                    this.reviewsElement.innerText = `(${salla.helpers.number(salla.lang.choice('pages.rating.reviews', this.reviews))})`;
                }
                this.translationsLoaded = true;
                resolve();
            });
        });
    }
    initiateRating() {
        this.host.addEventListener('click', this.handleRating.bind(this));
    }
    handleRating() {
        if (!this.starsElem)
            return;
        let activeStars = this.starsElem.querySelectorAll('.s-rating-stars-hovered');
        let selected = activeStars[activeStars.length - 1];
        if (!selected)
            return;
        let selectedIndex = parseInt(selected.getAttribute('data-star'));
        this.starsElem.querySelector('.rating_hidden_input').value = selectedIndex.toString();
        this.starsElem.querySelectorAll('.s-rating-stars-btn-star')
            .forEach((star, index) => Helper.toggleElementClassIf(star, 's-rating-stars-selected', 's-rating-stars-unselected', () => index < selectedIndex));
        this.starsElem.querySelectorAll('[aria-pressed]').forEach(star => star.removeAttribute('aria-pressed'));
        selected.setAttribute('aria-pressed', 'true');
        this.selectedStar = selectedIndex;
        this.withLabel && (this.reviewLabel = this.labels[selectedIndex - 1]);
    }
    triggerRatingProgrammatically(index) {
        if (!this.starsElem)
            return;
        const stars = this.starsElem.querySelectorAll('.s-rating-stars-btn-star');
        if (stars && index >= 0 && index <= stars.length) {
            // Simulate the hovering effect
            stars.forEach((s, i) => {
                s.classList.toggle('s-rating-stars-hovered', i <= index);
            });
            // Trigger the same logic as clicking
            this.handleRating();
        }
    }
    highlightSelectedStars() {
        let hoveredClass = 's-rating-stars-hovered', stars = this.starsElem?.querySelectorAll('.s-rating-stars-btn-star');
        stars?.forEach((star, index) => {
            star.addEventListener('mouseover', () => {
                for (let i = 0; i <= index; i++) {
                    stars[i].classList.add(hoveredClass);
                }
                this.withLabel && (this.reviewLabel = this.labels[index]);
            });
            star.addEventListener('mouseout', () => {
                star.classList.remove(hoveredClass);
                this.withLabel && (this.reviewLabel = this.selectedStar ? this.labels[this.selectedStar - 1] : '');
            });
        });
        this.starsElem?.addEventListener('mouseout', () => stars.forEach(star => star.classList.remove(hoveredClass)));
    }
    createStars(n) {
        let stars = [];
        for (let i = 0; i < 5; i++) {
            stars.push(h("span", { class: {
                    's-rating-stars-btn-star': true,
                    ['s-rating-stars-' + this.size]: true,
                    's-rating-stars-selected': i < n
                }, innerHTML: Rate }));
        }
        if (this.reviews > 0) {
            stars.push(h("span", { class: "s-rating-stars-reviews", ref: el => this.reviewsElement = el }, "(", salla.helpers.number(salla.lang.choice('pages.rating.reviews', this.reviews)), ")"));
        }
        return stars;
    }
    render() {
        return this.translationsLoaded ? (this.host.closest('.swiper-slide')?.classList.contains('swiper-slide-duplicate')
            ? ''
            : (h(Host, null, (this.value || this.value == 0) && !this.editable ?
                h("div", { class: "s-rating-stars-wrapper" }, this.createStars(this.value), this.withLabel && this.reviewLabel ? h("span", { class: "s-rating-stars-label" }, this.reviewLabel) : '')
                :
                    h("div", { class: "s-rating-stars-wrapper" }, h("div", { class: "s-rating-stars-element", ref: (el) => this.starsElem = el }, h("input", { type: "hidden", class: "rating_hidden_input", name: this.name, value: "" }), [1, 2, 3, 4, 5].map(star => h("button", { class: `s-rating-stars-btn-star s-rating-stars-` + this.size, "data-star": star }, h("span", { innerHTML: Rate })))), this.withLabel && this.reviewLabel ? h("span", { class: "s-rating-stars-label" }, this.reviewLabel) : '')))) : (h(Host, null));
    }
    componentDidLoad() {
        this.initiateRating();
        this.highlightSelectedStars();
        if (this.value && this.editable) {
            const stars = this.starsElem?.querySelectorAll('.s-rating-stars-btn-star');
            if (stars && this.value >= 0 && this.value <= stars.length) {
                this.triggerRatingProgrammatically(this.value - 1);
            }
        }
    }
    get host() { return getElement(this); }
};
SallaRatingStars.style = sallaRatingStarsCss;

const sallaReviewsSummaryCss = ":host{display:block}";

const SallaReviewsSummary = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.canRender = false;
        this.showRatingSummary = false;
        this.recommendationOnly = false;
        this.showRecommendation = false;
    }
    async componentWillLoad() {
        try {
            await salla.onReady();
            this.initializeLanguages();
            this.loadConfig();
            // Only load data if component should be displayed
            if (this.showRatingSummary || this.showRecommendation) {
                await this.loadSummary();
            }
        }
        catch (error) {
            console.error('Failed to initialize reviews summary component:', error);
        }
    }
    async loadConfig() {
        this.showRatingSummary = salla.config.get('store.settings.rating.show_rating_summary');
        this.showRecommendation = salla.config.get('store.settings.rating.show_recommendation');
        this.recommendationOnly = this.showRecommendation && !this.showRatingSummary;
    }
    initializeLanguages() {
        return Salla.lang.onLoaded(() => {
            Salla.lang.addBulk({
                "blocks.comments.based_on": { ar: "ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ", en: "Based on" },
                "blocks.comments.recommended": { ar: "ÿ£ŸàÿµŸàÿß ÿ®ÿßŸÑŸÖŸÜÿ™ÿ¨", en: "Recommended" }
            });
            this.basedOnLabel = salla.lang.get('blocks.comments.based_on');
            this.recommendedLabel = salla.lang.get('blocks.comments.recommended');
        });
    }
    async loadSummary() {
        if (!this.itemId) {
            console.error('Error loading reviews summary: itemId is not defined');
            return this.canRender = false;
        }
        try {
            const response = (await salla.api.request(`rating/summary/${this.itemId}`));
            if (!response?.data || (Array.isArray(response.data.reviews) && !response.data.reviews.length)) {
                this.canRender = false;
                this.data = null;
                return;
            }
            this.data = response.data;
            this.canRender = true;
        }
        catch (error) {
            this.canRender = false;
            this.data = null;
            console.error('Error loading reviews summary:', error);
        }
    }
    renderRecommendation() {
        if (!this.showRecommendation || !this.data?.recommendation) {
            return null;
        }
        const classes = {
            base: 's-reviews-summary-header-section',
            standalone: this.recommendationOnly ? 's-reviews-summary-recommendation-only' : ''
        };
        return (h("div", { class: `${classes.base} ${classes.standalone}`.trim() }, h("h4", { class: "s-reviews-summary-recommendation-percentage" }, "%", this.data?.recommendation), h("p", { class: "s-reviews-summary-count" }, this.recommendedLabel)));
    }
    render() {
        if (!this.canRender)
            return null;
        if (this.recommendationOnly)
            return this.renderRecommendation();
        const ratings = {
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            ...this.data.reviews
        };
        const reviewElements = Object.keys(ratings).reverse().map((rating) => {
            const percentage = ratings[rating];
            return (h("div", { key: rating, class: "s-reviews-summary-row" }, h("div", { class: "s-reviews-summary-row-rate" }, rating, " ", h("span", { innerHTML: Rate })), h("salla-progress-bar", { class: "s-reviews-summary-progress", value: percentage, target: 100, hideUnits: true, height: '16px' }), h("span", { class: "s-reviews-summary-percentage" }, percentage, "%")));
        });
        return (h(Host, { class: "s-reviews-summary-wrapper" }, h("div", { class: "s-reviews-summary-header" }, h("div", { class: "s-reviews-summary-header-section" }, h("h3", { class: "s-reviews-summary-average" }, this.data.rating), h("div", null, h("salla-rating-stars", { size: 'large', value: this.data.rating }), h("p", { class: "s-reviews-summary-count" }, this.basedOnLabel, " ", salla.helpers.number(salla.lang.choice('pages.rating.reviews', this.data.count))))), this.renderRecommendation()), h("div", { class: "s-reviews-summary-rows" }, reviewElements)));
    }
};
SallaReviewsSummary.style = sallaReviewsSummaryCss;

var StoreAlt = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>store-alt</title>
<path d="M6.667 24h5.333c0.736 0 1.333-0.596 1.333-1.333s-0.597-1.333-1.333-1.333h-5.333c-0.736 0-1.333 0.596-1.333 1.333s0.597 1.333 1.333 1.333zM31.86 10.071l-4-8c-0.227-0.452-0.688-0.737-1.193-0.737h-21.333c-0.505 0-0.967 0.285-1.193 0.737l-4 8c-0.092 0.184-0.14 0.389-0.14 0.596v18.667c0 0.737 0.597 1.333 1.333 1.333h29.333c0.736 0 1.333-0.596 1.333-1.333v-18.667c0-0.207-0.048-0.412-0.14-0.596zM6.157 4h19.685l3.333 6.667h-26.352zM24 28h-5.333v-9.333h5.333zM29.333 28h-2.667v-10.667c0-0.737-0.597-1.333-1.333-1.333h-8c-0.736 0-1.333 0.596-1.333 1.333v10.667h-13.333v-14.667h26.667zM6.667 18.667h5.333c0.736 0 1.333-0.596 1.333-1.333s-0.597-1.333-1.333-1.333h-5.333c-0.736 0-1.333 0.596-1.333 1.333s0.597 1.333 1.333 1.333z"></path>
</svg>
`;

var Search = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>search</title>
<path d="M30.276 28.391l-7.576-7.576c1.644-2.053 2.633-4.652 2.633-7.481 0-6.616-5.384-12-12-12s-12 5.384-12 12 5.384 12 12 12c2.829 0 5.428-0.989 7.481-2.633l7.576 7.576c0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391c0.521-0.521 0.521-1.364 0-1.885zM13.333 22.667c-5.147 0-9.333-4.187-9.333-9.333s4.187-9.333 9.333-9.333 9.333 4.187 9.333 9.333-4.187 9.333-9.333 9.333z"></path>
</svg>
`;

var ModeType;
(function (ModeType) {
    ModeType["DEFAULT"] = "default";
    ModeType["AVAILABILITY"] = "availability";
})(ModeType || (ModeType = {}));

const sallaScopesCss = ".s-scopes-availability-content{display:flex;justify-content:center;align-items:center}.s-scopes-placeholder{flex:0 0 85%}";

const SallaScopees = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        //to avoid over loading scopes in each open call
        this.loadedScopes = {
            [ModeType.DEFAULT]: null,
            [ModeType.AVAILABILITY]: null,
        };
        this.translationLoaded = false;
        this.mode = ModeType.DEFAULT;
        this.scopes = [];
        this.originalScopesList = [];
        this.isOpenedBefore = salla.storage.get("branch-choosed-before");
        this.hasError = false;
        this.loading = false;
        /**
         * Optionally open the modal or enforce the pop-up to the viewer
         */
        this.selection = 'optional';
        /**
         * Dictates when to show the search field
         */
        this.searchDisplayLimit = 6;
        this.getFormTitle = () => {
            if (this.originalScopesList?.length < 2)
                return "";
            const isMultiCountries = salla.config.get('store.features')?.includes('multi-countries');
            if (this.mode === ModeType.DEFAULT) {
                return salla.lang.get(isMultiCountries
                    ? "blocks.scope.shopping_from_another_market"
                    : "blocks.scope.shopping_from_another_branch");
            }
            return salla.lang.get('blocks.scope.search_for_availability_in_other_branches');
        };
        salla.event.on('scopes::open', ({ mode = null, product_id = null }) => {
            this.open(mode, product_id);
        });
        salla.lang.onLoaded(() => {
            this.translationLoaded = true;
        });
    }
    /**
     * Closes the scope modal.
     */
    async close() {
        return await this.modal?.close();
    }
    /**
     * Opens the scope modal.
     */
    async open(mode = ModeType.DEFAULT, product_id = null) {
        this.hasError = false;
        this.mode = [ModeType.AVAILABILITY, ModeType.DEFAULT].includes(mode) ? mode : ModeType.DEFAULT;
        this.loading = !this.loadedScopes[this.mode];
        this.setScopeValues([]);
        salla.log('SallaScope:: opened');
        this.modal.open();
        if (!this.loading) {
            this.setScopeValues(this.loadedScopes[this.mode]);
            return this.modal.stopLoading();
        }
        let callback = () => mode == ModeType.AVAILABILITY ? salla.scope.getProductAvailability(product_id) : salla.scope.get();
        return await salla.api.withoutNotifier(callback)
            .then((resp) => {
            if (mode == ModeType.AVAILABILITY) {
                return this.setScopeValues(this.loadedScopes[ModeType.AVAILABILITY] = resp.data);
            }
            this.setScopeValues(this.loadedScopes[this.mode] = resp.data.scopes);
        }).catch(e => {
            console.log(e);
            this.hasError = true;
        })
            .finally(() => {
            this.modal.stopLoading();
            this.loading = false;
        });
    }
    /**
     * Submit form to change exsiting scope.
     */
    async handleSubmit() {
        let payload = { 'id': this.current_scope.id };
        this.changeBtn.load();
        return await salla.scope.change(payload)
            .then(() => {
            salla.storage.set("branch-choosed-before", true);
            salla.storage.set("scope", {
                'type': this.current_scope.type,
                'id': this.current_scope.id
            });
            salla.cart.reset();
            window.location.replace(salla.helpers.addParamToUrl('scope', this.current_scope.id));
        }).catch(e => console.log(e))
            .finally(() => {
            this.changeBtn.stop();
        });
    }
    setScopeValues(value) {
        this.scopes = value;
        this.originalScopesList = value;
        if (value?.length == 1) {
            this.current_scope = value[0];
            this.selected_scope = value[0];
            this.scopes = [value[0]]; // Just to make sure it's consistent, might not have that much effect though.
        }
        else {
            this.current_scope = value?.find(scope => scope.selected);
            this.selected_scope = value?.find(scope => scope.selected);
        }
    }
    handleSearchFieldTyping(e) {
        let value = e.target.value.toLocaleLowerCase();
        if (!!value) {
            this.scopes = this.originalScopesList.filter(scope => scope.name.toLowerCase().includes(value));
        }
        else {
            this.scopes = this.originalScopesList;
        }
    }
    handleScopeSelection(event) {
        this.current_scope = this.scopes?.find(scope => scope.id == event.target.value);
    }
    placeholderContent() {
        return h("salla-placeholder", { alignment: "center", class: "s-scopes-placeholder" }, h("span", { slot: "title" }, salla.lang.get("blocks.scope.branch_looking_for_not_found")), h("span", { slot: "description" }, salla.lang.get("blocks.scope.our_services_not_available_in_this_branch")));
    }
    defaultContent() {
        return [h("div", { class: "s-scopes-container s-scrollbar" }, this.scopes?.map((scope) => h("div", { class: "s-scopes-input-wrap", "data-selection": this.selection }, h("input", { id: `${this.selection} + '_scope_' + ${scope.id}`, name: "lang", type: "radio", value: scope.id, onChange: (event) => this.handleScopeSelection(event), class: "s-scopes-input", checked: !!this.current_scope && this.current_scope.id == scope.id }), h("label", { htmlFor: `${this.selection} + '_scope_' + ${scope.id}`, class: "s-scopes-label s-scopes-clickable" }, h("span", null, scope.name))))), this.footerContent()];
    }
    availabilityContent() {
        return h("div", { class: "s-scopes-container" }, this.scopes?.map((scope) => h("div", { class: "s-scopes-input-wrap", "data-selection": this.selection }, h("h2", { class: { "s-scopes-label": true, "s-scopes-clickable": this.mode === ModeType.DEFAULT } }, h("span", null, scope.name)), h("h2", { style: { 'color': scope?.availability?.color }, class: `s-scopes-${scope?.availability?.key}` }, scope?.availability?.label))));
    }
    footerContent() {
        return h("div", { class: "s-scopes-footer" }, h("slot", { name: "footer" }, h("salla-button", { ref: btn => this.changeBtn = btn, disabled: !this.current_scope, onClick: () => this.handleSubmit(), class: "s-scopes-submit", "loader-position": "center", width: "wide" }, salla.lang.get('common.elements.confirm'))));
    }
    //let's wait to salla to be ready then render it.
    componentWillLoad() {
        return salla.onReady();
    }
    render() {
        return (h(Host, { key: '42ac0a93262d5a6bdd602b97fa636b70c2269635' }, h("salla-modal", { key: '632eca8b8faa74fd990bc5c024befa11d461568f', ref: modal => this.modal = modal, isClosable: !!(this.isOpenedBefore || (this.selection == 'optional')), class: "s-scopes-modal", isLoading: this.loading, "has-skeleton": true }, this.loading ?
            h("div", { slot: "loading" }, h("div", { class: "s-scopes-skeleton" }, h("salla-list-tile", { class: "s-scopes-header" }, h("div", { slot: "icon", class: "s-scopes-header-icon" }, h("salla-skeleton", { type: "circle" })), h("div", { slot: "title", class: "s-scopes-header-title mb-5" }, h("salla-skeleton", { height: '15px', width: '50%' })), h("div", { slot: "subtitle", class: "s-scopes-header-subtitle" }, h("salla-skeleton", { height: '10px' }), h("salla-skeleton", { height: '10px', width: '75%' }))), h("div", { class: "s-scopes-skeleton-search" }, h("salla-skeleton", { height: '10px', width: '50%' }), h("salla-skeleton", { height: '30px', width: '100%' })), h("div", { class: "s-scopes-skeleton-scopes" }, h("salla-skeleton", { height: '10px', width: '30%' }), h("salla-skeleton", { height: '10px', width: '25%' }), h("salla-skeleton", { height: '10px', width: '30%' }), h("salla-skeleton", { height: '10px', width: '25%' }), h("salla-skeleton", { height: '10px', width: '30%' }), h("salla-skeleton", { height: '10px', width: '25%' }), h("salla-skeleton", { height: '10px', width: '30%' }), h("salla-skeleton", { height: '10px', width: '25%' })), h("div", { class: "s-scopes-skeleton-btn" }, h("salla-skeleton", { height: '40px', width: '100%' }))))
            :
                [h("salla-list-tile", { class: this.originalScopesList?.length ? "s-scopes-header block" : "s-hidden" }, h("div", { slot: "icon", class: "s-scopes-header-icon", innerHTML: StoreAlt }), h("div", { slot: "title", class: "s-scopes-header-title" }, salla.lang.get('blocks.scope.you_are_browse_store_from')), h("div", { slot: "subtitle", class: "s-scopes-header-subtitle" }, !!this.selected_scope ? this.selected_scope.name : "")), h("div", { class: "s-scopes-wrap" }, !!this.originalScopesList?.length && h("h4", { class: "s-scopes-title" }, this.getFormTitle()), this.originalScopesList?.length > this.searchDisplayLimit ?
                        h("div", { class: "s-scopes-search-wrapper" }, h("div", { class: "s-scopes-search-icon", innerHTML: Search }), h("input", { type: "text", class: "s-scopes-search-input", onInput: e => this.handleSearchFieldTyping(e), enterkeyhint: "search", placeholder: salla.lang.get('blocks.scope.searching_for_a_branch') }))
                        : "", this.hasError || (!this.originalScopesList?.length && this.mode !== ModeType.AVAILABILITY) ?
                        this.placeholderContent()
                        : this.mode === ModeType.DEFAULT ? this.defaultContent() : this.availabilityContent())])));
    }
    componentDidLoad() {
        if (!this.isOpenedBefore && this.selection == 'mandatory') {
            this.open();
        }
    }
};
SallaScopees.style = sallaScopesCss;

const sallaSearchCss = "";

const SallaSearch = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.inputValue = '';
        this.translationLoaded = false;
        this.loading = false;
        this.typing = false;
        this.debounce = setTimeout(() => '', 1000);
        /**
         * Set the component display without modal window. Defaults to `false`
         */
        this.inline = false;
        /**
         * Adds a border radius to the input. Half of the height.
         */
        this.oval = false;
        /**
         * Sets the height of the input
         */
        this.height = 60;
        /**
         * Maximum number of words allowed in the input
         */
        this.maxWords = 5;
        /**
         * Show submit action buttons at the end.
         */
        this.showAction = false;
        this.productSlot = this.host.querySelector('[slot="product"]')?.innerHTML || this.getDefaultProductSlot();
        salla.event.on('search::open', () => this.open());
        salla.lang.onLoaded(() => {
            this.translationLoaded = true;
        });
        salla.event.on('modalClosed', () => this.onModalClose());
    }
    async open() {
        if (!this.inline) {
            await this.modal.open().then(() => setTimeout(() => this.searchInput.focus(), 300));
        }
    }
    onModalClose() {
        this.searchInput.value = '';
        this.results = undefined;
        this.afterSearching();
        this.container.classList.remove('s-search-no-results');
    }
    handleKeyDown(ev) {
        if (ev.key === 'Enter' && this.search_term?.length) {
            window.location.href = salla.url.get('search?q=' + encodeURI(this.search_term));
        }
    }
    getDefaultProductSlot() {
        return '<div class="s-search-product-image-container">' +
            '  <img class="s-search-product-image" src="{image}" alt="{name}"/>' +
            '</div>' +
            '<div class="s-search-product-details">' +
            '  <div class="s-search-product-title">{name}</div> <div class="s-search-product-price">{price} <span class="s-search-product-regular-price">{regular_price}</span></div>' +
            '</div>';
    }
    debounceSearch(event) {
        this.typing = true;
        clearTimeout(this.debounce);
        this.debounce = setTimeout(() => {
            this.typing = false;
            this.search_term = event.target.value;
        }, 700);
    }
    limitWordsAndSearch(event) {
        let value = event.target.value;
        const words = value.trim().split(/\s+/);
        if (words.length > this.maxWords) {
            const truncatedInput = words.slice(0, this.maxWords).join(' ');
            this.searchInput.value = truncatedInput;
        }
        this.debounceSearch(event);
    }
    getQueryParam(param) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(param);
    }
    handleActionClick() {
        if (!!this.search_term && this.search_term.length > 2) {
            return this.search(this.search_term);
        }
    }
    handleSearch(val) {
        this.inputValue = val;
        if (val.length > 2) {
            this.search(val);
        }
        else {
            this.results = undefined;
            this.afterSearching();
        }
    }
    search(val) {
        this.noResults.style.display = 'none';
        //run loading spinner or stop it
        this.loading = true;
        salla.product.fetch({ source: "search", source_value: val })
            .then(response => {
            this.results = response;
            salla.event.emit('Products Searched', val);
        })
            .catch(err => err !== 'Query is same as previous one!' ? this.results = undefined : null)
            .finally(() => this.afterSearching(/*isEmpty*/ false));
    }
    afterSearching(isEmpty = true) {
        this.noResults.style.display = isEmpty || this.results?.data.length > 0 ? 'none' : 'block';
        Helper.toggleElementClassIf(this.container, 's-search-container-open', 's-search-no-results', () => this.results?.data.length);
        this.loading = false;
        salla.product.api.previousQuery = ''; //avoid having error 'Query is same as previous one!' after reopen modal;
        this.inputValue.length < 3 ? this.container.classList.remove('s-search-no-results') : '';
    }
    render() {
        const searchContent = h("div", { key: 'fe1ad73a7d7cdc9bfacb43e5c8f1b2d2c5983f9e', class: { 's-search-container': true, 's-search-inline': this.inline }, ref: container => this.container = container }, h("div", { key: 'df9c5af32950d9fc1ec30f46054630244fd2e2c1', class: "s-search-input-wrapper" }, h("span", { key: 'f4c1788bcd50992364e52388e425cc19c0906ec5', class: "s-search-icon-wrap" }, h("span", { key: 'a46da8c6f02e4970c903dc73d3d4a4e107a543f4', class: "s-search-icon", innerHTML: this.loading ? '<i class="s-search-spinner-loader"/>' : Search })), h("input", { key: 'af5fff2641e6416f06c51c01e19e007c6ff43e32', type: "search", enterkeyhint: "search", autocomplete: "off", class: "s-search-input", placeholder: salla.lang.get('blocks.header.search_placeholder'), onInput: (e) => this.limitWordsAndSearch(e), onKeyDown: e => this.handleKeyDown(e), ref: input => this.searchInput = input, style: { height: this.height + 'px', borderRadius: this.oval ? this.height / 2 + 'px' : '' } }), this.showAction ?
            h("salla-button", { loading: this.loading, class: { 's-search-action': true, 's-search-action-oval': this.oval }, onClick: () => this.handleActionClick() }, !this.loading && h("span", { innerHTML: Search })) : null), h("div", { key: 'e742cf41fdf23b37a46324df3bac24abc2c9bf03', class: "s-search-results" }, this.results?.data.map((product) => h("a", { href: product.url + '?from=search-bar', class: { "s-search-product": true, 's-search-product-not-available': !product.is_available }, innerHTML: this.productSlot
                .replace(/\{name\}/g, product.name)
                .replace(/\{price\}/g, product.price ? salla.money(product.price) : '')
                .replace(/\{regular_price\}/g, product.is_on_sale && product.regular_price ? salla.money(product.regular_price) : '')
                .replace(/\{image\}/g, product.image.url) })), h("p", { key: 'bea643f12fa014f6df1dee41a1a8ee8c41022458', ref: el => this.noResults = el, class: "s-search-no-results-placeholder" }, salla.lang.get('common.elements.no_options'))));
        return (this.inline ?
            h("div", { class: "s-search-modal" }, searchContent)
            :
                h("salla-modal", { position: "top", class: "s-search-modal", ref: modal => this.modal = modal }, searchContent));
    }
    /**
     * Run it one time after load
     */
    componentDidLoad() {
        this.afterSearching();
        this.searchInput.value = this.getQueryParam('q');
    }
    get host() { return getElement(this); }
    static get watchers() { return {
        "search_term": ["handleSearch"]
    }; }
};
SallaSearch.style = sallaSearchCss;

const sallaSkeletonCss = ":host{display:block}";

const SallaSkeleton = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
       *  Set the shape type of the skeleton is it circle or normal
       */
        this.type = 'normal';
        /**
       *  Set the skeleton width
       */
        this.width = '100%';
        /**
       *  Set the skeleton height
       */
        this.height = '100%';
    }
    render() {
        const classes = {
            's-skeleton-item': true,
            's-skeleton-item-circular': this.type == 'circle',
        };
        return (h(Host, { key: 'df1344797b9cbe42331625a2a1f432e07d6bd9ef', class: "s-skeleton-wrapper", style: { width: this.width, height: this.height } }, h("div", { key: 'b56611551bb2b2bcb02b46240e30f88e2ea7aea5', class: classes }, "\u00A0")));
    }
};
SallaSkeleton.style = sallaSkeletonCss;

const sallaSliderCss = "@font-face{font-family:\"swiper-icons\";src:url(\"data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA\") format(\"woff\");font-weight:400;font-style:normal}:root{--swiper-theme-color:#007aff}.swiper{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;box-sizing:content-box}.swiper-android .swiper-slide,.swiper-wrapper{transform:translate3d(0px, 0, 0)}.swiper-pointer-events{touch-action:pan-y}.swiper-pointer-events.swiper-vertical{touch-action:pan-x}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform}.swiper-slide-invisible-blank{visibility:hidden}.swiper-autoheight,.swiper-autoheight .swiper-slide{height:auto}.swiper-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform, height}.swiper-backface-hidden .swiper-slide{transform:translateZ(0);backface-visibility:hidden}.swiper-3d,.swiper-3d.swiper-css-mode .swiper-wrapper{perspective:1200px}.swiper-3d .swiper-wrapper,.swiper-3d .swiper-slide,.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top,.swiper-3d .swiper-slide-shadow-bottom,.swiper-3d .swiper-cube-shadow{transform-style:preserve-3d}.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top,.swiper-3d .swiper-slide-shadow-bottom{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-3d .swiper-slide-shadow{background:rgba(0, 0, 0, 0.15)}.swiper-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none;}.swiper-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-horizontal.swiper-css-mode>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-vertical.swiper-css-mode>.swiper-wrapper{scroll-snap-type:y mandatory}.swiper-centered>.swiper-wrapper::before{content:\"\";flex-shrink:0;order:9999}.swiper-centered.swiper-horizontal>.swiper-wrapper>.swiper-slide:first-child{margin-inline-start:var(--swiper-centered-offset-before)}.swiper-centered.swiper-horizontal>.swiper-wrapper::before{height:100%;width:var(--swiper-centered-offset-after)}.swiper-centered.swiper-vertical>.swiper-wrapper>.swiper-slide:first-child{margin-block-start:var(--swiper-centered-offset-before)}.swiper-centered.swiper-vertical>.swiper-wrapper::before{width:100%;height:var(--swiper-centered-offset-after)}.swiper-centered>.swiper-wrapper>.swiper-slide{scroll-snap-align:center center;scroll-snap-stop:always}:root{}.swiper-pagination{position:absolute;text-align:center;transition:300ms opacity;transform:translate3d(0, 0, 0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-pagination-disabled>.swiper-pagination,.swiper-pagination.swiper-pagination-disabled{display:none !important}.swiper-pagination-fraction,.swiper-pagination-custom,.swiper-horizontal>.swiper-pagination-bullets,.swiper-pagination-bullets.swiper-pagination-horizontal{bottom:10px;left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(0.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(0.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(0.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(0.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(0.33)}.swiper-pagination-bullet{width:var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));height:var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));display:inline-block;border-radius:50%;background:var(--swiper-pagination-bullet-inactive-color, #000);opacity:var(--swiper-pagination-bullet-inactive-opacity, 0.2)}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet:only-child{display:none !important}.swiper-pagination-bullet-active{opacity:var(--swiper-pagination-bullet-opacity, 1);background:var(--swiper-pagination-color, var(--swiper-theme-color))}.swiper-vertical>.swiper-pagination-bullets,.swiper-pagination-vertical.swiper-pagination-bullets{right:10px;top:50%;transform:translate3d(0px, -50%, 0)}.swiper-vertical>.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet{margin:var(--swiper-pagination-bullet-vertical-gap, 6px) 0;display:block}.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:200ms transform, 200ms top}.swiper-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 var(--swiper-pagination-bullet-horizontal-gap, 4px)}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:200ms transform, 200ms left}.swiper-horizontal.swiper-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:200ms transform, 200ms right}.swiper-pagination-progressbar{background:rgba(0, 0, 0, 0.25);position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color, var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-horizontal>.swiper-pagination-progressbar,.swiper-pagination-progressbar.swiper-pagination-horizontal,.swiper-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite{width:100%;height:4px;left:0;top:0}.swiper-vertical>.swiper-pagination-progressbar,.swiper-pagination-progressbar.swiper-pagination-vertical,.swiper-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite{width:4px;height:100%;left:0;top:0}.swiper-pagination-lock{display:none}:root{--swiper-navigation-size:44px;}.swiper-button-prev,.swiper-button-next{position:absolute;top:50%;width:calc(var(--swiper-navigation-size) / 44 * 27);height:var(--swiper-navigation-size);margin-top:calc(0px - var(--swiper-navigation-size) / 2);z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color, var(--swiper-theme-color))}.swiper-button-prev.swiper-button-disabled,.swiper-button-next.swiper-button-disabled{opacity:0.35;cursor:auto;pointer-events:none}.swiper-button-prev.swiper-button-hidden,.swiper-button-next.swiper-button-hidden{opacity:0;cursor:auto;pointer-events:none}.swiper-navigation-disabled .swiper-button-prev,.swiper-navigation-disabled .swiper-button-next{display:none !important}.swiper-button-prev:after,.swiper-button-next:after{font-family:swiper-icons;font-size:var(--swiper-navigation-size);text-transform:none !important;letter-spacing:0;font-variant:initial;line-height:1}.swiper-button-prev,.swiper-rtl .swiper-button-next{left:10px;right:auto}.swiper-button-prev:after,.swiper-rtl .swiper-button-next:after{content:\"prev\"}.swiper-button-next,.swiper-rtl .swiper-button-prev{right:10px;left:auto}.swiper-button-next:after,.swiper-rtl .swiper-button-prev:after{content:\"next\"}.swiper-button-lock{display:none}";

const SallaSlider = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.afterInit = createEvent(this, "afterInit");
        this.slideChange = createEvent(this, "slideChange");
        this.reachBeginning = createEvent(this, "reachBeginning");
        this.reachEnd = createEvent(this, "reachEnd");
        this.slideChangeTransitionEnd = createEvent(this, "slideChangeTransitionEnd");
        this.slideChangeTransitionStart = createEvent(this, "slideChangeTransitionStart");
        this.slideNextTransitionEnd = createEvent(this, "slideNextTransitionEnd");
        this.slideNextTransitionStart = createEvent(this, "slideNextTransitionStart");
        this.slidePrevTransitionEnd = createEvent(this, "slidePrevTransitionEnd");
        this.slidePrevTransitionStart = createEvent(this, "slidePrevTransitionStart");
        this.sliderMove = createEvent(this, "sliderMove");
        this.touchSliderEnd = createEvent(this, "touchSliderEnd");
        this.touchSliderMove = createEvent(this, "touchSliderMove");
        this.touchSliderStart = createEvent(this, "touchSliderStart");
        this.sliderTransitionEnd = createEvent(this, "sliderTransitionEnd");
        this.sliderTransitionStart = createEvent(this, "sliderTransitionStart");
        /**
         * Show/hide slider block title
         */
        this.blockTitle = '';
        /**
         * Enable call a specific slide by index from thumbnails option in `salla-slider-options` component, works only if `data-img-id` and `data-slid-index` attributes are set on each slide
         */
        this.listenToThumbnailsOption = false;
        /**
         * Show/hide slider block sub title
         */
        this.blockSubtitle = '';
        /**
         * Show/hide display all button beside arrows
         */
        this.displayAllUrl = '';
        /**
         * Show/hide display all button beside arrows
         */
        this.arrowsCentered = false;
        /**
         * Vertical or Horizontal thumbs slider
         */
        this.verticalThumbs = false;
        /**
         * Disable thumbs slider and show it as a grid
         */
        this.gridThumbs = false;
        /**
         * Vertical or Horizontal main slider
         */
        this.vertical = false;
        /**
         * Auto Height slider
         */
        this.autoHeight = false;
        /**
         * Show/hide arrows
         */
        this.showControls = true;
        /**
         * Show/hide arrows
         */
        this.controlsOuter = false;
        /**
         * Show/hide thumbs slider arrows
         */
        this.showThumbsControls = true;
        /**
         * Enable autoplay  - working with `type="carousel" only`
         */
        this.autoPlay = false;
        /**
         * slidesPerView
         */
        this.slidesPerView = "auto";
        /**
         * Enable pagination
         */
        this.pagination = false;
        /**
         * Enable center mode  - working with `type="carousel" only`
         */
        this.centered = false;
        /**
         * Run slider in loop, Don't use it for slides with custom components inside it, because it may cause re-render issue
         */
        this.loop = false;
        /**
         * Set the type of the slider
         * Default: ''
         */
        this.type = '';
        // States
        this.currentIndex = undefined;
        this.isEnd = false;
        this.isBeginning = true;
        this.windowWidth = window.innerWidth;
        this.hasThumbSlot = false;
        this.pre_defined_config = {
            carousel: {
                speed: 300,
                slidesPerView: 'auto',
                spaceBetween: 0,
            },
            fullwidth: {
                speed: 750,
                parallax: true,
            },
            fullscreen: {
                speed: 1000,
                parallax: true,
                direction: "vertical",
                followFinger: false,
                touchReleaseOnEdges: true,
                lazy: true,
                mousewheel: {}
            },
            testimonials: {
                draggable: true,
                slidesPerView: 1,
                breakpoints: { 1024: { slidesPerView: 2 } }
            },
            blog: {
                parallax: true,
                speed: 800,
                loop: true,
                slidesPerView: 1,
                centeredSlides: true,
                spaceBetween: 30,
                breakpoints: {
                    320: { spaceBetween: 10 },
                    768: { spaceBetween: 15 },
                    980: { paceBetween: 30 },
                }
            },
            thumbs: {
                slidesPerView: 1,
                spaceBetween: 30
            }
        };
        this.direction = this.direction || document.documentElement.dir;
    }
    // Methods
    /**
     * Returns the Swiper instance to allow direct manipulation
     * @returns The Swiper slider instance
     */
    async sliderInstance() {
        return this.slider;
    }
    /**
     * Run transition to the slide with index number equal to 'index' parameter for the duration equal to 'speed' parameter.
     *
     * @param {number} index - Index number of slide.
     * @param {number} speed - Transition duration (in ms).
     * @param {boolean} runCallbacks - Set it to false (by default it is true) and transition will not produce transition events.
     * **/
    async slideTo(index, speed, runCallbacks) {
        return this.slider.slideTo(index, speed, runCallbacks);
    }
    /**
     * Run transition to the next slide.
     *
     * @param {number} speed - Transition duration (in ms).
     * @param {boolean} runCallbacks - Set it to false (by default it is true) and transition will not produce transition events.
     * **/
    async slideNext(speed, runCallbacks) {
        this.slider?.slideNext(speed, runCallbacks);
    }
    /**
     * Run transition to the previous slide.
     *
     * @param {number} speed - Transition duration (in ms).
     * @param {boolean} runCallbacks - Set it to false (by default it is true) and transition will not produce transition events.
     * **/
    async slidePrev(speed, runCallbacks) {
        this.slider?.slidePrev(speed, runCallbacks);
    }
    /**
     * Does the same as .slideTo but for the case when used with enabled loop. So this method will slide to slides with realIndex matching to passed index
     *
     * @param {number} speed - Transition duration (in ms).
     * @param {boolean} runCallbacks - Set it to false (by default it is true) and transition will not produce transition events.
     * **/
    async slideToLoop(index, speed, runCallbacks) {
        this.slider.slideToLoop(index, speed, runCallbacks);
    }
    /**
     * Does the same as .slideNext but for the case when used with enabled loop. So this method will slide to next slide with realIndex matching to next index
     *
     * @param {number} speed - Transition duration (in ms).
     * @param {boolean} runCallbacks - Set it to false (by default it is true) and transition will not produce transition events.
     * **/
    async slideNextLoop(speed, runCallbacks) {
        this.slider.slideNextLoop(speed, runCallbacks);
    }
    /**
     * Does the same as .slidePrev but for the case when used with enabled loop. So this method will slide to previous slide with realIndex matching to previous index
     *
     * @param {number} speed - Transition duration (in ms).
     * @param {boolean} runCallbacks - Set it to false (by default it is true) and transition will not produce transition events.
     * **/
    async slidePrevLoop(speed, runCallbacks) {
        this.slider.slidePrevLoop(speed, runCallbacks);
    }
    /**
     * Reset slider position to currently active slide for the duration equal to 'speed' parameter.
     *
     * @param {number} speed - Transition duration (in ms).
     * @param {boolean} runCallbacks - Set it to false (by default it is true) and transition will not produce transition events.
     * **/
    async slideReset(speed, runCallbacks) {
        this.slider.slideReset(speed, runCallbacks);
    }
    /**
     * Reset slider position to closest slide/snap point for the duration equal to 'speed' parameter.
     * @param {number} speed - Transition duration (in ms).
     * @param {boolean} runCallbacks - Set it to false (by default it is true) and transition will not produce transition events.
     * **/
    async slideToClosest(speed, runCallbacks) {
        this.slider.slideToClosest(speed, runCallbacks);
    }
    /**
     *  You should call it after you add/remove slides manually, or after you hide/show it, or do any custom DOM modifications with Swiper This method also includes subcall of the following methods which you can use separately:
     * **/
    async update() {
        this.slider.update();
    }
    /**
     * Force slider to update its height (when autoHeight enabled) for the duration equal to 'speed' parameter
     * @param {number} speed - Transition duration (in ms).
     * **/
    async updateAutoHeight(speed) {
        this.slider.updateAutoHeight(speed);
    }
    /**
     * recalculate number of slides and their offsets. Useful after you add/remove slides with JavaScript
     * **/
    async updateSlides() {
        this.slider.updateSlides();
    }
    /**
     * recalculate slider progress
     * **/
    async updateProgress() {
        this.slider.updateProgress();
    }
    /**
     * update active/prev/next classes on slides and bullets
     * **/
    async updateSlidesClasses() {
        this.slider.updateSlidesClasses();
    }
    /**
     * Get slider slides
     * **/
    async getSlides() {
        return await this.slider?.slides;
    }
    /**
     * Get slider slides
     * **/
    async updateSize() {
        return await this.slider.updateSize();
    }
    /**
     * Get thumbs slider update
     * **/
    async sliderInit() {
        return await this.slider.init();
    }
    /**
     * Get thumbs slider slides
     * **/
    async thumbsSliderInstance() {
        return await this.thumbsSlider;
    }
    /**
     * Get thumbs slider update
     * **/
    async thumbsSliderInit() {
        return await this.thumbsSlider.init();
    }
    /**
     * Get thumbs slider update
     * **/
    async thumbsSliderUpdate() {
        return await this.thumbsSlider.update();
    }
    /**
     * Get thumbs slider updateSlides
     * **/
    async thumbsSliderUpdateSlides() {
        return await this.thumbsSlider.updateSlides();
    }
    /**
   * Get thumbs slider updateSize
   * **/
    async getThumbsUpdateSize() {
        return await this.thumbsSlider?.updateSize();
    }
    /**
     * Does the same as .slideTo but for the case when used with enabled loop. So this method will slide to slides with realIndex matching to passed index
     *
     * @param {number} speed - Transition duration (in ms).
     * @param {boolean} runCallbacks - Set it to false (by default it is true) and transition will not produce transition events.
     * **/
    async thumbsSlideTo(index, speed, runCallbacks) {
        return this.thumbsSlider.slideTo(index, speed, runCallbacks);
    }
    /**
   * Get thumbs slider slides
   * **/
    async getThumbsSlides() {
        return await this.thumbsSlider?.slides;
    }
    componentWillLoad() {
        salla.lang.onLoaded(() => {
            this.displayAllTitle = salla.lang.get('blocks.home.display_all');
        });
        this.hasThumbSlot = !!this.host.querySelector('[slot="thumbs"]');
        if (this.listenToThumbnailsOption) {
            salla.event.on('product-options::change', data => {
                if (data.option.type == 'thumbnail') {
                    const slideIndex = this.sliderWrapper.querySelector(`[data-img-id="${data.detail.option_value}"]`)?.getAttribute('data-slid-index');
                    slideIndex ? this.slideTo(parseInt(slideIndex), 300, false) : '';
                }
            });
        }
        return new Promise((resolve, reject) => {
            // @ts-ignore
            if (typeof Swiper !== 'undefined') {
                return resolve(true);
            }
            if (document.getElementById('swiper-script')) {
                let interval = setInterval(() => {
                    // @ts-ignore
                    if (typeof Swiper !== 'undefined') {
                        clearInterval(interval);
                        resolve(true);
                    }
                }, 5);
            }
            else {
                // ? There is an issue with stencil bundling it breaks the swiper import, so we need to import it manually by swiperjs rerendered file
                // ! IT'S NOT A GOOD SOLUTION, BUT IT WORKS, WE NEED TO FIND A BETTER SOLUTION
                this.swiperScript = document.createElement('script');
                this.swiperScript.onload = () => {
                    resolve(true);
                    salla.event.emit('swiper::loaded');
                };
                this.swiperScript.onerror = (error) => {
                    salla.logger.warn('failed load swiper bundle', error);
                    reject(true);
                };
                this.swiperScript.src = 'https://cdn.salla.network/js/swiper@8.js';
                this.swiperScript.setAttribute('id', 'swiper-script');
                document.body.appendChild(this.swiperScript);
            }
        });
    }
    getSwiperConfig() {
        let autoplay = this.autoPlay;
        if (autoplay && typeof autoplay !== 'object') {
            autoplay = { delay: 10000 };
        }
        let pre_defined_config = {
            loop: this.loop,
            autoplay,
            centeredSlides: this.centered,
            slidesPerView: this.slidesPerView,
            autoHeight: this.autoHeight,
            lazy: true,
            on: {
                // todo:: find better way for this workaround to show lazyLoad for duplicated slides, because it clones the slide after it's already rendered,
                // then it re appended it as is,in this case the image is loaded but class not added.
                afterInit: (slider) => {
                    this.afterInit.emit(slider);
                    document.lazyLoadInstance?.update();
                    this.loop && slider.slides.map(slide => {
                        if (!slide.classList.contains('swiper-slide-duplicate')) {
                            return;
                        }
                        slide.querySelectorAll('img.lazy:not(.loaded)').forEach(img => img.classList.add('loaded'));
                    });
                },
            },
            pagination: this.pagination ? {
                el: this.host.id ? `#${this.host.id} .swiper-pagination` : '',
                clickable: true,
            } : false,
            navigation: this.showControls ? {
                nextEl: this.host.id ? `#${this.host.id} .s-slider-next` : '',
                prevEl: this.host.id ? `#${this.host.id} .s-slider-prev` : ''
            } : false,
            breakpoints: {
                768: {
                    direction: this.vertical ? "vertical" : "horizontal",
                },
            },
        };
        let pre_defined_thumbs_config = {
            freeMode: false,
            watchSlidesProgress: true,
            slidesPerView: 4,
            spaceBetween: 10,
            watchOverflow: true,
            watchSlidesVisibility: true,
            breakpoints: {
                768: {
                    direction: this.verticalThumbs ? "vertical" : "horizontal",
                    spaceBetween: 16,
                },
            },
            navigation: this.showThumbsControls ? {
                nextEl: this.host.id ? `#${this.host.id} .s-slider-thumbs-next` : '',
                prevEl: this.host.id ? `#${this.host.id} .s-slider-thumbs-prev` : ''
            } : false,
        };
        this.pre_defined_config.fullscreen.mousewheel = {
            releaseOnEdges: this.host.querySelectorAll('.swiper-slide').length > 1 ? false : true
        },
            pre_defined_config = {
                ...pre_defined_config,
                ...(this.pre_defined_config[this.type] || {})
            };
        if (this.type == 'thumbs' && this.thumbsSliderWrapper) {
            for (const slide of this.thumbsSliderWrapper.children) {
                //todo:: use `s-slider-slide`
                slide.classList.add('swiper-slide');
            }
            if (this.hasThumbSlot && this.thumbsConfig) {
                try {
                    pre_defined_thumbs_config = {
                        ...pre_defined_thumbs_config,
                        ...(typeof this.thumbsConfig === 'string' ? JSON.parse(this.thumbsConfig) : this.thumbsConfig)
                    };
                }
                catch (error) {
                    salla.logger.warn('Failed to parse thumbs slider config:', error);
                }
            }
            // @ts-ignore
            this.thumbsSlider = new Swiper(this.thumbsSliderContainer, pre_defined_thumbs_config);
            // @ts-ignore
            pre_defined_config.thumbs = {
                swiper: this.thumbsSlider,
            };
        }
        pre_defined_config = {
            ...pre_defined_config,
        };
        if (this.sliderConfig) {
            try {
                pre_defined_config = {
                    ...pre_defined_config,
                    ...(typeof this.sliderConfig === 'string' ? JSON.parse(this.sliderConfig) : this.sliderConfig)
                };
            }
            catch (error) {
                salla.logger.warn('Failed to parse slider config:', error);
            }
        }
        return pre_defined_config;
    }
    getThumbsDirection() {
        const { verticalThumbs, windowWidth, direction } = this;
        if (verticalThumbs && windowWidth < 768 && direction === 'rtl') {
            return 'rtl';
        }
        if (verticalThumbs && windowWidth > 768 && direction === 'rtl') {
            return 'ltr';
        }
        return direction;
    }
    initSlider() {
        for (const slide of this.sliderWrapper.children) {
            slide.classList.add('swiper-slide');
        }
        // @ts-ignore
        this.slider = new Swiper(this.sliderContainer, this.getSwiperConfig());
        // Expose slider events
        this.slider.on('slideChange', (slider) => {
            //todo:: it doesn't change when loop is active, always will be false
            this.isBeginning = slider.isBeginning;
            this.isEnd = slider.isEnd;
            this.slideChange.emit(slider);
        });
        this.slider.on('reachBeginning', (slider) => this.reachBeginning.emit(slider));
        this.slider.on('reachEnd', (slider) => this.reachEnd.emit(slider));
        this.slider.on('slideChangeTransitionEnd', (slider) => {
            if (this.type == "fullscreen") {
                const activeIndex = slider.activeIndex;
                slider.params.mousewheel.releaseOnEdges = activeIndex === 0 || (activeIndex === slider.slides.length - 1);
            }
            this.slideChangeTransitionEnd.emit(slider);
        });
        this.slider.on('slideChangeTransitionStart', (slider) => this.slideChangeTransitionStart.emit(slider));
        this.slider.on('slideNextTransitionEnd', (slider) => this.slideNextTransitionEnd.emit(slider));
        this.slider.on('slideNextTransitionStart', (slider) => this.slideNextTransitionStart.emit(slider));
        this.slider.on('slidePrevTransitionEnd', (slider) => this.slidePrevTransitionEnd.emit(slider));
        this.slider.on('slidePrevTransitionStart', (slider) => this.slidePrevTransitionStart.emit(slider));
        this.slider.on('sliderMove', (slider) => this.sliderMove.emit(slider));
        this.slider.on('touchEnd', (slider) => this.touchSliderEnd.emit(slider));
        this.slider.on('touchMove', (slider) => this.touchSliderMove.emit(slider));
        this.slider.on('touchStart', (slider) => this.touchSliderStart.emit(slider));
        this.slider.on('transitionEnd', (slider) => this.sliderTransitionEnd.emit(slider));
        this.slider.on('transitionStart', (slider) => this.sliderTransitionStart.emit(slider));
    }
    render() {
        let classes = this.type ? this.type + '-slider ' : '';
        classes += this.controlsOuter ? ' s-slider-controls-outer ' : '';
        classes += this.blockTitle == '' ? ' s-slider-has-notitle s-slider-v-centered ' : '';
        classes += this.verticalThumbs ? ' s-slider-vertical ' : ' s-slider-horizontal ';
        classes += this.arrowsCentered ? ' s-slider-v-centered ' : '';
        classes += this.gridThumbs ? ' s-slider-with-grid-thumbs ' : '';
        return (h(Host, { key: '85e91dde02b7f32655d0ac10e5abb7f9e49d7157', class: 's-slider-wrapper ' + classes }, this.blockTitle || this.showControls ?
            h("div", { class: "s-slider-block__title" }, this.blockTitle ?
                h("div", { class: "s-slider-block__title-right" }, h("h2", null, this.blockTitle), this.blockSubtitle ? h("p", { innerHTML: this.blockSubtitle }) : '')
                : '', h("div", { class: "s-slider-block__title-left" }, this.displayAllUrl ?
                h("a", { href: this.displayAllUrl, class: "s-slider-block__display-all" }, this.displayAllTitle)
                : '', this.showControls ?
                h("div", { class: "s-slider-block__title-nav", dir: "rtl" }, h("button", { "aria-label": "Previous Slide", class: "s-slider-prev s-slider-nav-arrow" }, h("span", { class: "s-slider-button-icon", innerHTML: this.direction == 'rtl' ? ArrowRightIcon : ArrowLeftIcon })), h("button", { "aria-label": "Next Slide", class: "s-slider-next s-slider-nav-arrow" }, h("span", { class: "s-slider-button-icon", innerHTML: this.direction == 'rtl' ? ArrowLeftIcon : ArrowRightIcon })))
                : ''))
            : '', h("div", { key: '8842ac56011138fd8456257bff568919c9ce8867', class: "swiper s-slider-container", ref: el => this.sliderContainer = el, dir: this.vertical ? "ltr" : this.direction }, h("slot", { key: '17fb40e69031d4c329df9d00fb75443d0ff9ba0c' }), h("div", { key: 'b8f42b180a271b4a873d99024251705e9d76adde', class: "swiper-wrapper s-slider-swiper-wrapper", ref: el => this.sliderWrapper = el }, h("slot", { key: '82ef4871810000d0b65a24518c6613a6484a2ee9', name: 'items' })), this.pagination ? h("div", { class: "swiper-pagination" }) : ''), this.type == 'thumbs' && this.hasThumbSlot ? h("div", { class: "s-slider-thumbs" }, h("div", { class: "swiper s-slider-thumbs-container", dir: this.getThumbsDirection(), ref: el => this.thumbsSliderContainer = el }, h("div", { class: { "s-slider-swiper-wrapper swiper-wrapper": true, "s-slider-grid-thumbs": this.gridThumbs }, ref: el => this.thumbsSliderWrapper = el }, h("slot", { name: "thumbs" })), this.showThumbsControls ?
            h("div", { class: "s-slider-thumbs-nav", dir: "rtl" }, h("button", { "aria-label": "Previous Slide", class: "s-slider-thumbs-prev s-slider-nav-arrow" }, h("span", { class: "s-slider-button-icon", innerHTML: this.direction == 'rtl' ? ArrowRightIcon : ArrowLeftIcon })), h("button", { "aria-label": "Next Slide", class: "s-slider-thumbs-next s-slider-nav-arrow" }, h("span", { class: "s-slider-button-icon", innerHTML: this.direction == 'rtl' ? ArrowLeftIcon : ArrowRightIcon })))
            : null))
            : null));
    }
    componentDidLoad() {
        let itemsSlot = this.sliderWrapper.querySelector('div[slot="items"]');
        !!itemsSlot ? itemsSlot.replaceWith(...itemsSlot.children) : null;
        if (this.type == 'thumbs' && this.hasThumbSlot) {
            let thumbsSlot = this.thumbsSliderWrapper.querySelector('div[slot="thumbs"]');
            !!thumbsSlot ? thumbsSlot.replaceWith(...thumbsSlot.children) : null;
        }
        // if swiper is not loaded, lets relay on event
        // @ts-ignore
        if (typeof Swiper === 'undefined') {
            salla.event.once('swiper::loaded', () => this.initSlider());
        }
        else { // if swiper is loaded lets init our slider
            this.initSlider();
        }
    }
    get host() { return getElement(this); }
};
SallaSlider.style = sallaSliderCss;

var copy_link = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>link</title>
<path d="M19.247 23.019l-4.189 4.189c-2.831 2.831-7.435 2.831-10.265 0-1.371-1.372-2.125-3.193-2.125-5.132s0.755-3.761 2.125-5.133l4.189-4.191c0.521-0.521 0.521-1.364 0-1.885s-1.364-0.521-1.885 0l-4.189 4.191c-1.875 1.875-2.907 4.367-2.907 7.019s1.032 5.143 2.907 7.017 4.368 2.907 7.019 2.907 5.143-1.032 7.017-2.908l4.189-4.189c0.521-0.521 0.521-1.364 0-1.885s-1.364-0.52-1.885 0.001zM22.276 9.724c-0.521-0.521-1.364-0.521-1.885 0l-10.667 10.667c-0.521 0.521-0.521 1.364 0 1.885 0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391l10.667-10.667c0.521-0.521 0.521-1.364 0-1.885zM29.093 2.908c-1.875-1.876-4.368-2.908-7.019-2.908s-5.143 1.032-7.017 2.908l-4.189 4.188c-0.521 0.521-0.521 1.364 0 1.885s1.364 0.521 1.885 0l4.189-4.189c2.831-2.831 7.435-2.831 10.265 0 1.371 1.372 2.125 3.193 2.125 5.132s-0.755 3.761-2.125 5.133l-4.189 4.191c-0.521 0.521-0.521 1.364 0 1.885 0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391l4.189-4.191c1.875-1.875 2.907-4.367 2.907-7.019s-1.032-5.143-2.907-7.016z"></path>
</svg>
`;

var whatsapp = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>whatsapp</title>
<path d="M16 32c-0.008 0-0.018 0-0.028 0-3.1 0-5.993-0.887-8.439-2.421l0.066 0.039-7.2 2.3 2.336-6.964c-1.713-2.492-2.736-5.575-2.736-8.897 0-0.020 0-0.040 0-0.060v0.003c0.009-8.833 7.167-15.991 15.999-16h0.001c8.837 0 16 7.163 16 16s-7.163 16-16 16v0zM7.906 27.424l0.4 0.264c2.169 1.449 4.837 2.312 7.707 2.312 7.732 0 14-6.268 14-14s-6.268-14-14-14c-0.004 0-0.009 0-0.013 0h0.001c-7.729 0.008-13.992 6.271-14 13.999v0.001c-0 0.010-0 0.021-0 0.032 0 3.072 1 5.909 2.693 8.206l-0.027-0.038 0.304 0.416-1.4 4.2zM20.716 24.958c-1.684-0.131-3.237-0.574-4.641-1.271l0.073 0.033c-3.098-1.456-5.634-3.668-7.438-6.405l-0.042-0.067c-1.102-1.357-1.819-3.067-1.962-4.938l-0.002-0.030c-0.001-0.036-0.001-0.078-0.001-0.12 0-1.575 0.66-2.995 1.719-4l0.002-0.002c0.547-0.52 1.289-0.839 2.105-0.839 0.033 0 0.066 0.001 0.099 0.002l-0.005-0c0.2 0 0.378 0 0.542 0.018 0.016-0.001 0.035-0.001 0.054-0.001 0.815 0 1.502 0.549 1.711 1.298l0.003 0.012 0.324 0.782c0.376 0.906 0.858 2.068 0.942 2.244 0.144 0.251 0.23 0.552 0.23 0.873 0 0.286-0.068 0.557-0.188 0.797l0.005-0.010c-0.149 0.307-0.332 0.57-0.55 0.802l0.002-0.002c-0.148 0.168-0.248 0.274-0.346 0.378s-0.172 0.18-0.26 0.284c0.575 0.92 1.237 1.713 1.992 2.406l0.008 0.008c0.829 0.758 1.802 1.373 2.872 1.8l0.064 0.022c0.369-0.266 0.672-0.6 0.896-0.985l0.008-0.015 0.174-0.232c0.328-0.484 0.875-0.798 1.495-0.798 0.249 0 0.487 0.051 0.703 0.142l-0.012-0.004c0.492 0.168 2.922 1.372 2.946 1.384l0.228 0.11c0.415 0.149 0.758 0.417 0.996 0.763l0.004 0.007c0.107 0.349 0.169 0.75 0.169 1.166 0 0.591-0.125 1.153-0.349 1.661l0.010-0.026c-0.702 1.368-1.983 2.353-3.511 2.637l-0.031 0.005c-0.309 0.071-0.663 0.112-1.028 0.112-0.004 0-0.007 0-0.011 0h0.001zM10.632 9.318c-0.028-0.002-0.062-0.004-0.095-0.004-0.245 0-0.472 0.076-0.659 0.206l0.004-0.002c-0.726 0.651-1.18 1.591-1.18 2.638 0 0.044 0.001 0.087 0.002 0.13l-0-0.006c0.122 1.404 0.662 2.662 1.495 3.671l-0.009-0.011 0.12 0.168c1.627 2.491 3.865 4.46 6.504 5.723l0.096 0.041c3.136 1.288 3.916 1.124 4.426 1.014 0.87-0.159 1.601-0.656 2.067-1.347l0.007-0.011c0.12-0.316 0.204-0.682 0.237-1.063l0.001-0.015-0.040-0.018-0.256-0.124c-0.8-0.4-2.46-1.2-2.734-1.292l-0.058 0.184c-0.346 0.501-0.684 0.934-1.045 1.347l0.015-0.017c-0.344 0.349-0.821 0.565-1.349 0.565-0.28 0-0.546-0.061-0.785-0.17l0.012 0.005c-1.403-0.547-2.609-1.301-3.646-2.239l0.010 0.009c-0.975-0.891-1.81-1.912-2.486-3.039l-0.034-0.061c-0.152-0.244-0.242-0.54-0.242-0.857 0-0.463 0.191-0.88 0.499-1.178l0-0c0.13-0.162 0.264-0.302 0.4-0.444l0.236-0.256c0.091-0.096 0.177-0.201 0.254-0.311l0.006-0.009c-0.158-0.36-0.622-1.472-0.988-2.352l-0.322-0.772-0.038-0.086c-0.188-0.010-0.302-0.016-0.426-0.016zM12.462 12.442v0.012z"></path>
</svg>
`;

var Socials;
(function (Socials) {
    Socials["FACEBOOK"] = "facebook";
    Socials["TWITTER"] = "twitter";
    Socials["WHATSAPP"] = "whatsapp";
    Socials["EMAIL"] = "email";
    Socials["COPY_LINK"] = "copy_link";
})(Socials || (Socials = {}));

var ShareAlt = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>share-alt</title>
<path d="M26.667 21.333c-1.699 0-3.196 0.812-4.173 2.052l-11.912-5.211c0.044-0.276 0.085-0.553 0.085-0.841 0-0.472-0.081-0.923-0.197-1.359l12.361-6.952c0.971 1.009 2.328 1.644 3.836 1.644 2.941 0 5.333-2.392 5.333-5.333s-2.392-5.333-5.333-5.333-5.333 2.392-5.333 5.333c0 0.472 0.081 0.923 0.197 1.359l-12.361 6.952c-0.971-1.009-2.328-1.644-3.836-1.644-2.941 0-5.333 2.392-5.333 5.333s2.392 5.333 5.333 5.333c1.699 0 3.196-0.812 4.173-2.052l11.912 5.211c-0.044 0.276-0.085 0.553-0.085 0.841 0 2.941 2.392 5.333 5.333 5.333s5.333-2.392 5.333-5.333-2.392-5.333-5.333-5.333zM26.667 2.667c1.471 0 2.667 1.196 2.667 2.667s-1.196 2.667-2.667 2.667-2.667-1.196-2.667-2.667 1.196-2.667 2.667-2.667zM5.333 20c-1.471 0-2.667-1.196-2.667-2.667s1.196-2.667 2.667-2.667 2.667 1.196 2.667 2.667-1.196 2.667-2.667 2.667zM26.667 29.333c-1.471 0-2.667-1.196-2.667-2.667s1.196-2.667 2.667-2.667 2.667 1.196 2.667 2.667-1.196 2.667-2.667 2.667z"></path>
</svg>
`;

const sallaSocialShareCss = "";

const SallaSocialShare = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.opened = false;
        this.allPlatforms = [Socials.WHATSAPP, Socials.FACEBOOK, Socials.TWITTER, Socials.EMAIL, Socials.COPY_LINK];
        this.platformIcons = [{ icon: whatsapp, name: Socials.WHATSAPP }, {
                icon: facebook,
                name: Socials.FACEBOOK
            }, { icon: twitter, name: Socials.TWITTER }, { icon: MailIcon, name: Socials.EMAIL }, {
                icon: copy_link,
                name: Socials.COPY_LINK
            }];
        this.convertedPlatforms = [];
        /**
         * page url that will be shared custom | current page url
         */
        this.url = "";
        /**
         * page url name that will be shared custom | current page url
         */
        this.urlName = "";
        /**
         * selected platforms to share | all platforms
         */
        this.platforms = 'facebook,twitter,whatsapp,email,copy_link';
    }
    componentWillLoad() {
        if (document.getElementById('a2a-script')) {
            return;
        }
        const script = document.createElement('script');
        script.src = 'https://static.addtoany.com/menu/page.js';
        script.setAttribute('id', 'a2a-script');
        script.async = true;
        script.onload = function () {
            window.a2a_config.locale = salla.config.get('user.language_code', salla.lang.getLocale());
            window.a2a_config.callbacks = window.a2a_config.callbacks || [];
            window.a2a_config.callbacks.push({
                share: (data) => {
                    // Handle share event
                    const shareData = {
                        share_via: data.service.toLowerCase(),
                        url: data.url,
                        title: data.title
                    };
                    // Dispatch the share event
                    salla.event.emit('share-element', shareData);
                }
            });
        };
        document.body.appendChild(script);
    }
    /**
     * Activate or open the share menu.
     */
    async open() {
        const animateList = new anime.timeline().add({
            targets: this.shareMenu,
            translateY: [-50, 0],
            opacity: [0, 1],
            duration: 300,
            podding: '0',
            easing: 'easeInOutSine'
        });
        animateList.add({
            targets: this.shareMenu.children,
            translateZ: 0,
            translateY: [-30, 0],
            scaleY: [0, 1],
            opacity: [0, 1],
            duration: 1400,
            delay: anime.stagger(100)
        }, '-=200');
        this.opened = !this.opened;
        if (this.opened) {
            this.shareMenu.classList.add('opened');
        }
        else {
            animateList.pause();
            animateList.seek(0);
            this.shareMenu.classList.remove('opened');
        }
    }
    /**
     * Asynchronously initializes the "AddToAny" (a2a) social sharing tool on the current page.
     * If the global object `window.a2a` is available, it initializes the tool with the 'page' mode.
     * The 'page' mode is typically used to enable sharing of the current webpage.
     *
     * @remarks
     * This function is designed to be used in scenarios where dynamic loading or refreshing of social sharing tools is needed.
     * Ensure that the AddToAny script is properly included in the HTML document before calling this function.
     *
     * @example
     * // Call the refresh function to initialize AddToAny on the page.
     * await refresh();
     *
     * @throws {Error} Throws an error if the AddToAny script is not properly included or if there are issues during initialization.
     *
     * @async
     * @returns {Promise<void>} A promise that resolves once the initialization is complete.
     */
    async refresh() {
        // Attempt to initialize AddToAny with 'page' mode if the global object `window.a2a` is available.
        window.a2a?.init('page');
    }
    render() {
        return (h("div", { key: 'e104cbf1051f36e7d1055a96b8d42e0f38b70f21', class: "s-social-share-wrapper" }, h("slot", { key: '8519676943448a6b87b1b3df8dd74b78de72aeb9', name: 'widget' }, h("salla-button", { key: '0be8b0bf52f046f6818b530430ce1e636fcd36c2', "aria-label": "Share", onClick: () => this.open(), class: "s-social-share-btn", shape: "icon", fill: "outline", color: "light" }, h("span", { key: 'e637247fec7fd1a0235a410ca3e28fb4e7eff7f3', innerHTML: this.opened ? Cancel : ShareAlt }))), h("ul", { key: '8a378bac1865b26744ad31e6bf7218174b24bdd6', ref: el => this.shareMenu = el, class: "s-social-share-list a2a_kit share", "data-a2a-url": this.url ? this.url : window.location.href, "data-a2a-title": this.urlName ? this.urlName : document.title }, this.platforms.split(',').map(platform => {
            return (h("li", null, h("a", { class: `a2a_button_${platform}`, "aria-label": `Share Via ${platform}` }, this.platformIcons.map((icon) => {
                if (icon.name === platform) {
                    return h("span", { class: "s-social-share-icon", innerHTML: icon.icon });
                }
            }))));
        }))));
    }
};
SallaSocialShare.style = sallaSocialShareCss;

const sallaTabContentCss = "";

const SallaTabContent = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.isSelected = false;
    }
    /**
     * Expose self for the parent.
     */
    async getChild() {
        return {
            selected: this.selected.bind(this),
            unselect: this.unselect.bind(this),
            name: this.name
        };
    }
    unselect() {
        this.isSelected = false;
    }
    selected() {
        this.isSelected = true;
    }
    render() {
        const classes = {
            's-tabs-content': true,
            's-tabs-content-selected': this.isSelected
        };
        return (h("div", { key: '571a30d15d890516a1382ed25239df46de519a12', class: classes }, h("slot", { key: '4ceb77d0d6fb15f28e1bb51ec842b7a658ccc160' })));
    }
};
SallaTabContent.style = sallaTabContentCss;

function generateRandomId() {
    return Math.random().toString(36).slice(2, 10);
}

const sallaTabHeaderCss = "";

const SallaTabHeader = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.tabSelected = createEvent(this, "tabSelected");
        this.id = generateRandomId();
        /**
       * The class applied to the currently active(selected) tab
       */
        this.activeClass = undefined;
        /**
         * Set the height of the tab bar
         */
        this.height = undefined;
        /**
         * Center tab items in the given flex.
         */
        this.centered = false;
        this.isSelected = false;
    }
    /**
     * Expose self for the parent.
     */
    async getChild() {
        return {
            selected: this.selected.bind(this),
            unselect: this.unselect.bind(this),
            name: this.name,
            id: this.id
        };
    }
    unselect() {
        this.isSelected = false;
    }
    selected() {
        this.isSelected = true;
    }
    onClick() {
        this.getChild().then(child => {
            this.tabSelected.emit(child);
        });
    }
    render() {
        const classes = {
            's-tabs-header-item': true,
            's-tabs-bg-normal': true,
            's-tabs-active': this.isSelected,
        };
        return [
            h("div", { key: '01eec3d799fd24f75ee29e65447e166057aed846', class: classes, onClick: this.onClick.bind(this) }, h("slot", { key: '200d5e89d7bf9cf232c997fa14c0384be65001c1' })),
        ];
    }
};
SallaTabHeader.style = sallaTabHeaderCss;

const sallaTabsCss = ".s-tabs-header{-ms-overflow-style:none;scrollbar-width:none;}.s-tabs-header::-webkit-scrollbar{display:none}";

const SallaTabs = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Background color
         */
        this.backgroundColor = undefined;
        /**
         * Align tabs vertically.
         */
        this.vertical = false;
    }
    componentWillLoad() {
        this.createGroup().then(() => {
            const [group] = this.tabGroup;
            this.selectGroup(group);
        });
    }
    onSelectedTab(event) {
        const group = this.tabGroup.find(group => group.header.id === event.detail.id);
        this.selectGroup(group);
    }
    async createGroup() {
        const tabsHeaderEl = Array.from(this.host.querySelectorAll('salla-tab-header'));
        this.tabsHeader = await Promise.all(tabsHeaderEl.map(async (el) => await el.getChild()));
        const tabsContentEl = Array.from(this.host.querySelectorAll('salla-tab-content'));
        this.tabsContent = await Promise.all(tabsContentEl.map(async (el) => await el.getChild()));
        this.tabGroup = this.tabsHeader.map(header => {
            const content = this.tabsContent.find(content => content.name === header.name);
            return {
                header: header,
                content: content
            };
        });
    }
    selectGroup(group) {
        this.tabGroup.map(g => {
            g.header.unselect();
            g.content.unselect();
        });
        group.header.selected();
        group.content.selected();
    }
    render() {
        return [
            h("div", { key: '11dca6efd64c797274f2b71aa10426fbdf08d351', class: "s-tabs" }, h("div", { key: '9afd9c6a09728218cddc084c77f417d0249bdfd9', class: "s-tabs-header" }, h("slot", { key: 'eef1f2faed6b440c592e51f6d1205e140584b070', name: "header" })), h("div", { key: 'adb5bd9c1af2ba78c173eb3fbd5c73c0513ccca5', class: "s-tabs-content-wrapper" }, h("slot", { key: 'db9eaa79d095ef71fb1df1ab96ddbb925ec59b40', name: "content" })))
        ];
    }
    get host() { return getElement(this); }
};
SallaTabs.style = sallaTabsCss;

const sallaTelInputCss = ".iti{width:100%;position:relative;display:inline-block}.iti *{box-sizing:border-box;-moz-box-sizing:border-box}.iti__hide{display:none}.iti__v-hide{visibility:hidden}.iti input,.iti input[type=text],.iti input[type=tel]{position:relative;z-index:0;direction:ltr !important;margin-top:0 !important;margin-bottom:0 !important;padding-left:95px !important;padding-right:15px !important;margin-left:0 !important}.iti__flag-container{width:100%;position:absolute;top:0;bottom:0;left:0;padding:1px}.iti__selected-flag{width:80px;z-index:1;position:relative;display:flex;align-items:center;height:100%;float:left;padding:0 15px;box-shadow:none !important;outline:none !important}.ltr .iti__selected-flag{justify-content:flex-end}.iti__selected-flag:before{content:\"\";display:block;width:1px;height:70%;background:#eee;position:absolute;top:15%;right:0}.iti__selected-flag .iti__flag{display:none}.iti__arrow{width:15px;height:15px;line-height:15px;position:absolute;left:10px;top:50%;transform:translateY(-50%)}.iti__arrow:after{content:url(\"data:image/svg+xml,<svg version='1.1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><title>keyboard_arrow_down</title><path d='M9.875 11.104l6.125 6.125 6.125-6.125 1.875 1.875-8 8-8-8z'></path></svg>\");font-size:16px;color:#999;opacity:0.65}.iti__arrow--up:after{transform:rotate(180deg)}.iti__country-list{width:100%;max-height:160px;position:absolute;top:100%;left:0;z-index:2;list-style:none;margin:0;padding:0;margin:5px 0 0 0;border-radius:5px;box-shadow:0px 2px 4px 2px rgba(0, 0, 0, 0.05);border:1px solid #f5f7f9;background-color:white;white-space:nowrap;overflow:hidden;overflow-y:auto;-webkit-overflow-scrolling:touch}.iti__country-list::-webkit-scrollbar{width:4px}.dark .iti__country-list{background-color:rgb(82, 82, 91);border-color:rgb(82, 82, 91)}.iti__country-list li{display:flex;align-items:center;justify-content:flex-start;flex-direction:row;padding:8px 10px;transition:background-color 0.3s}.iti__country-list li span{font-size:12px}.iti__country-list li:hover,.iti__country-list li.highlighted{background-color:rgba(0, 0, 0, 0.05)}.iti__country-list--dropup{bottom:100%;top:unset;margin:0 0 5px 0}@media (max-width: 500px){.iti__country-list{white-space:normal}}.iti__flag-box{display:inline-block;width:20px;margin:0 0 0 5px}.iti__divider{padding-bottom:5px;margin-bottom:5px;border-bottom:1px solid #eee}.iti__country{padding:5px 10px;outline:none}.iti__dial-code{font-family:Arial;color:#999;unicode-bidi:plaintext;letter-spacing:1px}.iti__country.iti__highlight{background-color:rgba(0, 0, 0, 0.05)}.iti__flag-box,.iti__country-name,.iti__dial-code{vertical-align:middle}.iti__country-name{flex:auto;margin:0;padding:0 10px;white-space:normal;line-height:1.3}.iti--allow-dropdown .iti__flag-container,.iti--separate-dial-code .iti__flag-container{left:0}.iti--allow-dropdown .iti__flag-container:hover{cursor:pointer}.iti--allow-dropdown input[disabled]+.iti__flag-container:hover,.iti--allow-dropdown input[readonly]+.iti__flag-container:hover{cursor:default}.iti--allow-dropdown input[disabled]+.iti__flag-container:hover .iti__selected-flag,.iti--allow-dropdown input[readonly]+.iti__flag-container:hover .iti__selected-flag{background-color:transparent}.iti--separate-dial-code .iti__selected-dial-code{unicode-bidi:plaintext;direction:ltr;letter-spacing:1px;font-family:\"Arial\", serif;font-size:13px}.iti--container{top:-18px !important;left:0 !important;padding:1px}.iti--container:hover{cursor:pointer}.iti-mobile .iti--container{inset:0;margin:20px;width:calc(100% - 40px);position:fixed;z-index:9999}.iti-mobile .iti__country-list{max-height:100%;width:100%;inset:0}.iti-mobile .iti__country{padding:10px 10px;line-height:1.5em}.iti__flag{width:20px}.iti__flag.iti__be{width:18px}.iti__flag.iti__ch{width:15px}.iti__flag.iti__mc{width:19px}.iti__flag.iti__ne{width:18px}.iti__flag.iti__np{width:13px}.iti__flag.iti__va{width:15px}@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi){.iti__flag{background-size:5652px 15px}}.iti__flag.iti__ac{height:10px;background-position:0px 0px}.iti__flag.iti__ad{height:14px;background-position:-22px 0px}.iti__flag.iti__ae{height:10px;background-position:-44px 0px}.iti__flag.iti__af{height:14px;background-position:-66px 0px}.iti__flag.iti__ag{height:14px;background-position:-88px 0px}.iti__flag.iti__ai{height:10px;background-position:-110px 0px}.iti__flag.iti__al{height:15px;background-position:-132px 0px}.iti__flag.iti__am{height:10px;background-position:-154px 0px}.iti__flag.iti__ao{height:14px;background-position:-176px 0px}.iti__flag.iti__aq{height:14px;background-position:-198px 0px}.iti__flag.iti__ar{height:13px;background-position:-220px 0px}.iti__flag.iti__as{height:10px;background-position:-242px 0px}.iti__flag.iti__at{height:14px;background-position:-264px 0px}.iti__flag.iti__au{height:10px;background-position:-286px 0px}.iti__flag.iti__aw{height:14px;background-position:-308px 0px}.iti__flag.iti__ax{height:13px;background-position:-330px 0px}.iti__flag.iti__az{height:10px;background-position:-352px 0px}.iti__flag.iti__ba{height:10px;background-position:-374px 0px}.iti__flag.iti__bb{height:14px;background-position:-396px 0px}.iti__flag.iti__bd{height:12px;background-position:-418px 0px}.iti__flag.iti__be{height:15px;background-position:-440px 0px}.iti__flag.iti__bf{height:14px;background-position:-460px 0px}.iti__flag.iti__bg{height:12px;background-position:-482px 0px}.iti__flag.iti__bh{height:12px;background-position:-504px 0px}.iti__flag.iti__bi{height:12px;background-position:-526px 0px}.iti__flag.iti__bj{height:14px;background-position:-548px 0px}.iti__flag.iti__bl{height:14px;background-position:-570px 0px}.iti__flag.iti__bm{height:10px;background-position:-592px 0px}.iti__flag.iti__bn{height:10px;background-position:-614px 0px}.iti__flag.iti__bo{height:14px;background-position:-636px 0px}.iti__flag.iti__bq{height:14px;background-position:-658px 0px}.iti__flag.iti__br{height:14px;background-position:-680px 0px}.iti__flag.iti__bs{height:10px;background-position:-702px 0px}.iti__flag.iti__bt{height:14px;background-position:-724px 0px}.iti__flag.iti__bv{height:15px;background-position:-746px 0px}.iti__flag.iti__bw{height:14px;background-position:-768px 0px}.iti__flag.iti__by{height:10px;background-position:-790px 0px}.iti__flag.iti__bz{height:14px;background-position:-812px 0px}.iti__flag.iti__ca{height:10px;background-position:-834px 0px}.iti__flag.iti__cc{height:10px;background-position:-856px 0px}.iti__flag.iti__cd{height:15px;background-position:-878px 0px}.iti__flag.iti__cf{height:14px;background-position:-900px 0px}.iti__flag.iti__cg{height:14px;background-position:-922px 0px}.iti__flag.iti__ch{height:15px;background-position:-944px 0px}.iti__flag.iti__ci{height:14px;background-position:-961px 0px}.iti__flag.iti__ck{height:10px;background-position:-983px 0px}.iti__flag.iti__cl{height:14px;background-position:-1005px 0px}.iti__flag.iti__cm{height:14px;background-position:-1027px 0px}.iti__flag.iti__cn{height:14px;background-position:-1049px 0px}.iti__flag.iti__co{height:14px;background-position:-1071px 0px}.iti__flag.iti__cp{height:14px;background-position:-1093px 0px}.iti__flag.iti__cr{height:12px;background-position:-1115px 0px}.iti__flag.iti__cu{height:10px;background-position:-1137px 0px}.iti__flag.iti__cv{height:12px;background-position:-1159px 0px}.iti__flag.iti__cw{height:14px;background-position:-1181px 0px}.iti__flag.iti__cx{height:10px;background-position:-1203px 0px}.iti__flag.iti__cy{height:14px;background-position:-1225px 0px}.iti__flag.iti__cz{height:14px;background-position:-1247px 0px}.iti__flag.iti__de{height:12px;background-position:-1269px 0px}.iti__flag.iti__dg{height:10px;background-position:-1291px 0px}.iti__flag.iti__dj{height:14px;background-position:-1313px 0px}.iti__flag.iti__dk{height:15px;background-position:-1335px 0px}.iti__flag.iti__dm{height:10px;background-position:-1357px 0px}.iti__flag.iti__do{height:14px;background-position:-1379px 0px}.iti__flag.iti__dz{height:14px;background-position:-1401px 0px}.iti__flag.iti__ea{height:14px;background-position:-1423px 0px}.iti__flag.iti__ec{height:14px;background-position:-1445px 0px}.iti__flag.iti__ee{height:13px;background-position:-1467px 0px}.iti__flag.iti__eg{height:14px;background-position:-1489px 0px}.iti__flag.iti__eh{height:10px;background-position:-1511px 0px}.iti__flag.iti__er{height:10px;background-position:-1533px 0px}.iti__flag.iti__es{height:14px;background-position:-1555px 0px}.iti__flag.iti__et{height:10px;background-position:-1577px 0px}.iti__flag.iti__eu{height:14px;background-position:-1599px 0px}.iti__flag.iti__fi{height:12px;background-position:-1621px 0px}.iti__flag.iti__fj{height:10px;background-position:-1643px 0px}.iti__flag.iti__fk{height:10px;background-position:-1665px 0px}.iti__flag.iti__fm{height:11px;background-position:-1687px 0px}.iti__flag.iti__fo{height:15px;background-position:-1709px 0px}.iti__flag.iti__fr{height:14px;background-position:-1731px 0px}.iti__flag.iti__ga{height:15px;background-position:-1753px 0px}.iti__flag.iti__gb{height:10px;background-position:-1775px 0px}.iti__flag.iti__gd{height:12px;background-position:-1797px 0px}.iti__flag.iti__ge{height:14px;background-position:-1819px 0px}.iti__flag.iti__gf{height:14px;background-position:-1841px 0px}.iti__flag.iti__gg{height:14px;background-position:-1863px 0px}.iti__flag.iti__gh{height:14px;background-position:-1885px 0px}.iti__flag.iti__gi{height:10px;background-position:-1907px 0px}.iti__flag.iti__gl{height:14px;background-position:-1929px 0px}.iti__flag.iti__gm{height:14px;background-position:-1951px 0px}.iti__flag.iti__gn{height:14px;background-position:-1973px 0px}.iti__flag.iti__gp{height:14px;background-position:-1995px 0px}.iti__flag.iti__gq{height:14px;background-position:-2017px 0px}.iti__flag.iti__gr{height:14px;background-position:-2039px 0px}.iti__flag.iti__gs{height:10px;background-position:-2061px 0px}.iti__flag.iti__gt{height:13px;background-position:-2083px 0px}.iti__flag.iti__gu{height:11px;background-position:-2105px 0px}.iti__flag.iti__gw{height:10px;background-position:-2127px 0px}.iti__flag.iti__gy{height:12px;background-position:-2149px 0px}.iti__flag.iti__hk{height:14px;background-position:-2171px 0px}.iti__flag.iti__hm{height:10px;background-position:-2193px 0px}.iti__flag.iti__hn{height:10px;background-position:-2215px 0px}.iti__flag.iti__hr{height:10px;background-position:-2237px 0px}.iti__flag.iti__ht{height:12px;background-position:-2259px 0px}.iti__flag.iti__hu{height:10px;background-position:-2281px 0px}.iti__flag.iti__ic{height:14px;background-position:-2303px 0px}.iti__flag.iti__id{height:14px;background-position:-2325px 0px}.iti__flag.iti__ie{height:10px;background-position:-2347px 0px}.iti__flag.iti__il{height:15px;background-position:-2369px 0px}.iti__flag.iti__im{height:10px;background-position:-2391px 0px}.iti__flag.iti__in{height:14px;background-position:-2413px 0px}.iti__flag.iti__io{height:10px;background-position:-2435px 0px}.iti__flag.iti__iq{height:14px;background-position:-2457px 0px}.iti__flag.iti__ir{height:12px;background-position:-2479px 0px}.iti__flag.iti__is{height:15px;background-position:-2501px 0px}.iti__flag.iti__it{height:14px;background-position:-2523px 0px}.iti__flag.iti__je{height:12px;background-position:-2545px 0px}.iti__flag.iti__jm{height:10px;background-position:-2567px 0px}.iti__flag.iti__jo{height:10px;background-position:-2589px 0px}.iti__flag.iti__jp{height:14px;background-position:-2611px 0px}.iti__flag.iti__ke{height:14px;background-position:-2633px 0px}.iti__flag.iti__kg{height:12px;background-position:-2655px 0px}.iti__flag.iti__kh{height:13px;background-position:-2677px 0px}.iti__flag.iti__ki{height:10px;background-position:-2699px 0px}.iti__flag.iti__km{height:12px;background-position:-2721px 0px}.iti__flag.iti__kn{height:14px;background-position:-2743px 0px}.iti__flag.iti__kp{height:10px;background-position:-2765px 0px}.iti__flag.iti__kr{height:14px;background-position:-2787px 0px}.iti__flag.iti__kw{height:10px;background-position:-2809px 0px}.iti__flag.iti__ky{height:10px;background-position:-2831px 0px}.iti__flag.iti__kz{height:10px;background-position:-2853px 0px}.iti__flag.iti__la{height:14px;background-position:-2875px 0px}.iti__flag.iti__lb{height:14px;background-position:-2897px 0px}.iti__flag.iti__lc{height:10px;background-position:-2919px 0px}.iti__flag.iti__li{height:12px;background-position:-2941px 0px}.iti__flag.iti__lk{height:10px;background-position:-2963px 0px}.iti__flag.iti__lr{height:11px;background-position:-2985px 0px}.iti__flag.iti__ls{height:14px;background-position:-3007px 0px}.iti__flag.iti__lt{height:12px;background-position:-3029px 0px}.iti__flag.iti__lu{height:12px;background-position:-3051px 0px}.iti__flag.iti__lv{height:10px;background-position:-3073px 0px}.iti__flag.iti__ly{height:10px;background-position:-3095px 0px}.iti__flag.iti__ma{height:14px;background-position:-3117px 0px}.iti__flag.iti__mc{height:15px;background-position:-3139px 0px}.iti__flag.iti__md{height:10px;background-position:-3160px 0px}.iti__flag.iti__me{height:10px;background-position:-3182px 0px}.iti__flag.iti__mf{height:14px;background-position:-3204px 0px}.iti__flag.iti__mg{height:14px;background-position:-3226px 0px}.iti__flag.iti__mh{height:11px;background-position:-3248px 0px}.iti__flag.iti__mk{height:10px;background-position:-3270px 0px}.iti__flag.iti__ml{height:14px;background-position:-3292px 0px}.iti__flag.iti__mm{height:14px;background-position:-3314px 0px}.iti__flag.iti__mn{height:10px;background-position:-3336px 0px}.iti__flag.iti__mo{height:14px;background-position:-3358px 0px}.iti__flag.iti__mp{height:10px;background-position:-3380px 0px}.iti__flag.iti__mq{height:14px;background-position:-3402px 0px}.iti__flag.iti__mr{height:14px;background-position:-3424px 0px}.iti__flag.iti__ms{height:10px;background-position:-3446px 0px}.iti__flag.iti__mt{height:14px;background-position:-3468px 0px}.iti__flag.iti__mu{height:14px;background-position:-3490px 0px}.iti__flag.iti__mv{height:14px;background-position:-3512px 0px}.iti__flag.iti__mw{height:14px;background-position:-3534px 0px}.iti__flag.iti__mx{height:12px;background-position:-3556px 0px}.iti__flag.iti__my{height:10px;background-position:-3578px 0px}.iti__flag.iti__mz{height:14px;background-position:-3600px 0px}.iti__flag.iti__na{height:14px;background-position:-3622px 0px}.iti__flag.iti__nc{height:10px;background-position:-3644px 0px}.iti__flag.iti__ne{height:15px;background-position:-3666px 0px}.iti__flag.iti__nf{height:10px;background-position:-3686px 0px}.iti__flag.iti__ng{height:10px;background-position:-3708px 0px}.iti__flag.iti__ni{height:12px;background-position:-3730px 0px}.iti__flag.iti__nl{height:14px;background-position:-3752px 0px}.iti__flag.iti__no{height:15px;background-position:-3774px 0px}.iti__flag.iti__np{height:15px;background-position:-3796px 0px}.iti__flag.iti__nr{height:10px;background-position:-3811px 0px}.iti__flag.iti__nu{height:10px;background-position:-3833px 0px}.iti__flag.iti__nz{height:10px;background-position:-3855px 0px}.iti__flag.iti__om{height:10px;background-position:-3877px 0px}.iti__flag.iti__pa{height:14px;background-position:-3899px 0px}.iti__flag.iti__pe{height:14px;background-position:-3921px 0px}.iti__flag.iti__pf{height:14px;background-position:-3943px 0px}.iti__flag.iti__pg{height:15px;background-position:-3965px 0px}.iti__flag.iti__ph{height:10px;background-position:-3987px 0px}.iti__flag.iti__pk{height:14px;background-position:-4009px 0px}.iti__flag.iti__pl{height:13px;background-position:-4031px 0px}.iti__flag.iti__pm{height:14px;background-position:-4053px 0px}.iti__flag.iti__pn{height:10px;background-position:-4075px 0px}.iti__flag.iti__pr{height:14px;background-position:-4097px 0px}.iti__flag.iti__ps{height:10px;background-position:-4119px 0px}.iti__flag.iti__pt{height:14px;background-position:-4141px 0px}.iti__flag.iti__pw{height:13px;background-position:-4163px 0px}.iti__flag.iti__py{height:11px;background-position:-4185px 0px}.iti__flag.iti__qa{height:8px;background-position:-4207px 0px}.iti__flag.iti__re{height:14px;background-position:-4229px 0px}.iti__flag.iti__ro{height:14px;background-position:-4251px 0px}.iti__flag.iti__rs{height:14px;background-position:-4273px 0px}.iti__flag.iti__ru{height:14px;background-position:-4295px 0px}.iti__flag.iti__rw{height:14px;background-position:-4317px 0px}.iti__flag.iti__sa{height:14px;background-position:-4339px 0px}.iti__flag.iti__sb{height:10px;background-position:-4361px 0px}.iti__flag.iti__sc{height:10px;background-position:-4383px 0px}.iti__flag.iti__sd{height:10px;background-position:-4405px 0px}.iti__flag.iti__se{height:13px;background-position:-4427px 0px}.iti__flag.iti__sg{height:14px;background-position:-4449px 0px}.iti__flag.iti__sh{height:10px;background-position:-4471px 0px}.iti__flag.iti__si{height:10px;background-position:-4493px 0px}.iti__flag.iti__sj{height:15px;background-position:-4515px 0px}.iti__flag.iti__sk{height:14px;background-position:-4537px 0px}.iti__flag.iti__sl{height:14px;background-position:-4559px 0px}.iti__flag.iti__sm{height:15px;background-position:-4581px 0px}.iti__flag.iti__sn{height:14px;background-position:-4603px 0px}.iti__flag.iti__so{height:14px;background-position:-4625px 0px}.iti__flag.iti__sr{height:14px;background-position:-4647px 0px}.iti__flag.iti__ss{height:10px;background-position:-4669px 0px}.iti__flag.iti__st{height:10px;background-position:-4691px 0px}.iti__flag.iti__sv{height:12px;background-position:-4713px 0px}.iti__flag.iti__sx{height:14px;background-position:-4735px 0px}.iti__flag.iti__sy{height:14px;background-position:-4757px 0px}.iti__flag.iti__sz{height:14px;background-position:-4779px 0px}.iti__flag.iti__ta{height:10px;background-position:-4801px 0px}.iti__flag.iti__tc{height:10px;background-position:-4823px 0px}.iti__flag.iti__td{height:14px;background-position:-4845px 0px}.iti__flag.iti__tf{height:14px;background-position:-4867px 0px}.iti__flag.iti__tg{height:13px;background-position:-4889px 0px}.iti__flag.iti__th{height:14px;background-position:-4911px 0px}.iti__flag.iti__tj{height:10px;background-position:-4933px 0px}.iti__flag.iti__tk{height:10px;background-position:-4955px 0px}.iti__flag.iti__tl{height:10px;background-position:-4977px 0px}.iti__flag.iti__tm{height:14px;background-position:-4999px 0px}.iti__flag.iti__tn{height:14px;background-position:-5021px 0px}.iti__flag.iti__to{height:10px;background-position:-5043px 0px}.iti__flag.iti__tr{height:14px;background-position:-5065px 0px}.iti__flag.iti__tt{height:12px;background-position:-5087px 0px}.iti__flag.iti__tv{height:10px;background-position:-5109px 0px}.iti__flag.iti__tw{height:14px;background-position:-5131px 0px}.iti__flag.iti__tz{height:14px;background-position:-5153px 0px}.iti__flag.iti__ua{height:14px;background-position:-5175px 0px}.iti__flag.iti__ug{height:14px;background-position:-5197px 0px}.iti__flag.iti__um{height:11px;background-position:-5219px 0px}.iti__flag.iti__un{height:14px;background-position:-5241px 0px}.iti__flag.iti__us{height:11px;background-position:-5263px 0px}.iti__flag.iti__uy{height:14px;background-position:-5285px 0px}.iti__flag.iti__uz{height:10px;background-position:-5307px 0px}.iti__flag.iti__va{height:15px;background-position:-5329px 0px}.iti__flag.iti__vc{height:14px;background-position:-5346px 0px}.iti__flag.iti__ve{height:14px;background-position:-5368px 0px}.iti__flag.iti__vg{height:10px;background-position:-5390px 0px}.iti__flag.iti__vi{height:14px;background-position:-5412px 0px}.iti__flag.iti__vn{height:14px;background-position:-5434px 0px}.iti__flag.iti__vu{height:12px;background-position:-5456px 0px}.iti__flag.iti__wf{height:14px;background-position:-5478px 0px}.iti__flag.iti__ws{height:10px;background-position:-5500px 0px}.iti__flag.iti__xk{height:15px;background-position:-5522px 0px}.iti__flag.iti__ye{height:14px;background-position:-5544px 0px}.iti__flag.iti__yt{height:14px;background-position:-5566px 0px}.iti__flag.iti__za{height:14px;background-position:-5588px 0px}.iti__flag.iti__zm{height:14px;background-position:-5610px 0px}.iti__flag.iti__zw{height:10px;background-position:-5632px 0px}.iti__flag{height:15px;box-shadow:0px 0px 1px 0px #888;background-image:url(\"https://cdn.salla.network/images/flags.png\");background-repeat:no-repeat;background-color:#f5f7f9;background-position:20px 0}@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi){.iti__flag{background-image:url(\"https://cdn.salla.network/images/flags@2x.png\")}}.iti__flag.iti__np{background-color:transparent}";

const SallaTelInput = class {
    /**
     * Lazy load intl-tel-input library
     * This reduces initial bundle size by ~80-90KB
     */
    async loadTelInput() {
        if (this.TelInput)
            return;
        try {
            const telInputModule = await import('./index-Ci3jSA26.js').then(function (n) { return n.i; });
            this.TelInput = telInputModule.default;
        }
        catch (error) {
            console.error('Failed to load Tel Input:', error);
            salla.notify?.error?.('Failed to load phone input. Please refresh the page.');
            throw error;
        }
    }
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.phoneEntered = createEvent(this, "phoneEntered");
        /**
         * input name
         */
        this.name = 'phone';
        /**
         * input name
         */
        this.disabled = false;
        /**
         * Current country_code
         */
        this.countryCode = salla.config.get('user.country_code', 'SA') || 'SA';
        this.countryCodeLabel = salla.lang.get('common.country_code');
        this.mobileLabel = salla.lang.get('common.elements.mobile');
        this.tooShort = salla.lang.get('common.errors.too_short', { attribute: this.mobileLabel });
        this.tooLong = salla.lang.get('common.errors.too_long', { attribute: this.mobileLabel });
        this.invalidCountryCode = salla.lang.get('common.errors.invalid_value', { attribute: this.countryCodeLabel });
        this.invalidNumber = salla.lang.get('common.errors.invalid_value', { attribute: this.mobileLabel });
        this.errorMap = [this.invalidNumber, this.invalidCountryCode, this.tooShort, this.tooLong, this.invalidNumber];
        salla.lang.onLoaded(() => {
            this.mobileLabel = salla.lang.get('common.elements.mobile');
            this.countryCodeLabel = salla.lang.get('common.elements.country_code');
            this.invalidNumber = salla.lang.get('common.errors.invalid_value', { attribute: this.mobileLabel });
            this.invalidCountryCode = salla.lang.get('common.errors.invalid_value', { attribute: this.countryCodeLabel });
            this.tooShort = salla.lang.get('common.errors.too_short', { attribute: this.mobileLabel });
            this.tooLong = salla.lang.get('common.errors.too_long', { attribute: this.mobileLabel });
            this.mobileRequired = salla.lang.get('common.errors.field_required', { attribute: this.mobileLabel });
            this.errorMap = [this.invalidNumber, this.invalidCountryCode, this.tooShort, this.tooLong, this.invalidNumber];
        });
    }
    /**
     * Get current values
     * @return {{mobile:number,countryCode:'SA'|string}}
     */
    async getValues() {
        return {
            [this.name]: this.phone = this.phoneInput.value,
            countryCode: this.countryCode = this.countryCodeInput.value,
            countryKey: this.host.querySelector('.iti__selected-dial-code').innerText
        };
    }
    /**
     * Is current data valid or not
     * @return {boolean}
     */
    async isValid() {
        this.reset();
        if (this.iti.isValidNumber())
            return true;
        if (!this.phoneInput.value.trim()) {
            this.phoneInput.classList.add("s-has-error");
            this.errorMsg.innerText = this.mobileRequired || 'The mobile is required';
            return;
        }
        this.phoneInput.classList.add("s-has-error");
        let errorCode = this.iti.getValidationError();
        this.errorMsg.innerText = this.errorMap[errorCode] || '';
        salla.logger.info('Phone number (' + this.countryCode + ' - ' + this.phone + ') is not valid, error code ' + errorCode);
        return false;
    }
    async initTelInput() {
        // Load intl-tel-input before initializing
        await this.loadTelInput();
        salla.helpers.inputDigitsOnly(this.phoneInput);
        this.iti = this.TelInput(this.phoneInput, {
            initialCountry: this.countryCode?.toLowerCase() || 'sa',
            preferredCountries: ['sa', 'ae', 'kw', 'bh', 'qa', 'iq', 'om', 'ye', 'eg', 'jo', 'ps', 'sd', 'lb', 'dz', 'tn', 'ma', 'ly'],
            excludeCountries: ['sy', 'ir', 'cu', 'kp'],
            formatOnDisplay: false,
            separateDialCode: true,
            autoPlaceholder: 'aggressive',
            utilsScript: 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/21.2.7/js/utils.min.js',
            dropdownContainer: this.host
        });
        this.autofocus && this.phoneInput.focus();
        this.phoneInput.addEventListener("countrychange", () => {
            let data = this.iti.getSelectedCountryData();
            let value = data.iso2.toUpperCase();
            this.countryCodeInput.value = value;
            this.countryCode = value;
            this.phoneEntered.emit({ number: this.phone, country_code: value });
        });
        // on blur: validate
        // this.phoneInput.addEventListener('blur', () => this.isValid());
        // on keyup / change flag: reset
        this.phoneInput.addEventListener('input', (e) => {
            salla.helpers.inputDigitsOnly(e.target);
            this.reset();
            this.phoneEntered.emit({ number: e.target.value, country_code: this.countryCode });
        });
    }
    reset() {
        this.phoneInput.classList.remove("s-has-error");
        this.errorMsg.innerHTML = "";
    }
    ;
    handleCountryInput(event) {
        if (!!this.phone) {
            this.phoneEntered.emit({ number: event.target.value, country_code: this.countryCode });
        }
    }
    render() {
        return (h(Host, { key: '8dae2336c70ca8da12846544c99eff5150ee3197', class: "s-tel-input" }, h("input", { key: '6512ba297a7f1e85f3e6b1a6ba7634c16e57116c', type: "tel", disabled: this.disabled, name: this.name, value: this.phone, onChange: (event) => this.handleCountryInput(event), ref: el => this.phoneInput = el, enterkeyhint: "next", autocomplete: "tel", class: "s-tel-input-control tel-input s-ltr" }), h("span", { key: '92def9152e10e06c390e8333048095dcc7613867', class: "s-tel-input-error-msg", ref: el => this.errorMsg = el }), h("input", { key: '0a77d8be70d5f9a1e8ac75e444537f0f45fa76d0', type: "hidden", name: "country_code", value: this.countryCode, ref: el => this.countryCodeInput = el, class: "country_code" })));
    }
    componentDidLoad() {
        this.initTelInput();
    }
    get host() { return getElement(this); }
};
SallaTelInput.style = sallaTelInputCss;

var OrderIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>box-bankers</title>
<path d="M28 1.333h-24c-2.205 0-4 1.795-4 4v5.333c0 0.736 0.597 1.333 1.333 1.333v14.667c0 2.205 1.795 4 4 4h21.333c2.205 0 4-1.795 4-4v-14.667c0.736 0 1.333-0.597 1.333-1.333v-5.333c0-2.205-1.795-4-4-4zM28 26.667c0 0.735-0.599 1.333-1.333 1.333h-21.333c-0.735 0-1.333-0.599-1.333-1.333v-14.667h5.333v2.667c0 1.471 1.196 2.667 2.667 2.667h8c1.471 0 2.667-1.196 2.667-2.667v-2.667h5.333zM12 14.667v-2.667h8v2.667zM29.333 9.333h-26.667v-4c0-0.735 0.599-1.333 1.333-1.333h24c0.735 0 1.333 0.599 1.333 1.333z"></path>
</svg>
`;

var UserCircle = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>user-circle</title>
<path d="M16 22.964c-4.525 0-8.447 1.713-9.993 4.365-0.371 0.636-0.156 1.452 0.48 1.823s1.453 0.156 1.823-0.48c0.855-1.465 3.624-3.041 7.689-3.041s6.835 1.576 7.689 3.041c0.249 0.424 0.696 0.661 1.155 0.661 0.228 0 0.459-0.059 0.669-0.181 0.637-0.371 0.852-1.187 0.48-1.823-1.545-2.652-5.467-4.365-9.992-4.365zM22.667 13.631c0-3.676-2.991-6.667-6.667-6.667s-6.667 2.991-6.667 6.667 2.991 6.667 6.667 6.667 6.667-2.992 6.667-6.667zM12 13.631c0-2.205 1.795-4 4-4s4 1.795 4 4-1.795 4-4 4-4-1.795-4-4zM16 0.297c-8.823 0-16 7.177-16 16 0 2.941 0.821 5.831 2.373 8.357 0.252 0.411 0.689 0.636 1.137 0.636 0.239 0 0.479-0.064 0.696-0.197 0.628-0.385 0.824-1.207 0.439-1.833-1.295-2.108-1.979-4.516-1.979-6.963 0-7.352 5.981-13.333 13.333-13.333s13.333 5.981 13.333 13.333c0 2.448-0.684 4.856-1.979 6.961-0.385 0.628-0.189 1.448 0.437 1.835 0.627 0.384 1.448 0.189 1.835-0.437 1.553-2.527 2.373-5.416 2.373-8.359 0-8.823-7.177-16-16-16z"></path>
</svg>
`;

var LogoutIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>send-out</title>
<path d="M16 26.667h-9.333c-0.736 0-1.333-0.597-1.333-1.333v-18.667c0-0.736 0.597-1.333 1.333-1.333h9.333c0.737 0 1.333-0.596 1.333-1.333s-0.596-1.333-1.333-1.333h-9.333c-2.205 0-4 1.795-4 4v18.667c0 2.205 1.795 4 4 4h9.333c0.737 0 1.333-0.596 1.333-1.333s-0.596-1.333-1.333-1.333zM29.231 15.491c-0.068-0.164-0.167-0.312-0.289-0.436l-5.332-5.332c-0.521-0.521-1.364-0.521-1.885 0s-0.521 1.364 0 1.885l3.057 3.059h-12.781c-0.737 0-1.333 0.596-1.333 1.333s0.596 1.333 1.333 1.333h12.781l-3.057 3.057c-0.521 0.521-0.521 1.364 0 1.885 0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391l5.332-5.332c0.124-0.123 0.221-0.271 0.289-0.435 0.135-0.325 0.135-0.693 0-1.019z"></path>
</svg>
`;

var WalletIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>wallet</title>
<path d="M28 6.667h-24c-0.736 0-1.333-0.597-1.333-1.333s0.597-1.333 1.333-1.333h24c0.737 0 1.333-0.596 1.333-1.333s-0.596-1.333-1.333-1.333h-24c-2.204 0-3.999 1.793-4 3.997v18.669c0 3.676 2.991 6.667 6.667 6.667h21.333c2.205 0 4-1.795 4-4v-16c0-2.205-1.795-4-4-4zM29.333 26.667c0 0.736-0.597 1.333-1.333 1.333h-21.333c-2.205 0-4-1.795-4-4v-14.895c0.416 0.147 0.865 0.228 1.333 0.228h24c0.736 0 1.333 0.597 1.333 1.333zM22.667 14.667c-2.205 0-4 1.795-4 4s1.795 4 4 4 4-1.795 4-4-1.795-4-4-4zM22.667 20c-0.736 0-1.333-0.597-1.333-1.333s0.597-1.333 1.333-1.333 1.333 0.597 1.333 1.333-0.597 1.333-1.333 1.333z"></path>
</svg>
`;

const sallaUserMenuCss = "";

const SallaUserMenu = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.items = {
            notifications: BellRing,
            orders: OrderIcon,
            pending_orders: PendingOrdersIcon,
            wishlist: WishListIcon,
            profile: UserCircle,
            wallet: WalletIcon,
            loyalty_program: GiftIcon,
        };
        this.accountLoading = false;
        this.opened = false;
        this.notifications = salla.lang.get('common.titles.notifications');
        this.orders = salla.lang.get('common.titles.orders');
        this.pending_orders = salla.lang.get('common.titles.pending_orders');
        this.wishlist = salla.lang.get('common.titles.wishlist');
        this.profile = salla.lang.get('common.titles.profile');
        this.rating = salla.lang.get('common.titles.rating');
        this.wallet = salla.lang.get('common.titles.wallet');
        this.loyalty_program = salla.lang.get('pages.loyalty_program.loyalty_points');
        this.logout = salla.lang.get('blocks.header.logout');
        this.hello = salla.lang.get('pages.checkout.hello');
        this.first_name = salla.storage.get('user.first_name') || '';
        this.last_name = salla.storage.get('user.last_name') || '';
        this.avatar = salla.storage.get('user.avatar') || salla.url.cdn('images/avatar.png', 40, 40);
        this.badges = {
            notifications: salla.helpers.number(salla.storage.get('user.notifications') || 0),
            pending_orders: salla.helpers.number(salla.storage.get('user.pending_orders') || 0),
        };
        this.hasBadges = Number(salla.storage.get('user.pending_orders')) > 0 ||
            Number(salla.storage.get('user.notifications')) > 0;
        /**
         * To display only the list without the dropdown functionality
         */
        this.inline = false;
        /**
         * To display the trigger as an avatar only
         */
        this.avatarOnly = false;
        /**
         * To display the dropdown header in mobile sheet
         */
        this.showHeader = false;
        /**
         * To Make the dropdown menu relative to parent element or not
         */
        this.relativeDropdown = false;
        this.onClickOutside = () => {
            this.opened = false;
        };
        this.OrderUpdate = 0;
        // salla.auth.event.onLoggedIn(() => {
        //   this.is_loggedIn = true
        // })
        salla.lang.onLoaded(() => {
            this.notifications = salla.lang.get('common.titles.notifications');
            this.orders = salla.lang.get('common.titles.orders');
            this.pending_orders = salla.lang.get('common.titles.pending_orders');
            this.wishlist = salla.lang.get('common.titles.wishlist');
            this.profile = salla.lang.get('common.titles.profile');
            this.hello = salla.lang.get('pages.checkout.hello');
            this.rating = salla.lang.get('common.titles.rating');
            this.wallet = salla.lang.get('common.titles.wallet');
            this.loyalty_program = salla.lang.get('pages.loyalty_program.loyalty_points');
            this.logout = salla.lang.get('blocks.header.logout');
        });
        //we need it only in theme-y
        if (this.host.hasAttribute('with-rating')) {
            this.items.rating = Rate;
        }
        //we need it to be the last item
        this.items.logout = LogoutIcon;
        salla.onReady(() => {
            if (salla.config.isGuest()) {
                return;
            }
            this.is_loggedIn = true;
            /**
             * Get Fresh Notifications In These Cases:
             * - is notification page, if user already changed the status of his orders (to reset notification badge)
             * - is pending orders page, if user already changed the status of his orders (to reset orders badge)
             * - is profile page, in case user changed his name or avatar, we need to update it
             * - half hour is passed from the last user data fetched
             *
             * //todo:: update the data in the storage in customer pages
             * //todo:: cover two requests in customer pages
             * //todo:: make sure to run this only after token is set
             */
            const shouldFetchProfile = !this.inline &&
                (salla.url.is_page('customer.notifications') ||
                    salla.url.is_page('customer.orders.index.pending') ||
                    salla.url.is_page('customer.profile') ||
                    (Date.now() - (salla.storage.get('user.fetched_at') || 0)) / 1000 / 60 > 30);
            if (shouldFetchProfile) {
                this.fetchFreshProfile();
            }
            else {
                salla.event.on('profile::info.fetched', res => {
                    this.updateProfileState(res);
                });
            }
        });
    }
    componentWillLoad() {
        return new Promise(resolve => salla.onReady(resolve)).then(() => {
            let trigger = this.host.querySelector('[slot="trigger"]');
            this.triggerSlot =
                '<div class="s-user-menu-trigger"><div class="s-user-menu-avatar-wrap"><img class="s-user-menu-trigger-avatar" src="{avatar}" alt="{first_name}{last_name}" /></div><div class="s-user-menu-trigger-content"><span class="s-user-menu-trigger-hello">{hello}</span><p class="s-user-menu-trigger-name">{first_name} {last_name}</p></div> <i class="s-user-menu-trigger-icon">{icon}</i></div>';
            if (!trigger) {
                return;
            }
            this.triggerSlot = trigger.innerHTML;
            trigger.innerHTML = this.replaceParams(trigger.innerHTML);
        });
    }
    fetchFreshProfile() {
        //don't request fetchFreshProfile unless token is injected into the api
        if (!salla.api.token) {
            salla.log('trying to fetchFreshProfile before injected the token!!');
            return;
        }
        salla.profile.api.info().then(res => {
            this.updateProfileState(res);
        });
    }
    updateProfileState(res) {
        this.badges = {
            notifications: salla.helpers.number(res.data.notifications || 0),
            pending_orders: salla.helpers.number(res.data.pending_orders || 0),
        };
        this.hasBadges = Number(res.data.pending_orders) > 0 || Number(res.data.notifications) > 0;
        this.first_name = res.data.first_name;
        this.last_name = res.data.last_name;
        this.avatar = res.data.avatar || salla.url.cdn('images/avatar.png', 40, 40);
    }
    async open(e) {
        this.opened = !this.opened;
        e.stopPropagation();
        if (this.opened) {
            window.addEventListener('click', this.onClickOutside);
        }
    }
    menuItemClicked(event, item) {
        if (item[0] !== 'logout') {
            return;
        }
        event.preventDefault();
        salla.auth.logout('sall-user-menu');
    }
    replaceParams(body) {
        return body
            .replace(/\{hello\}/g, this.hello)
            .replace(/\{first_name\}/g, this.first_name)
            .replace(/\{last_name\}/g, this.last_name)
            .replace(/\{avatar\}/g, this.avatar)
            .replace(/\{icon\}/g, ArrowDownIcon);
    }
    getTheHeader() {
        return (h("div", { class: {
                's-user-menu-trigger-slot': true,
                's-user-menu-red-dot': this.hasBadges,
                's-user-menu-trigger-avatar-only': this.avatarOnly,
            }, id: "trigger-slot", onClick: e => this.open(e), innerHTML: this.replaceParams(this.triggerSlot) }));
    }
    getMenuItem(item, i) {
        //todo:: enhancement support slot here
        if (item[0] === 'wallet' && !window.can_access_wallet)
            return;
        if (item[0] === 'loyalty_program' && !salla.config.get('store.features').includes('loyalty-system'))
            return;
        return (h("li", { class: {
                's-user-menu-dropdown-item': true,
                's-user-menu-dropdown-item-logout': i + 1 == Object.entries(this.items).length,
            } }, h("a", { href: salla.url.get(item[0]), onClick: event => this.menuItemClicked(event, item) }, h("i", { innerHTML: item[1] }, " "), h("span", { class: "s-user-menu-dropdown-item-title" }, this[item[0]]), !['Ÿ†', '0', undefined].includes(this.badges[item[0]]) ? (h("span", { class: "s-user-menu-dropdown-item-badge" }, this.badges[item[0]])) : (''))));
    }
    componentShouldUpdate() {
        if (!this.opened) {
            window.removeEventListener('click', this.onClickOutside);
        }
    }
    render() {
        if (!this.is_loggedIn) {
            return (h(Host, null, h("slot", { name: "login-btn" }, h("button", { class: "s-user-menu-login-btn", onClick: () => salla.event.dispatch('login::open'), innerHTML: UserCircle }))));
        }
        if (this.inline) {
            return (h(Host, null, h("ul", { class: "s-user-menu-inline" }, Object.entries(this.items).map((item, i) => this.getMenuItem(item, i)))));
        }
        return (h(Host, null, h("div", { class: {
                's-user-menu-wrapper': true,
                's-user-menu-relative-dropdown': this.relativeDropdown,
            } }, this.getTheHeader(), h("div", { class: { 's-user-menu-toggler': true, opened: this.opened } }, h("div", { class: "s-user-menu-dropdown", onClick: e => e.stopPropagation() }, this.showHeader ? (h("div", { class: "s-user-menu-dropdown-header" }, h("img", { src: this.avatar, alt: `${this.first_name} ${this.last_name}` }), h("div", { class: "s-user-menu-dropdown-header-content" }, h("span", null, this.hello), h("p", null, this.first_name, " ", this.last_name)), h("button", { class: "s-user-menu-dropdown-header-close", innerHTML: Cancel, onClick: () => (this.opened = false) }))) : (''), h("ul", { class: "s-user-menu-dropdown-list" }, Object.entries(this.items).map((item, i) => this.getMenuItem(item, i))))))));
    }
    componentDidLoad() {
        //make sure to load the avatar if it's lazy, we use it in Y
        document.lazyLoadInstance?.update(this.host.querySelectorAll('.lazy'));
    }
    get host() { return getElement(this); }
};
SallaUserMenu.style = sallaUserMenuCss;

var Genders;
(function (Genders) {
    Genders["Female"] = "female";
    Genders["Male"] = "male";
})(Genders || (Genders = {}));
var FormFieldTypes;
(function (FormFieldTypes) {
    FormFieldTypes["Photo"] = "photo";
    FormFieldTypes["Text"] = "Text";
})(FormFieldTypes || (FormFieldTypes = {}));

const sallaUserProfileCss = ":host{display:block}";

const SallaUserProfile = class {
    // Constructor
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * The minimum allowed age for a user. Users with a birthdate indicating an age less than this value will be considered invalid.
         * Defaults to 10.
         * @type {number}
         */
        this.minAge = 10;
        this.isEditable = true;
        this.disableAction = false;
        this.isLoading = true;
        // Translated Strings State
        this.first_name_trans = salla.lang.get('pages.profile.first_name');
        this.last_name_trans = salla.lang.get('pages.profile.last_name');
        this.birthday_trans = salla.lang.get('pages.profile.birthday');
        this.birthday_placeholder_trans = salla.lang.get('pages.profile.birthday_placeholder');
        this.gender_trans = salla.lang.get('pages.profile.gender');
        this.gender_placeholder_trans = salla.lang.get('pages.profile.gender_placeholder');
        this.male_trans = salla.lang.get('pages.profile.male');
        this.female_trans = salla.lang.get('pages.profile.female');
        this.email_trans = salla.lang.get('common.elements.email');
        this.mobile_trans = salla.lang.get('common.elements.mobile');
        this.save_btn_trans = salla.lang.get('common.elements.save');
        this.drag_and_drop_trans = salla.lang.get('common.uploader.drag_and_drop');
        this.browse_trans = salla.lang.get('common.uploader.browse');
        this.email_required_trans = salla.lang.get('pages.checkout.email_required');
        this.invalid_email_trans = salla.lang.get('pages.error.invalid_value', {
            attribute: 'email',
        });
        // Localization setup when the language is loaded
        salla.lang.onLoaded(() => {
            // Assigning translated strings to state properties
            // These translations are fetched from the localization object
            this.first_name_trans = salla.lang.get('pages.profile.first_name');
            this.last_name_trans = salla.lang.get('pages.profile.last_name');
            this.birthday_trans = salla.lang.get('pages.profile.birthday');
            this.birthday_placeholder_trans = salla.lang.get('pages.profile.birthday_placeholder');
            this.gender_trans = salla.lang.get('pages.profile.gender');
            this.gender_placeholder_trans = salla.lang.get('pages.profile.gender_placeholder');
            this.male_trans = salla.lang.get('pages.profile.male');
            this.female_trans = salla.lang.get('pages.profile.female');
            this.email_trans = salla.lang.get('common.elements.email');
            this.mobile_trans = salla.lang.get('common.elements.mobile');
            this.save_btn_trans = salla.lang.get('common.elements.save');
            this.drag_and_drop_trans = salla.lang.get('common.uploader.drag_and_drop');
            this.browse_trans = salla.lang.get('common.uploader.browse');
            this.email_required_trans = salla.lang.get('pages.checkout.email_required');
            this.invalid_email_trans = salla.lang.get('pages.error.invalid_value', {
                attribute: 'email',
            });
        });
    }
    /**
     * Sets custom fields for the component. Can be handy for non HTML usage.
     *
     * @param fields - An array of custom fields.
     */
    async setCustomFields(fields) {
        this.userDefinedFields = fields;
    }
    // Event handler for phone number field changes
    phoneNumberFieldEventHandler(data) {
        if (!data.detail.number) {
            return (this.disableAction = true);
        }
        this.userData.phone.number = parseInt(data.detail.number);
        this.userData.phone.country = data.detail.country_code;
        this.disableAction = false;
    }
    // Event handler for generic field changes
    handleFieldChange(key, event, required = false) {
        if (event.target.value) {
            this.userData[key] = event.target.value;
            this.disableAction = false;
        }
        else {
            if (required) {
                this.disableAction = true;
            }
        }
    }
    // Event handler for file upload changes
    handleOnFileAdded(key, data) {
        // TODO: the key in here, shall be not have whitespace. or the key for
        // the field shall be provided with one of the properties of the custom field
        if (!data.detail.error) {
            this.userData[key] = data.detail.file;
            this.disableAction = false;
        }
        else {
            this.disableAction = true;
        }
    }
    // Event handler for email input changes
    handleEmailInput(key, event) {
        const emailErrorDisplaySection = document.getElementById('email-error');
        const email = event.target.value;
        if (!email) {
            this.disableAction = true;
            return (emailErrorDisplaySection.textContent = this.email_required_trans);
        }
        const emailPattern = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
        if (!emailPattern.test(email)) {
            this.disableAction = true;
            return (emailErrorDisplaySection.textContent = this.invalid_email_trans);
        }
        emailErrorDisplaySection.textContent = '';
        this.userData[key] = email;
        this.disableAction = false;
    }
    // Helper method to trim language code from URL
    trimLanguageCodeFromUrl(url, languageCode) {
        const pattern = new RegExp(`^(https?://[^/]+)\\/${languageCode}(.*)`, 'i');
        const match = url.replace(/\/+$/, '').match(pattern);
        if (match && match.length >= 2) {
            const [, baseUrl, restOfUrl] = match;
            return baseUrl + restOfUrl;
        }
        return url;
    }
    // Helper method to get file upload URL
    getFileUploadUrl() {
        return `${this.trimLanguageCodeFromUrl(salla.config.get('store.url'), salla.config.get('user.language_code'))}/upload-image`;
    }
    // Render custom fields based on user-defined fields
    renderCustomFields() {
        if (!this.userDefinedFields) {
            return '';
        }
        return this.userDefinedFields.map((field) => {
            return (h("div", { class: "s-user-profile-field" }, h("label", { htmlFor: `${field.id}`, class: "s-user-profile-field-label" }, field.label), this.renderCustomField(field)));
        });
    }
    renderCustomField(field) {
        if (field.type !== FormFieldTypes.Photo) {
            return (h("input", { type: field.type, id: `${field.id}`, value: field.value, onChange: event => this.handleFieldChange(`custom_fields[${field.id}]`, event), name: `custom_fields[${field.id}]`, class: "form-input", required: field.required }));
        }
        return (h("salla-file-upload", { "instant-upload": true, value: field.value, url: this.getFileUploadUrl(), name: `custom_fields[${field.id}]`, "payload-name": "image", height: "120px", onAdded: data => this.handleOnFileAdded(`custom_fields[${field.id}]`, data) }, h("div", { class: "s-user-profile-filepond-placeholder" }, h("span", { class: "s-user-profile-filepond-placeholder-icon" }, h("i", { innerHTML: CameraIcon })), h("p", { class: "s-user-profile-filepond-placeholder-text" }, this.drag_and_drop_trans), h("span", { class: "filepond--label-action" }, this.browse_trans))));
    }
    // Submit form method
    submitForm(event) {
        event.preventDefault();
        this.disableAction = true;
        let payload = Object.assign({}, this.userData);
        delete payload.phone;
        //@ts-ignore
        payload['phone'] = this.userData.phone.number;
        payload['country_code'] = this.userData.phone.country;
        return salla.api.profile.update(payload).finally(() => (this.disableAction = false));
    }
    getBirthDateRestriction() {
        const now = new Date();
        const pastYear = now.getFullYear() - this.minAge;
        now.setFullYear(pastYear);
        return now;
    }
    fetchData() {
        let customFields = null;
        // Load user-defined fields and initial user data
        if (this.customFields) {
            customFields = typeof this.customFields === 'string'
                ? JSON.parse(this.customFields)
                : this.customFields;
        }
        if (customFields && Array.isArray(customFields)) {
            this.userDefinedFields = customFields;
        }
        return salla.api.profile
            .info()
            .then(resp => (this.userData = resp.data))
            .finally(() => {
            this.isLoading = false;
            this.isEditable = !Salla.config.get('store.features').includes('sso-login');
        });
    }
    renderLoadingSection() {
        return (h("div", { class: "s-user-profile-skeleton-wrapper" }, Array.from({ length: 6 }, (_, i) => (h("salla-skeleton", { class: "skeleton-item", width: "100%", height: "50px", key: i })))));
    }
    componentWillLoad() {
        Salla.onReady().then(() => this.fetchData());
    }
    render() {
        if (this.isLoading) {
            return this.renderLoadingSection();
        }
        return (h("form", { onSubmit: event => this.submitForm(event) }, h("div", { class: "s-user-profile-wrapper" }, h("div", { class: "s-user-profile-field" }, h("label", { htmlFor: "first-name", class: "s-user-profile-field-label" }, this.first_name_trans), h("input", { disabled: !this.isEditable, type: "text", name: "first_name", value: this.userData.first_name, id: "first-name", required: true, autocomplete: "first_name", class: "form-input", onChange: event => this.handleFieldChange('first_name', event) })), h("div", { class: "s-user-profile-field" }, h("label", { htmlFor: "last-name", class: "s-user-profile-field-label" }, this.last_name_trans), h("input", { disabled: !this.isEditable, type: "text", name: "last_name", value: this.userData.last_name, id: "last-name", required: true, autocomplete: "last_name", class: "form-input", onChange: event => this.handleFieldChange('last_name', event) })), h("div", { class: "s-user-profile-field" }, h("label", { htmlFor: "birthday", class: "s-user-profile-field-label" }, this.birthday_trans), h("salla-datetime-picker", { disabled: !this.isEditable, dateFormat: "Y-m-d", value: this.userData.birthday, placeholder: this.birthday_placeholder_trans, required: true, maxDate: this.getBirthDateRestriction(), name: "birthday", onPicked: event => this.handleFieldChange('birthday', event) })), h("div", { class: "s-user-profile-field" }, h("label", { htmlFor: "gender", class: "s-user-profile-field-label" }, this.gender_trans), h("select", { disabled: !this.isEditable, class: "form-input", name: "gender", required: true, onChange: event => this.handleFieldChange('gender', event) }, h("option", { value: "" }, this.gender_placeholder_trans), h("option", { value: Genders.Male, selected: this.userData.gender == Genders.Male }, this.male_trans), h("option", { value: Genders.Female, selected: this.userData.gender == Genders.Female }, this.female_trans))), h("div", { class: "s-user-profile-field" }, h("label", { htmlFor: "email", class: "s-user-profile-field-label" }, this.email_trans), h("input", { disabled: !this.isEditable, type: "email", name: "email", value: this.userData.email, id: "email", class: "form-input", required: true, onInput: event => this.handleEmailInput('email', event) }), h("p", { id: "email-error", class: "s-user-profile-field-error" })), h("div", { class: "s-user-profile-field" }, h("label", { htmlFor: "international-mobile", class: "s-user-profile-field-label" }, this.mobile_trans), h("salla-tel-input", { disabled: !this.isEditable, name: "international-mobile", "country-code": this.userData.phone.country, phone: `${this.userData.phone.number}`, onPhoneEntered: data => this.phoneNumberFieldEventHandler(data) })), this.isEditable && this.renderCustomFields()), h("salla-button", { type: "submit", loading: this.disableAction, disabled: this.disableAction || !this.isEditable, "loader-position": "end", class: "s-user-profile-submit" }, this.save_btn_trans)));
    }
};
SallaUserProfile.style = sallaUserProfileCss;

var Bullhorn = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>bullhorn</title>
<path d="M30.129 0.264c-0.339-0.252-0.776-0.328-1.179-0.208l-24.951 7.485v-0.216c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333v14.667c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-0.112l3.448 1.207-0.595 1.704c-0.321 1.019-0.227 2.103 0.267 3.051s1.327 1.647 2.345 1.968l6.359 2.004c0.399 0.127 0.804 0.187 1.201 0.187 1.699 0 3.277-1.091 3.812-2.785l0.423-1.295 7.633 2.672c0.143 0.049 0.292 0.075 0.44 0.075 0.273 0 0.543-0.084 0.772-0.247 0.352-0.249 0.561-0.655 0.561-1.087v-28c0-0.421-0.199-0.819-0.537-1.069zM18.297 28.4c-0.221 0.701-0.973 1.089-1.673 0.871l-6.357-2.004c-0.34-0.108-0.617-0.34-0.781-0.656s-0.196-0.676-0.101-0.977l0.581-1.665 8.777 3.072zM28 27.453l-24-8.4v-8.728l24-7.2z"></path>
</svg>
`;

var UserOff = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>user-off</title>
<path d="M10.837 19.309c-4.963 1.284-8.171 4.303-8.171 7.691v3.667c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-3.667c0-2.101 2.48-4.155 6.172-5.109 0.713-0.184 1.141-0.912 0.957-1.625-0.184-0.711-0.908-1.137-1.625-0.956zM12.859 3.715c0.933-0.685 2.020-1.048 3.141-1.048 2.941 0 5.333 2.392 5.333 5.333 0 1.121-0.363 2.208-1.048 3.141-0.436 0.593-0.308 1.428 0.284 1.864 0.239 0.175 0.515 0.259 0.788 0.259 0.411 0 0.815-0.188 1.076-0.544 1.025-1.393 1.567-3.025 1.567-4.72 0-4.412-3.588-8-8-8-1.695 0-3.327 0.541-4.721 1.567-0.592 0.435-0.72 1.269-0.284 1.864 0.436 0.593 1.269 0.721 1.864 0.284zM31.609 29.724l-29.333-29.333c-0.521-0.521-1.364-0.521-1.885 0s-0.521 1.364 0 1.885l29.333 29.333c0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391c0.521-0.521 0.521-1.364 0-1.885z"></path>
</svg>
`;

var UserCancel = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>user-cancel</title>
<path d="M29.885 16l1.724-1.724c0.521-0.521 0.521-1.364 0-1.885s-1.364-0.521-1.885 0l-1.724 1.724-1.724-1.724c-0.521-0.521-1.364-0.521-1.885 0s-0.521 1.364 0 1.885l1.724 1.724-1.724 1.724c-0.521 0.521-0.521 1.364 0 1.885 0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391l1.724-1.724 1.724 1.724c0.26 0.26 0.601 0.391 0.943 0.391s0.683-0.131 0.943-0.391c0.521-0.521 0.521-1.364 0-1.885zM10.667 16c4.043 0 7.333-3.289 7.333-7.333s-3.291-7.333-7.333-7.333-7.333 3.289-7.333 7.333 3.291 7.333 7.333 7.333zM10.667 4c2.573 0 4.667 2.093 4.667 4.667s-2.093 4.667-4.667 4.667-4.667-2.093-4.667-4.667 2.093-4.667 4.667-4.667zM10.667 18.667c-5.881 0-10.667 3.813-10.667 8.5v2.167c0 0.736 0.596 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-2.167c0-3.217 3.588-5.833 8-5.833s8 2.616 8 5.833v2.167c0 0.736 0.596 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-2.167c0-4.687-4.785-8.5-10.667-8.5z"></path>
</svg>
`;

const sallaUserSettingsCss = "";

const SallaUserSettings = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        // Texts
        this.deactivateAccount = salla.lang.get('pages.profile.deactivate_account');
        this.promotionalMsgs = salla.lang.get('pages.profile.promotional_messages');
        this.hideMyName = salla.lang.get('pages.profile.hide_my_name');
        this.hideMyNameDesc = salla.lang.get('pages.profile.hide_my_name_desc');
        this.deactivateDesc = salla.lang.get('pages.profile.deactivate_account_description');
        this.promotionalMsgsDesc = salla.lang.get('pages.profile.promotional_messages_description');
        this.sorryForLeavingText = salla.lang.get('pages.profile.warning_for_deactivate');
        this.warningText = salla.lang.get('pages.profile.sorry_for_leaving');
        this.keepAccount = salla.lang.get('pages.profile.keep_account');
        this.buttonLoading = false;
        this.canHideName = salla.config.get('store.settings.rating.can_customer_hide_name');
        salla.onReady(() => {
            this.isHiddenName = salla.config.get('user.is_hidden_name');
            this.isNotifiable = salla.config.get('user.is_notifiable');
            this.canHideName = salla.config.get('store.settings.rating.can_customer_hide_name');
            if (!this.isNotifiable || !this.isHiddenName) {
                salla.event.on('profile::info.fetched', res => {
                    this.isHiddenName = res.data.is_hidden_name;
                    this.isNotifiable = res.data.is_notifiable;
                });
            }
        });
        salla.lang.onLoaded(() => {
            this.deactivateAccount = salla.lang.get('pages.profile.deactivate_account');
            this.promotionalMsgs = salla.lang.get('pages.profile.promotional_messages');
            this.hideMyName = salla.lang.get('pages.profile.hide_my_name');
            this.hideMyNameDesc = salla.lang.get('pages.profile.hide_my_name_desc');
            this.deactivateDesc = salla.lang.get('pages.profile.deactivate_account_description');
            this.promotionalMsgsDesc = salla.lang.get('pages.profile.promotional_messages_description');
            this.warningText = salla.lang.get('pages.profile.warning_for_deactivate');
            this.sorryForLeavingText = salla.lang.get('pages.profile.sorry_for_leaving');
            this.keepAccount = salla.lang.get('pages.profile.keep_account');
        });
    }
    toggleSetting(setting, event) {
        salla.profile.updateSettings({ name: setting, value: event.target.checked });
    }
    capitalizeText(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
    openDeactivateModal() {
        this.confirmationModal.setTitle(this.capitalizeText(this.deactivateAccount));
        this.confirmationModal.open();
    }
    async deleteAccount() {
        await salla.profile.delete().finally(() => this.confirmationModal.close());
    }
    render() {
        return (h(Host, { key: '85b2fe2739f6ac3c55939d3cb9c87fc404413e7f', class: "s-user-settings-wrapper" }, this.canHideName && h("div", { key: 'e46be8b9cb4898c9b676ee67f0750bb654bda953', class: "s-user-settings-section" }, h("salla-list-tile", { key: '48f81d5a9b511c2a8baabab2aab6ad3dcfb98370' }, h("div", { key: '9009c4d612aea7e7a6834b90f38d03d8c95bcc84', slot: "icon", class: "s-user-settings-section-icon" }, h("span", { key: '03f209e6e1e1adbdb130f9b80aed30f0618dd58c', innerHTML: UserCancel })), h("div", { key: 'fb02ca2387806135ac3f074f0a9f30ce4bb325ca', slot: "title", class: "s-user-settings-section-title" }, this.capitalizeText(this.hideMyName)), h("div", { key: '1ddbd1144a59745bf26f4650eb5d050a34d42e8f', slot: "subtitle", class: "s-user-settings-section-subtitle" }, this.capitalizeText(this.hideMyNameDesc)), h("div", { key: '0ff6163a407a53ff100c8d3235212c167dbb006a', slot: 'action', class: "s-user-settings-section-action" }, h("label", { key: '03b817a0bea880c9a2e056d4d8f0fb737dc0e5da', class: "s-toggle" }, h("input", { key: 'fcb56427c6d1ae503abdc768358e9ecfa9139dac', class: "s-toggle-input", checked: this.isHiddenName, onChange: (e) => this.toggleSetting('is_hidden_name', e), type: "checkbox" }), h("div", { key: 'ff312279ede50b86446d1305217053942d05a603', class: "s-toggle-switcher" }))))), h("div", { key: '08cf0045a6f96ae7046d9a7c640e53a5b2cec7dc', class: "s-user-settings-section" }, h("salla-list-tile", { key: '1ccbcd93cf4cef91693603b5b05dbc4f3b85dc65' }, h("div", { key: 'bf5270f2d2cae798463ab9516c11321e96c461ff', slot: "icon", class: "s-user-settings-section-icon" }, h("span", { key: '3bc3927296faa253a8b91710049eca3372fb24aa', innerHTML: Bullhorn })), h("div", { key: '60ddca373590545a7fd03498e4ff7306a23b05a9', slot: "title", class: "s-user-settings-section-title" }, this.capitalizeText(this.promotionalMsgs)), h("div", { key: '874e81d5e4727160a85bb3381fdfadcd65e774c0', slot: "subtitle", class: "s-user-settings-section-subtitle" }, this.capitalizeText(this.promotionalMsgsDesc)), h("div", { key: '6d2aacf7a72c4d25163913eccbb0a3e94595ec75', slot: 'action', class: "s-user-settings-section-action" }, h("label", { key: 'cf58459624592b34083afe61a0afc29dea03864e', class: "s-toggle" }, h("input", { key: 'b854ce4ca8224c8200623aad0dea4c659d89dee1', class: "s-toggle-input", checked: this.isNotifiable, onChange: (e) => this.toggleSetting('is_notifiable', e), type: "checkbox" }), h("div", { key: '785a5765e36056629a23ca53e48715f91c14ee1f', class: "s-toggle-switcher" }))))), h("div", { key: '9f58724a8d748809b39874efaa861643a78076eb', class: "s-user-settings-section s-user-settings-section-deactivate-user" }, h("salla-list-tile", { key: '12a69027f2822b6fa1e8fb641278932fc2206335' }, h("div", { key: '679eec74598612167c77443e5f6977991b333fd7', slot: "icon", class: "s-user-settings-section-icon" }, h("span", { key: '0263f8f31ad3e4ca60f2bb4bae910c143f2d36a8', innerHTML: UserOff })), h("div", { key: '6c0c17dfbcbb48ae3882b07b58fb0d1245a28cdb', slot: "title", class: "s-user-settings-section-title" }, this.capitalizeText(this.deactivateAccount)), h("div", { key: '07389c3b86b3d8e821b8b9c33cf43de1ee6527db', slot: "subtitle", class: "s-user-settings-section-subtitle" }, this.capitalizeText(this.deactivateDesc)), h("div", { key: 'e98736162d465c0717550eb8231b120acfafc4f6', slot: 'action', class: "s-user-settings-section-action" }, h("salla-button", { key: 'd29c5023b3a35f95c94a06dc87f0e2504b3a6390', fill: "outline", color: "danger", shape: "btn", size: "medium", width: "normal", onClick: () => this.openDeactivateModal() }, this.capitalizeText(this.deactivateAccount))))), h("salla-modal", { key: '6f23ca61fe62de261e7d2f616a4d5bf13fba1577', width: "sm", subTitle: this.capitalizeText(this.sorryForLeavingText), ref: modal => this.confirmationModal = modal }, h("span", { key: '89073dfc15d4a1349618180c776968012e843556', slot: 'icon', class: "s-user-settings-confirmation-icon", innerHTML: UserOff }), h("div", { key: 'f464a56ab783c4ddd51cc40e4d4dbf2f4ae21be2', class: "s-user-settings-confirmation" }, h("div", { key: 'e9921faaf8718ba51937006360b11d409bde4e05', class: "s-user-settings-confirmation-warning" }, this.capitalizeText(this.warningText)), h("div", { key: '4a71df323e6fa2b86cb85e77af438a51e9c1c5a9', class: "s-user-settings-confirmation-actions" }, h("salla-button", { key: '156249d17bdcc25b7c586af416001ec60e8b0f5b', width: "wide", onClick: () => this.confirmationModal.close() }, this.capitalizeText(this.keepAccount)), h("salla-button", { key: 'acbe44c04f77f8ccdcaeb90bfb731de399f88fc7', fill: 'outline', loading: this.buttonLoading, width: "wide", onClick: () => this.deleteAccount() }, this.capitalizeText(this.deactivateAccount)))))));
    }
};
SallaUserSettings.style = sallaUserSettingsCss;

export { SallaAccordion as salla_accordion, SallaAccordionBody as salla_accordion_body, SallaAccordionHead as salla_accordion_head, SallaAddProductButton as salla_add_product_button, SallaAlert as salla_alert, SallaBookingField as salla_booking_field, SallaBottomAlert as salla_bottom_alert, SallaBreadcrumb as salla_breadcrumb, SallaButton as salla_button, SallaCartSummary as salla_cart_summary, SallaColorPicker as salla_color_picker, SallaCommentForm as salla_comment_form, SallaCommentItem as salla_comment_item, SallaComments as salla_comments, SallaConditionalFields as salla_conditional_fields, SallaCountDown as salla_count_down, SallaDatetimePicker as salla_datetime_picker, SallaDrawer as salla_drawer, SallaFileUpload as salla_file_upload, SallaGifting as salla_gifting, SallaInfiniteScroll as salla_infinite_scroll, SallaListTile as salla_list_tile, SallaLoading as salla_loading, SallaLocalizationModal as salla_localization_modal, SallaLoginModal as salla_login_modal, SallaLoyalty as salla_loyalty, SallaMaintenanceAlert as salla_maintenance_alert, SallaMap as salla_map, SallaMenu as salla_menu, SallaModal as salla_modal, SallaMultipleBundleProduct as salla_multiple_bundle_product, SallaMultipleBundleProductCart as salla_multiple_bundle_product_cart, SallaMultipleBundleProductDetails as salla_multiple_bundle_product_details, SallaMultipleBundleProductOptionsModal as salla_multiple_bundle_product_options_modal, SallaMultipleBundleProductSlider as salla_multiple_bundle_product_slider, SallaOfferModal as salla_offer_modal, SallaPlaceholder as salla_placeholder, SallaProductAvailability as salla_product_availability, SallaProductCard as salla_product_card, SallaProductOptions as salla_product_options, SallaProductSizeGuide as salla_product_size_guide, SallaProductsList as salla_products_list, SallaProductsSlider as salla_products_slider, SallaProgressBar as salla_progress_bar, SallaQuantityInput as salla_quantity_input, SallaQuickBuy as salla_quick_buy, SallaQuickOrder as salla_quick_order, SallaRatingModal as salla_rating_modal, SallaRatingStars as salla_rating_stars, SallaReviewsSummary as salla_reviews_summary, SallaScopees as salla_scopes, SallaSearch as salla_search, SallaSkeleton as salla_skeleton, SallaSlider as salla_slider, SallaSocialShare as salla_social_share, SallaTabContent as salla_tab_content, SallaTabHeader as salla_tab_header, SallaTabs as salla_tabs, SallaTelInput as salla_tel_input, SallaUserMenu as salla_user_menu, SallaUserProfile as salla_user_profile, SallaUserSettings as salla_user_settings };
